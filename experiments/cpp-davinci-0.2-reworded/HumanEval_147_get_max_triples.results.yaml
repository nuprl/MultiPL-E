language: cpp
name: HumanEval_147_get_max_triples
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpu9c_i30w: /tmp/tmpu9c_i30w.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqmzcfpik: /tmp/tmpqmzcfpik.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    res++;\n                }\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpu4o2ee10: /tmp/tmpu4o2ee10.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long ans = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpghb41kqn: /tmp/tmpghb41kqn.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7m6h1bcx: /tmp/tmp7m6h1bcx.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long result = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpabzeyclp: /tmp/tmpabzeyclp.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long *a = new long[n];\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n   \
    \     for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0zb4_ghy: /tmp/tmp0zb4_ghy.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(long i = 0; i < n - 2; i++)\n  \
    \      for(long j = i + 1; j < n - 1; j++)\n            for(long k = j + 1; k\
    \ < n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n             \
    \       count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long cnt = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    cnt++;\n                }\n            }\n        }\n\
    \    }\n    return cnt;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpbnxwo79m: /tmp/tmpbnxwo79m.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\n      \
    \  a[i] = i * i - i + 1;\n    long count = 0;\n    for (long i = 0; i < n - 2;\
    \ i++)\n        for (long j = i + 1; j < n - 1; j++)\n            for (long k\
    \ = j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n \
    \                   count++;\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmprlgrnq5i: /tmp/tmprlgrnq5i.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplbakt4z8: /tmp/tmplbakt4z8.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplbakt4z8: /tmp/tmplbakt4z8.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    int count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqmzcfpik: /tmp/tmpqmzcfpik.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(long i = 0; i < n - 2; i++)\n  \
    \      for(long j = i + 1; j < n - 1; j++)\n            for(long k = j + 1; k\
    \ < n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n             \
    \       count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(long i = 0; i < n - 2; i++)\n  \
    \      for(long j = i + 1; j < n - 1; j++)\n            for(long k = j + 1; k\
    \ < n; k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n             \
    \       count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqmzcfpik: /tmp/tmpqmzcfpik.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp6j3042dk: /tmp/tmp6j3042dk.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\n   \
    \     for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    sum++;\n                }\n            }\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdzr6xazv: /tmp/tmpdzr6xazv.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpu9c_i30w: /tmp/tmpu9c_i30w.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplbakt4z8: /tmp/tmplbakt4z8.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    sum++;\n                }\n            }\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdzr6xazv: /tmp/tmpdzr6xazv.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplbakt4z8: /tmp/tmplbakt4z8.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpezzoiqs7: /tmp/tmpezzoiqs7.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    std::vector<long> a(n);\n    for (int i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k =\
    \ j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpo4_32tnp: /tmp/tmpo4_32tnp.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // To print results to the standard output\
    \ you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n  \
    \  long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++){\n\
    \        a.push_back(i*i - i + 1);\n    }\n    for(long i = 0; i < n-2; i++){\n\
    \        for(long j = i+1; j < n-1; j++){\n            for(long k = j+1; k < n;\
    \ k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                \
    \    count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp6j3042dk: /tmp/tmp6j3042dk.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    long sum = 0;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    sum++;\n                }\n            }\n  \
    \      }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057234
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp6j3042dk: /tmp/tmp6j3042dk.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a;\n    for(long i = 1; i <=\
    \ n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++) {\n        a.push_back(i\
    \ * i - i + 1);\n    }\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\
    \ {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int k = j +\
    \ 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ == 0) {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp6j3042dk: /tmp/tmp6j3042dk.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\n   \
    \     for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> a(n);\n    for (long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpglpltdd2: /tmp/tmpglpltdd2.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\n   \
    \     for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n     \
    \   a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k\
    \ = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpllm75bxo: /tmp/tmpllm75bxo.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(long i = 1; i <= n; i++) {\n       \
    \ a.push_back(i * i - i + 1);\n    }\n    long count = 0;\n    for(long i = 0;\
    \ i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n         \
    \   for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long arr[n];\n    for(long i=0;i<n;i++)\n    {\n        arr[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((arr[i]+arr[j]+arr[k])%3==0)\n                {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpjcq0cssa: /tmp/tmpjcq0cssa.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2jbbxkqa: /tmp/tmp2jbbxkqa.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmvysg0i2: /tmp/tmpmvysg0i2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmllhbf_p: /tmp/tmpmllhbf_p.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a;\n    for(int i = 1; i <= n; i++)\n        a.push_back(i\
    \ * i - i + 1);\n    long count = 0;\n    for(int i = 0; i < n - 2; i++)\n   \
    \     for(int j = i + 1; j < n - 1; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  count++;\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer vector a of length n.\n// For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    std::vector<long> a(n);\n    for (long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqmzcfpik: /tmp/tmpqmzcfpik.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660057233
