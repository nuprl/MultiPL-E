language: cpp
name: HumanEval_69_search
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9a49b9n.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpa9a49b9n.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpa9a49b9n.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa9a49b9n.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpa9a49b9n.cpp: In function 'int main()':\n/tmp/tmpa9a49b9n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9a49b9n.cpp:2:\n/tmp/tmpa9a49b9n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9a49b9n.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypv4za72.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpypv4za72.cpp:20:14: error: 'it' does not name a type\n     for(auto it\
    \ = m.begin(); it != m.end(); it++) {\n              ^\n/tmp/tmpypv4za72.cpp:20:30:\
    \ error: expected ';' before 'it'\n     for(auto it = m.begin(); it != m.end();\
    \ it++) {\n                              ^\n/tmp/tmpypv4za72.cpp:20:30: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpypv4za72.cpp: In function 'int\
    \ main()':\n/tmp/tmpypv4za72.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpypv4za72.cpp:2:\n/tmp/tmpypv4za72.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpypv4za72.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpypv4za72.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpypv4za72.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpypv4za72.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpypv4za72.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            if (it->first >\
    \ max) {\n                max = it->first;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkz894mz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpwkz894mz.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmpwkz894mz.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmpwkz894mz.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpwkz894mz.cpp: In function 'int\
    \ main()':\n/tmp/tmpwkz894mz.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwkz894mz.cpp:2:\n/tmp/tmpwkz894mz.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwkz894mz.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwkz894mz.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwkz894mz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9a49b9n.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpa9a49b9n.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpa9a49b9n.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa9a49b9n.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpa9a49b9n.cpp: In function 'int main()':\n/tmp/tmpa9a49b9n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9a49b9n.cpp:2:\n/tmp/tmpa9a49b9n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9a49b9n.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for(auto i: m) {\n        if(i.first <= i.second && i.first > max) {\n  \
    \          max = i.first;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1vd4deiq.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp1vd4deiq.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst) {\n              ^\n/tmp/tmp1vd4deiq.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmp1vd4deiq.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i: m) {\n     ^\n/tmp/tmp1vd4deiq.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmp1vd4deiq.cpp:20:14: error: 'i' does\
    \ not name a type\n     for(auto i: m) {\n              ^\n/tmp/tmp1vd4deiq.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmp1vd4deiq.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp1vd4deiq.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp1vd4deiq.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp1vd4deiq.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp1vd4deiq.cpp: In function 'int main()':\n/tmp/tmp1vd4deiq.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1vd4deiq.cpp:2:\n/tmp/tmp1vd4deiq.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp1vd4deiq.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp1vd4deiq.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1vd4deiq.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first<=i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptunqj8z_.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmptunqj8z_.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmptunqj8z_.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmptunqj8z_.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmptunqj8z_.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmptunqj8z_.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmptunqj8z_.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmptunqj8z_.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmptunqj8z_.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmptunqj8z_.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmptunqj8z_.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmptunqj8z_.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmptunqj8z_.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmptunqj8z_.cpp:\
    \ In function 'int main()':\n/tmp/tmptunqj8z_.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptunqj8z_.cpp:2:\n/tmp/tmptunqj8z_.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmptunqj8z_.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmptunqj8z_.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       if (i.first > max) {\n                max = i.first;\n            }\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc17ge24r.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpc17ge24r.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpc17ge24r.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpc17ge24r.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpc17ge24r.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpc17ge24r.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpc17ge24r.cpp:27:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpc17ge24r.cpp:27:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpc17ge24r.cpp:27:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpc17ge24r.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpc17ge24r.cpp:27:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpc17ge24r.cpp: In function 'int main()':\n/tmp/tmpc17ge24r.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc17ge24r.cpp:2:\n/tmp/tmpc17ge24r.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpc17ge24r.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpc17ge24r.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc17ge24r.cpp:31:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tstd::map<long,\
    \ long> map;\n\tfor (auto i : lst) {\n\t\tmap[i]++;\n\t}\n\tfor (auto i : map)\
    \ {\n\t\tif (i.first <= i.second) {\n\t\t\treturn i.first;\n\t\t}\n\t}\n\treturn\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpni3ln4b1.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpni3ln4b1.cpp:16:12: error: 'i' does not name a type\n  for (auto i : lst)\
    \ {\n            ^\n/tmp/tmpni3ln4b1.cpp:19:2: error: expected ';' before 'for'\n\
    \  for (auto i : map) {\n  ^\n/tmp/tmpni3ln4b1.cpp:19:2: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpni3ln4b1.cpp:19:2: error: expected ';' before 'for'\n\
    /tmp/tmpni3ln4b1.cpp:19:2: error: expected primary-expression before 'for'\n/tmp/tmpni3ln4b1.cpp:19:2:\
    \ error: expected ')' before 'for'\n/tmp/tmpni3ln4b1.cpp:19:12: error: 'i' does\
    \ not name a type\n  for (auto i : map) {\n            ^\n/tmp/tmpni3ln4b1.cpp:24:2:\
    \ error: expected ';' before 'return'\n  return -1;\n  ^\n/tmp/tmpni3ln4b1.cpp:24:2:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpni3ln4b1.cpp:24:2:\
    \ error: expected ';' before 'return'\n/tmp/tmpni3ln4b1.cpp:24:2: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpni3ln4b1.cpp:24:2: error: expected\
    \ ')' before 'return'\n/tmp/tmpni3ln4b1.cpp: In function 'int main()':\n/tmp/tmpni3ln4b1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpni3ln4b1.cpp:2:\n/tmp/tmpni3ln4b1.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpni3ln4b1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpni3ln4b1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // your code\
    \ here\n    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        m[lst[i]]++;\n    }\n    long max = -1;\n    for(auto it = m.begin();\
    \ it != m.end(); it++){\n        if(it->first <= it->second && it->first > max){\n\
    \            max = it->first;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_jqogva.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp4_jqogva.cpp:21:14: error: 'it' does not name a type\n     for(auto it\
    \ = m.begin(); it != m.end(); it++){\n              ^\n/tmp/tmp4_jqogva.cpp:21:30:\
    \ error: expected ';' before 'it'\n     for(auto it = m.begin(); it != m.end();\
    \ it++){\n                              ^\n/tmp/tmp4_jqogva.cpp:21:30: error:\
    \ 'it' was not declared in this scope\n/tmp/tmp4_jqogva.cpp: In function 'int\
    \ main()':\n/tmp/tmp4_jqogva.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4_jqogva.cpp:2:\n/tmp/tmp4_jqogva.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp4_jqogva.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp4_jqogva.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_jqogva.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4_jqogva.cpp:30:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4_jqogva.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9a49b9n.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpa9a49b9n.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpa9a49b9n.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa9a49b9n.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpa9a49b9n.cpp: In function 'int main()':\n/tmp/tmpa9a49b9n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9a49b9n.cpp:2:\n/tmp/tmpa9a49b9n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9a49b9n.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second && it->first > max) {\n            max\
    \ = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypv4za72.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpypv4za72.cpp:20:14: error: 'it' does not name a type\n     for(auto it\
    \ = m.begin(); it != m.end(); it++) {\n              ^\n/tmp/tmpypv4za72.cpp:20:30:\
    \ error: expected ';' before 'it'\n     for(auto it = m.begin(); it != m.end();\
    \ it++) {\n                              ^\n/tmp/tmpypv4za72.cpp:20:30: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpypv4za72.cpp: In function 'int\
    \ main()':\n/tmp/tmpypv4za72.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpypv4za72.cpp:2:\n/tmp/tmpypv4za72.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpypv4za72.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpypv4za72.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpypv4za72.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpypv4za72.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpypv4za72.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n  std::unordered_map<long,\
    \ long> freq;\n  for (auto x : lst) {\n    freq[x]++;\n  }\n  long max = -1;\n\
    \  for (auto x : freq) {\n    if (x.first <= x.second && x.first > max) {\n  \
    \    max = x.first;\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pdbz1h0.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp4pdbz1h0.cpp:15:3: error: 'unordered_map' is not a member of 'std'\n \
    \  std::unordered_map<long, long> freq;\n   ^\n/tmp/tmp4pdbz1h0.cpp:15:22: error:\
    \ expected primary-expression before 'long'\n   std::unordered_map<long, long>\
    \ freq;\n                      ^\n/tmp/tmp4pdbz1h0.cpp:15:22: error: expected\
    \ ';' before 'long'\n/tmp/tmp4pdbz1h0.cpp:16:13: error: 'x' does not name a type\n\
    \   for (auto x : lst) {\n             ^\n/tmp/tmp4pdbz1h0.cpp:19:3: error: expected\
    \ ';' before 'long'\n   long max = -1;\n   ^\n/tmp/tmp4pdbz1h0.cpp:20:3: error:\
    \ expected primary-expression before 'for'\n   for (auto x : freq) {\n   ^\n/tmp/tmp4pdbz1h0.cpp:20:3:\
    \ error: expected ')' before 'for'\n/tmp/tmp4pdbz1h0.cpp:20:13: error: 'x' does\
    \ not name a type\n   for (auto x : freq) {\n             ^\n/tmp/tmp4pdbz1h0.cpp:25:3:\
    \ error: expected ';' before 'return'\n   return max;\n   ^\n/tmp/tmp4pdbz1h0.cpp:25:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp4pdbz1h0.cpp:25:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp4pdbz1h0.cpp:25:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp4pdbz1h0.cpp:25:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp4pdbz1h0.cpp: In function 'int main()':\n/tmp/tmp4pdbz1h0.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4pdbz1h0.cpp:2:\n/tmp/tmp4pdbz1h0.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp4pdbz1h0.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n    long ans = -1;\n\
    \    for(auto i : m) {\n        if(i.first <= i.second) {\n            ans = std::max(ans,\
    \ i.first);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15b9_78u.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp15b9_78u.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) {\n              ^\n/tmp/tmp15b9_78u.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long ans = -1;\n     ^\n/tmp/tmp15b9_78u.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i : m) {\n     ^\n/tmp/tmp15b9_78u.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmp15b9_78u.cpp:20:14: error: 'i' does\
    \ not name a type\n     for(auto i : m) {\n              ^\n/tmp/tmp15b9_78u.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmp15b9_78u.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp15b9_78u.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp15b9_78u.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp15b9_78u.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp15b9_78u.cpp: In function 'int main()':\n/tmp/tmp15b9_78u.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp15b9_78u.cpp:2:\n/tmp/tmp15b9_78u.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp15b9_78u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp15b9_78u.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp15b9_78u.cpp:29:86: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            if (it->first >\
    \ max) {\n                max = it->first;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkz894mz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpwkz894mz.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmpwkz894mz.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmpwkz894mz.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpwkz894mz.cpp: In function 'int\
    \ main()':\n/tmp/tmpwkz894mz.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwkz894mz.cpp:2:\n/tmp/tmpwkz894mz.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwkz894mz.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwkz894mz.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwkz894mz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxaqf69el.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpxaqf69el.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmpxaqf69el.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmpxaqf69el.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmpxaqf69el.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpxaqf69el.cpp:19:5: error:\
    \ expected ';' before 'for'\n     for (auto i : lst) {\n     ^\n/tmp/tmpxaqf69el.cpp:19:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpxaqf69el.cpp:19:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpxaqf69el.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpxaqf69el.cpp:19:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpxaqf69el.cpp:19:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpxaqf69el.cpp:24:5: error:\
    \ expected ';' before 'return'\n     return -1;\n     ^\n/tmp/tmpxaqf69el.cpp:24:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxaqf69el.cpp:24:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpxaqf69el.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxaqf69el.cpp:24:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpxaqf69el.cpp: In function 'int main()':\n/tmp/tmpxaqf69el.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxaqf69el.cpp:2:\n/tmp/tmpxaqf69el.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpxaqf69el.cpp:28:86:\
    \ warning: extended initializer lists only available with -"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3hpiz7e.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpn3hpiz7e.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmpn3hpiz7e.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmpn3hpiz7e.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmpn3hpiz7e.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpn3hpiz7e.cpp:19:5: error:\
    \ expected ';' before 'long'\n     long max = -1;\n     ^\n/tmp/tmpn3hpiz7e.cpp:20:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : freq) {\n\
    \     ^\n/tmp/tmpn3hpiz7e.cpp:20:5: error: expected ')' before 'for'\n/tmp/tmpn3hpiz7e.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : freq) {\n              \
    \ ^\n/tmp/tmpn3hpiz7e.cpp:25:5: error: expected ';' before 'return'\n     return\
    \ max;\n     ^\n/tmp/tmpn3hpiz7e.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpn3hpiz7e.cpp:25:5: error: expected ';' before 'return'\n\
    /tmp/tmpn3hpiz7e.cpp:25:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpn3hpiz7e.cpp:25:5: error: expected ')' before 'return'\n/tmp/tmpn3hpiz7e.cpp:\
    \ In function 'int main()':\n/tmp/tmpn3hpiz7e.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn3hpiz7e.cpp:2:\n/tmp/tmpn3hpiz7e.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpn3hpiz7e.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for(auto i: m) {\n        if(i.first <= i.second) {\n            if(i.first\
    \ > max) {\n                max = i.first;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnimi1y8q.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpnimi1y8q.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst) {\n              ^\n/tmp/tmpnimi1y8q.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpnimi1y8q.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i: m) {\n     ^\n/tmp/tmpnimi1y8q.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpnimi1y8q.cpp:20:14: error: 'i' does\
    \ not name a type\n     for(auto i: m) {\n              ^\n/tmp/tmpnimi1y8q.cpp:27:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpnimi1y8q.cpp:27:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpnimi1y8q.cpp:27:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpnimi1y8q.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpnimi1y8q.cpp:27:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpnimi1y8q.cpp: In function 'int main()':\n/tmp/tmpnimi1y8q.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnimi1y8q.cpp:2:\n/tmp/tmpnimi1y8q.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpnimi1y8q.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpnimi1y8q.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnimi1y8q.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second) {\n            if (it->first >\
    \ max) {\n                max = it->first;\n            }\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkz894mz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpwkz894mz.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmpwkz894mz.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmpwkz894mz.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpwkz894mz.cpp: In function 'int\
    \ main()':\n/tmp/tmpwkz894mz.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwkz894mz.cpp:2:\n/tmp/tmpwkz894mz.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpwkz894mz.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwkz894mz.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwkz894mz.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwkz894mz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       ans = std::max(ans, i.first);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpciy78b_1.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpciy78b_1.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpciy78b_1.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long ans = -1;\n     ^\n/tmp/tmpciy78b_1.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpciy78b_1.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpciy78b_1.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpciy78b_1.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpciy78b_1.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpciy78b_1.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpciy78b_1.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpciy78b_1.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpciy78b_1.cpp: In function 'int main()':\n/tmp/tmpciy78b_1.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpciy78b_1.cpp:2:\n/tmp/tmpciy78b_1.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpciy78b_1.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpciy78b_1.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpciy78b_1.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n\
    \    }\n    long ans = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\
    \ {\n        if(it->first <= it->second) {\n            ans = std::max(ans, it->first);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwyqug23.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpzwyqug23.cpp:20:14: error: 'it' does not name a type\n     for(auto it\
    \ = m.begin(); it != m.end(); it++) {\n              ^\n/tmp/tmpzwyqug23.cpp:20:30:\
    \ error: expected ';' before 'it'\n     for(auto it = m.begin(); it != m.end();\
    \ it++) {\n                              ^\n/tmp/tmpzwyqug23.cpp:20:30: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpzwyqug23.cpp: In function 'int\
    \ main()':\n/tmp/tmpzwyqug23.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwyqug23.cpp:2:\n/tmp/tmpzwyqug23.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpzwyqug23.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpzwyqug23.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzwyqug23.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzwyqug23.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzwyqug23.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst) m[i]++;\n    for(auto i : m) {\n        if(i.first\
    \ <= i.second) return i.first;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvg3tb34.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpuvg3tb34.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) m[i]++;\n              ^\n/tmp/tmpuvg3tb34.cpp:17:5: error: expected ';'\
    \ before 'for'\n     for(auto i : m) {\n     ^\n/tmp/tmpuvg3tb34.cpp:17:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpuvg3tb34.cpp:17:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpuvg3tb34.cpp:17:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpuvg3tb34.cpp:17:5: error: expected ')' before 'for'\n\
    /tmp/tmpuvg3tb34.cpp:17:14: error: 'i' does not name a type\n     for(auto i :\
    \ m) {\n              ^\n/tmp/tmpuvg3tb34.cpp:20:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmpuvg3tb34.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuvg3tb34.cpp:20:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpuvg3tb34.cpp:20:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpuvg3tb34.cpp:20:5: error: expected ')' before 'return'\n\
    /tmp/tmpuvg3tb34.cpp: In function 'int main()':\n/tmp/tmpuvg3tb34.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpuvg3tb34.cpp:2:\n/tmp/tmpuvg3tb34.cpp:24:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpuvg3tb34.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpuvg3tb34.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    for(auto i: m)\
    \ {\n        if(i.first <= i.second) {\n            return i.first;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnoszmaw_.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpnoszmaw_.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst) {\n              ^\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m) {\n     ^\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpnoszmaw_.cpp:19:14: error: 'i' does not name a type\n     for(auto i:\
    \ m) {\n              ^\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpnoszmaw_.cpp: In function 'int main()':\n/tmp/tmpnoszmaw_.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnoszmaw_.cpp:2:\n/tmp/tmpnoszmaw_.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpnoszmaw_.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpnoszmaw_.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst) {\n        m[i]++;\n    }\n    for(auto i: m)\
    \ {\n        if(i.first <= i.second) {\n            return i.first;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnoszmaw_.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpnoszmaw_.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst) {\n              ^\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m) {\n     ^\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpnoszmaw_.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpnoszmaw_.cpp:19:14: error: 'i' does not name a type\n     for(auto i:\
    \ m) {\n              ^\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpnoszmaw_.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpnoszmaw_.cpp: In function 'int main()':\n/tmp/tmpnoszmaw_.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnoszmaw_.cpp:2:\n/tmp/tmpnoszmaw_.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpnoszmaw_.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpnoszmaw_.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    long max = -1;\n    for(auto\
    \ i : m)\n        if(i.first <= i.second && i.first > max)\n            max =\
    \ i.first;\n    return max;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4,\
    \ (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzbmqpmo.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmphzbmqpmo.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmphzbmqpmo.cpp:18:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmphzbmqpmo.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i : m)\n     ^\n/tmp/tmphzbmqpmo.cpp:19:5:\
    \ error: expected ')' before 'for'\n/tmp/tmphzbmqpmo.cpp:19:14: error: 'i' does\
    \ not name a type\n     for(auto i : m)\n              ^\n/tmp/tmphzbmqpmo.cpp:22:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmphzbmqpmo.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmphzbmqpmo.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmphzbmqpmo.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmphzbmqpmo.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmphzbmqpmo.cpp: In function 'int main()':\n/tmp/tmphzbmqpmo.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphzbmqpmo.cpp:2:\n/tmp/tmphzbmqpmo.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmphzbmqpmo.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmphzbmqpmo.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphzbmqpmo.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> frequency;\n    for (auto i: lst) {\n        frequency[i]++;\n    }\n\
    \    long max = -1;\n    for (auto i: frequency) {\n        if (i.first <= i.second)\
    \ {\n            if (i.first > max) {\n                max = i.first;\n      \
    \      }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48z2aybc.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp48z2aybc.cpp:16:15: error: 'i' does not name a type\n     for (auto i:\
    \ lst) {\n               ^\n/tmp/tmp48z2aybc.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmp48z2aybc.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i: frequency) {\n     ^\n/tmp/tmp48z2aybc.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmp48z2aybc.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i: frequency) {\n               ^\n/tmp/tmp48z2aybc.cpp:27:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmp48z2aybc.cpp:27:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp48z2aybc.cpp:27:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp48z2aybc.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp48z2aybc.cpp:27:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp48z2aybc.cpp: In function 'int main()':\n/tmp/tmp48z2aybc.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp48z2aybc.cpp:2:\n/tmp/tmp48z2aybc.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp48z2aybc.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp48z2aybc.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp48z2aybc.cpp:31:86: error: no matching function\
    \ for ca"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9a49b9n.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpa9a49b9n.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpa9a49b9n.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa9a49b9n.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpa9a49b9n.cpp: In function 'int main()':\n/tmp/tmpa9a49b9n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9a49b9n.cpp:2:\n/tmp/tmpa9a49b9n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9a49b9n.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tstd::map<long,\
    \ long> m;\n\tfor (auto i : lst) {\n\t\tm[i]++;\n\t}\n\tfor (auto i : m) {\n\t\
    \tif (i.first <= i.second) {\n\t\t\treturn i.first;\n\t\t}\n\t}\n\treturn -1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqryyukdj.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpqryyukdj.cpp:16:12: error: 'i' does not name a type\n  for (auto i : lst)\
    \ {\n            ^\n/tmp/tmpqryyukdj.cpp:19:2: error: expected ';' before 'for'\n\
    \  for (auto i : m) {\n  ^\n/tmp/tmpqryyukdj.cpp:19:2: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpqryyukdj.cpp:19:2: error: expected ';' before 'for'\n\
    /tmp/tmpqryyukdj.cpp:19:2: error: expected primary-expression before 'for'\n/tmp/tmpqryyukdj.cpp:19:2:\
    \ error: expected ')' before 'for'\n/tmp/tmpqryyukdj.cpp:19:12: error: 'i' does\
    \ not name a type\n  for (auto i : m) {\n            ^\n/tmp/tmpqryyukdj.cpp:24:2:\
    \ error: expected ';' before 'return'\n  return -1;\n  ^\n/tmp/tmpqryyukdj.cpp:24:2:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpqryyukdj.cpp:24:2:\
    \ error: expected ';' before 'return'\n/tmp/tmpqryyukdj.cpp:24:2: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpqryyukdj.cpp:24:2: error: expected\
    \ ')' before 'return'\n/tmp/tmpqryyukdj.cpp: In function 'int main()':\n/tmp/tmpqryyukdj.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqryyukdj.cpp:2:\n/tmp/tmpqryyukdj.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpqryyukdj.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpqryyukdj.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by de"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tstd::map<long,\
    \ long> freq;\n\tfor (auto i : lst) {\n\t\tfreq[i]++;\n\t}\n\tlong max = -1;\n\
    \tfor (auto i : freq) {\n\t\tif (i.first <= i.second && i.first > max) {\n\t\t\
    \tmax = i.first;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocva9rjo.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpocva9rjo.cpp:16:12: error: 'i' does not name a type\n  for (auto i : lst)\
    \ {\n            ^\n/tmp/tmpocva9rjo.cpp:19:2: error: expected ';' before 'long'\n\
    \  long max = -1;\n  ^\n/tmp/tmpocva9rjo.cpp:20:2: error: expected primary-expression\
    \ before 'for'\n  for (auto i : freq) {\n  ^\n/tmp/tmpocva9rjo.cpp:20:2: error:\
    \ expected ')' before 'for'\n/tmp/tmpocva9rjo.cpp:20:12: error: 'i' does not name\
    \ a type\n  for (auto i : freq) {\n            ^\n/tmp/tmpocva9rjo.cpp:25:2: error:\
    \ expected ';' before 'return'\n  return max;\n  ^\n/tmp/tmpocva9rjo.cpp:25:2:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpocva9rjo.cpp:25:2:\
    \ error: expected ';' before 'return'\n/tmp/tmpocva9rjo.cpp:25:2: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpocva9rjo.cpp:25:2: error: expected\
    \ ')' before 'return'\n/tmp/tmpocva9rjo.cpp: In function 'int main()':\n/tmp/tmpocva9rjo.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpocva9rjo.cpp:2:\n/tmp/tmpocva9rjo.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpocva9rjo.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpocva9rjo.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpocva9rjo.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n    long max = -1;\n\
    \    for(auto i : m) {\n        if(i.first <= i.second && i.first > max) {\n \
    \           max = i.first;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf80d2xup.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpf80d2xup.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) {\n              ^\n/tmp/tmpf80d2xup.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpf80d2xup.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i : m) {\n     ^\n/tmp/tmpf80d2xup.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpf80d2xup.cpp:20:14: error: 'i' does\
    \ not name a type\n     for(auto i : m) {\n              ^\n/tmp/tmpf80d2xup.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpf80d2xup.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpf80d2xup.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpf80d2xup.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpf80d2xup.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpf80d2xup.cpp: In function 'int main()':\n/tmp/tmpf80d2xup.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf80d2xup.cpp:2:\n/tmp/tmpf80d2xup.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpf80d2xup.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpf80d2xup.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf80d2xup.cpp:29:86: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i : lst) {\n        freq[i]++;\n    }\n    long ans\
    \ = -1;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if\
    \ (it->first <= it->second) {\n            ans = std::max(ans, it->first);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgznehx5_.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpgznehx5_.cpp:16:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpgznehx5_.cpp:20:15:\
    \ error: 'it' does not name a type\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n               ^\n/tmp/tmpgznehx5_.cpp:20:34: error: expected ';' before\
    \ 'it'\n     for (auto it = freq.begin(); it != freq.end(); it++) {\n        \
    \                          ^\n/tmp/tmpgznehx5_.cpp:20:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpgznehx5_.cpp: In function 'int main()':\n/tmp/tmpgznehx5_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgznehx5_.cpp:2:\n/tmp/tmpgznehx5_.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpgznehx5_.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpgznehx5_.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgznehx5_.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgznehx5_.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    fro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // your code\
    \ here\n    std::map<long, long> m;\n    for(auto i: lst)\n    {\n        m[i]++;\n\
    \    }\n    long max = -1;\n    for(auto i: m)\n    {\n        if(i.first <= i.second\
    \ && i.first > max)\n        {\n            max = i.first;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrr9rkr5.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpjrr9rkr5.cpp:17:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpjrr9rkr5.cpp:21:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpjrr9rkr5.cpp:22:5: error: expected\
    \ primary-expression before 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpjrr9rkr5.cpp:22:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpjrr9rkr5.cpp:22:14: error: 'i' does\
    \ not name a type\n     for(auto i: m)\n              ^\n/tmp/tmpjrr9rkr5.cpp:29:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpjrr9rkr5.cpp:29:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpjrr9rkr5.cpp:29:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpjrr9rkr5.cpp:29:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpjrr9rkr5.cpp:29:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpjrr9rkr5.cpp: In function 'int main()':\n/tmp/tmpjrr9rkr5.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjrr9rkr5.cpp:2:\n/tmp/tmpjrr9rkr5.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpjrr9rkr5.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpjrr9rkr5.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjrr9rkr5.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n\tstd::map<long,\
    \ long> m;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tm[lst[i]]++;\n\t}\n\
    \tlong max = -1;\n\tfor (std::map<long, long>::iterator it = m.begin(); it !=\
    \ m.end(); it++) {\n\t\tif (it->first <= it->second && it->first > max) {\n\t\t\
    \tmax = it->first;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxfbio6n.cpp: In function 'int main()':\n/tmp/tmpvxfbio6n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvxfbio6n.cpp:2:\n/tmp/tmpvxfbio6n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpvxfbio6n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpvxfbio6n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvxfbio6n.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvxfbio6n.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvxfbio6n.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvxfbio6n.cpp:2:\n/tmp/tmpvxf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5mg1c5ma.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp5mg1c5ma.cpp:20:15: error: 'it' does not name a type\n     for (auto it\
    \ = freq.begin(); it != freq.end(); it++) {\n               ^\n/tmp/tmp5mg1c5ma.cpp:20:34:\
    \ error: expected ';' before 'it'\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n                                  ^\n/tmp/tmp5mg1c5ma.cpp:20:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmp5mg1c5ma.cpp: In function 'int\
    \ main()':\n/tmp/tmp5mg1c5ma.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5mg1c5ma.cpp:2:\n/tmp/tmp5mg1c5ma.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp5mg1c5ma.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmp5mg1c5ma.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5mg1c5ma.cpp:29:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5mg1c5ma.cpp:29:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5mg1c5ma.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long res\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       res = std::max(res, i.first);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_q1ziak.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpd_q1ziak.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmpd_q1ziak.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmpd_q1ziak.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmpd_q1ziak.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpd_q1ziak.cpp:19:5: error:\
    \ expected ';' before 'long'\n     long res = -1;\n     ^\n/tmp/tmpd_q1ziak.cpp:20:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : freq) {\n\
    \     ^\n/tmp/tmpd_q1ziak.cpp:20:5: error: expected ')' before 'for'\n/tmp/tmpd_q1ziak.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : freq) {\n              \
    \ ^\n/tmp/tmpd_q1ziak.cpp:25:5: error: expected ';' before 'return'\n     return\
    \ res;\n     ^\n/tmp/tmpd_q1ziak.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpd_q1ziak.cpp:25:5: error: expected ';' before 'return'\n\
    /tmp/tmpd_q1ziak.cpp:25:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpd_q1ziak.cpp:25:5: error: expected ')' before 'return'\n/tmp/tmpd_q1ziak.cpp:\
    \ In function 'int main()':\n/tmp/tmpd_q1ziak.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd_q1ziak.cpp:2:\n/tmp/tmpd_q1ziak.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpd_q1ziak.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(long i = 0; i < lst.size(); i++)\n        m[lst[i]]++;\n \
    \   long ans = -1;\n    for(auto it = m.begin(); it != m.end(); it++)\n      \
    \  if(it->first <= it->second)\n            ans = std::max(ans, it->first);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7uh1b0e.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpm7uh1b0e.cpp:19:14: error: 'it' does not name a type\n     for(auto it\
    \ = m.begin(); it != m.end(); it++)\n              ^\n/tmp/tmpm7uh1b0e.cpp:19:30:\
    \ error: expected ';' before 'it'\n     for(auto it = m.begin(); it != m.end();\
    \ it++)\n                              ^\n/tmp/tmpm7uh1b0e.cpp:19:30: error: 'it'\
    \ was not declared in this scope\n/tmp/tmpm7uh1b0e.cpp: In function 'int main()':\n\
    /tmp/tmpm7uh1b0e.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm7uh1b0e.cpp:2:\n/tmp/tmpm7uh1b0e.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpm7uh1b0e.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpm7uh1b0e.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm7uh1b0e.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm7uh1b0e.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpm7uh1b0e.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    // your code\
    \ here\n    std::map<long,long> m;\n    for(auto i:lst)\n    {\n        m[i]++;\n\
    \    }\n    long max=-1;\n    for(auto i:m)\n    {\n        if(i.first<=i.second\
    \ && i.first>max)\n        {\n            max=i.first;\n        }\n    }\n   \
    \ return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvozq5t2t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpvozq5t2t.cpp:17:14: error: 'i' does not name a type\n     for(auto i:lst)\n\
    \              ^\n/tmp/tmpvozq5t2t.cpp:21:5: error: expected ';' before 'long'\n\
    \     long max=-1;\n     ^\n/tmp/tmpvozq5t2t.cpp:22:5: error: expected primary-expression\
    \ before 'for'\n     for(auto i:m)\n     ^\n/tmp/tmpvozq5t2t.cpp:22:5: error:\
    \ expected ')' before 'for'\n/tmp/tmpvozq5t2t.cpp:22:14: error: 'i' does not name\
    \ a type\n     for(auto i:m)\n              ^\n/tmp/tmpvozq5t2t.cpp:29:5: error:\
    \ expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpvozq5t2t.cpp:29:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpvozq5t2t.cpp:29:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpvozq5t2t.cpp:29:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpvozq5t2t.cpp:29:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpvozq5t2t.cpp: In function 'int main()':\n/tmp/tmpvozq5t2t.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvozq5t2t.cpp:2:\n/tmp/tmpvozq5t2t.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpvozq5t2t.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpvozq5t2t.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvozq5t2t.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxaqf69el.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpxaqf69el.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmpxaqf69el.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmpxaqf69el.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmpxaqf69el.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpxaqf69el.cpp:19:5: error:\
    \ expected ';' before 'for'\n     for (auto i : lst) {\n     ^\n/tmp/tmpxaqf69el.cpp:19:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpxaqf69el.cpp:19:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpxaqf69el.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpxaqf69el.cpp:19:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpxaqf69el.cpp:19:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmpxaqf69el.cpp:24:5: error:\
    \ expected ';' before 'return'\n     return -1;\n     ^\n/tmp/tmpxaqf69el.cpp:24:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxaqf69el.cpp:24:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpxaqf69el.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxaqf69el.cpp:24:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpxaqf69el.cpp: In function 'int main()':\n/tmp/tmpxaqf69el.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxaqf69el.cpp:2:\n/tmp/tmpxaqf69el.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpxaqf69el.cpp:28:86:\
    \ warning: extended initializer lists only available with -"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second && i.first\
    \ > max) {\n            max = i.first;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9a49b9n.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpa9a49b9n.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpa9a49b9n.cpp:19:5: error: expected ';' before\
    \ 'long'\n     long max = -1;\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpa9a49b9n.cpp:20:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa9a49b9n.cpp:20:15: error: 'i' does\
    \ not name a type\n     for (auto i : freq) {\n               ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n     return max;\n     ^\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpa9a49b9n.cpp:25:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpa9a49b9n.cpp: In function 'int main()':\n/tmp/tmpa9a49b9n.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = search;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa9a49b9n.cpp:2:\n/tmp/tmpa9a49b9n.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpa9a49b9n.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpa9a49b9n.cpp:29:86: error: no matching function\
    \ for call to '"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i: lst)\n        m[i]++;\n    for(auto i: m)\n      \
    \  if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmkkau7wz.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpmkkau7wz.cpp:16:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst)\n              ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i: m)\n     ^\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpmkkau7wz.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpmkkau7wz.cpp:18:14: error: 'i' does not name a type\n     for(auto i:\
    \ m)\n              ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmkkau7wz.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpmkkau7wz.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpmkkau7wz.cpp:\
    \ In function 'int main()':\n/tmp/tmpmkkau7wz.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmkkau7wz.cpp:2:\n/tmp/tmpmkkau7wz.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpmkkau7wz.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [ena"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    long max = -1;\n    for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n        if (it->first <= it->second && it->first > max) {\n       \
    \     max = it->first;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqrp97h_.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpyqrp97h_.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmpyqrp97h_.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmpyqrp97h_.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmpyqrp97h_.cpp:17:9: error: 'freq' was not declared\
    \ in this scope\n         freq[lst[i]]++;\n         ^\n/tmp/tmpyqrp97h_.cpp:20:15:\
    \ error: 'it' does not name a type\n     for (auto it = freq.begin(); it != freq.end();\
    \ it++) {\n               ^\n/tmp/tmpyqrp97h_.cpp:20:34: error: expected ';' before\
    \ 'it'\n     for (auto it = freq.begin(); it != freq.end(); it++) {\n        \
    \                          ^\n/tmp/tmpyqrp97h_.cpp:20:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpyqrp97h_.cpp:20:40: error: 'freq' was not declared\
    \ in this scope\n     for (auto it = freq.begin(); it != freq.end(); it++) {\n\
    \                                        ^\n/tmp/tmpyqrp97h_.cpp: In function\
    \ 'int main()':\n/tmp/tmpyqrp97h_.cpp:28:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = search;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyqrp97h_.cpp:2:\n/tmp/tmpyqrp97h_.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpyqrp97h_.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpyqrp97h_.cpp:29:86:\
    \ warning: extended initializ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    long max_freq\
    \ = -1;\n    for (auto i : freq) {\n        if (i.first <= i.second) {\n     \
    \       max_freq = std::max(max_freq, i.first);\n        }\n    }\n    return\
    \ max_freq;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45_1_uux.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmp45_1_uux.cpp:15:5: error: 'unordered_map' is not a member of 'std'\n \
    \    std::unordered_map<long, long> freq;\n     ^\n/tmp/tmp45_1_uux.cpp:15:24:\
    \ error: expected primary-expression before 'long'\n     std::unordered_map<long,\
    \ long> freq;\n                        ^\n/tmp/tmp45_1_uux.cpp:15:24: error: expected\
    \ ';' before 'long'\n/tmp/tmp45_1_uux.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : lst) {\n               ^\n/tmp/tmp45_1_uux.cpp:19:5: error:\
    \ expected ';' before 'long'\n     long max_freq = -1;\n     ^\n/tmp/tmp45_1_uux.cpp:20:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : freq) {\n\
    \     ^\n/tmp/tmp45_1_uux.cpp:20:5: error: expected ')' before 'for'\n/tmp/tmp45_1_uux.cpp:20:15:\
    \ error: 'i' does not name a type\n     for (auto i : freq) {\n              \
    \ ^\n/tmp/tmp45_1_uux.cpp:25:5: error: expected ';' before 'return'\n     return\
    \ max_freq;\n     ^\n/tmp/tmp45_1_uux.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp45_1_uux.cpp:25:5: error: expected ';' before 'return'\n\
    /tmp/tmp45_1_uux.cpp:25:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp45_1_uux.cpp:25:5: error: expected ')' before 'return'\n/tmp/tmp45_1_uux.cpp:\
    \ In function 'int main()':\n/tmp/tmp45_1_uux.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp45_1_uux.cpp:2:\n/tmp/tmp45_1_uux.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmp45_1_uux.cpp:29:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto\
    \ i : freq) {\n        if (i.first <= i.second) {\n            return i.first;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbddbj86t.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbddbj86t.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for (auto i : freq) {\n     ^\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbddbj86t.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpbddbj86t.cpp:19:15: error: 'i' does not name a type\n     for (auto i\
    \ : freq) {\n               ^\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ';'\
    \ before 'return'\n     return -1;\n     ^\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbddbj86t.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpbddbj86t.cpp: In function 'int main()':\n/tmp/tmpbddbj86t.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpbddbj86t.cpp:2:\n/tmp/tmpbddbj86t.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbddbj86t.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst) {\n        m[i]++;\n    }\n    for(auto i :\
    \ m) {\n        if(i.first <= i.second) {\n            return i.first;\n     \
    \   }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1,\
    \ (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsct88hhe.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpsct88hhe.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst) {\n              ^\n/tmp/tmpsct88hhe.cpp:19:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m) {\n     ^\n/tmp/tmpsct88hhe.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpsct88hhe.cpp:19:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpsct88hhe.cpp:19:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpsct88hhe.cpp:19:5: error: expected ')' before 'for'\n\
    /tmp/tmpsct88hhe.cpp:19:14: error: 'i' does not name a type\n     for(auto i :\
    \ m) {\n              ^\n/tmp/tmpsct88hhe.cpp:24:5: error: expected ';' before\
    \ 'return'\n     return -1;\n     ^\n/tmp/tmpsct88hhe.cpp:24:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsct88hhe.cpp:24:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpsct88hhe.cpp:24:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpsct88hhe.cpp:24:5: error: expected ')' before 'return'\n\
    /tmp/tmpsct88hhe.cpp: In function 'int main()':\n/tmp/tmpsct88hhe.cpp:27:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = search;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpsct88hhe.cpp:2:\n/tmp/tmpsct88hhe.cpp:28:40: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpsct88hhe.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpsct88hhe.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ vector of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
    \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n\
    // (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4,\
    \ (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ long> m;\n    for(auto i : lst)\n        m[i]++;\n    for(auto i : m)\n    \
    \    if(i.first <= i.second)\n            return i.first;\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
    \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
    \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
    \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
    \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
    \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
    \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
    \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
    \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
    \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
    \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
    \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
    \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
    \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10,\
    \ (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4,\
    \ (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7,\
    \ (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1,\
    \ (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
    \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
    \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
    \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
    \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3,\
    \ (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10,\
    \ (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2,\
    \ (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10,\
    \ (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8})))\
    \ == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9,\
    \ (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1,\
    \ (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7,\
    \ (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10,\
    \ (long)10, (long)9, (long)2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc_fx7ui.cpp: In function 'long int search(std::vector<long int>)':\n\
    /tmp/tmpbc_fx7ui.cpp:16:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst)\n              ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ';' before\
    \ 'for'\n     for(auto i : m)\n     ^\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected\
    \ ';' before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpbc_fx7ui.cpp:18:5: error: expected ')' before 'for'\n\
    /tmp/tmpbc_fx7ui.cpp:18:14: error: 'i' does not name a type\n     for(auto i :\
    \ m)\n              ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    \     return -1;\n     ^\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpbc_fx7ui.cpp:21:5: error: expected ';' before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpbc_fx7ui.cpp:21:5: error: expected ')' before 'return'\n/tmp/tmpbc_fx7ui.cpp:\
    \ In function 'int main()':\n/tmp/tmpbc_fx7ui.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = search;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbc_fx7ui.cpp:2:\n/tmp/tmpbc_fx7ui.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5, (long)1}))) == (1));\n                                        ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5, (long)1}))) == (1));\n                                   \
    \                                                   ^\n/tmp/tmpbc_fx7ui.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ ["
  stdout: ''
