language: cpp
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> map;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        map[word]++;\n\
    \    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcd4s9cn3.cpp: In function 'int main()':\n/tmp/tmpcd4s9cn3.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcd4s9cn3.cpp:2:\n/tmp/tmpcd4s9cn3.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcd4s9cn3.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcd4s9cn3.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcd4s9cn3.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcd4s9cn3.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcd4s9cn3.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcd4s9cn3.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcd4s9cn3.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcd4s9cn3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::istringstream\
    \ iss(test);\n  std::string word;\n  while (iss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyeyara1.cpp: In function 'int main()':\n/tmp/tmpcyeyara1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/tmp/tmpcyeyara1.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcyeyara1.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcyeyara1.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::istringstream\
    \ iss(test);\n    std::string word;\n    while(iss >> word) {\n        if(res.find(word)\
    \ == res.end()) {\n            res[word] = 1;\n        } else {\n            res[word]++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqobnnkp.cpp: In function 'int main()':\n/tmp/tmpvqobnnkp.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvqobnnkp.cpp:2:\n/tmp/tmpvqobnnkp.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpvqobnnkp.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpvqobnnkp.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpvqobnnkp.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvqobnnkp.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvqobnnkp.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvqobnnkp.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpvqobnnkp.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpvqobnnkp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpei_5jh9p.cpp: In function 'int main()':\n/tmp/tmpei_5jh9p.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpei_5jh9p.cpp:2:\n/tmp/tmpei_5jh9p.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpei_5jh9p.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpei_5jh9p.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpei_5jh9p.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpei_5jh9p.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpei_5jh9p.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpei_5jh9p.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpei_5jh9p.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpei_5jh9p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')){\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9l7xoha.cpp: In function 'int main()':\n/tmp/tmpy9l7xoha.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy9l7xoha.cpp:2:\n/tmp/tmpy9l7xoha.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpy9l7xoha.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpy9l7xoha.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpy9l7xoha.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpy9l7xoha.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy9l7xoha.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpy9l7xoha.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpy9l7xoha.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpy9l7xoha.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8hihjolf.cpp: In function 'int main()':\n/tmp/tmp8hihjolf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8hihjolf.cpp:2:\n/tmp/tmp8hihjolf.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp8hihjolf.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8hihjolf.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8hihjolf.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp8hihjolf.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp8hihjolf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::istringstream\
    \ iss(test);\n  std::string word;\n  while (iss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyeyara1.cpp: In function 'int main()':\n/tmp/tmpcyeyara1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/tmp/tmpcyeyara1.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcyeyara1.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcyeyara1.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpic6vvv25.cpp: In function 'int main()':\n/tmp/tmpic6vvv25.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/tmp/tmpic6vvv25.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpic6vvv25.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpic6vvv25.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    hist[word]++;\n \
    \ }\n  return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8hihjolf.cpp: In function 'int main()':\n/tmp/tmp8hihjolf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8hihjolf.cpp:2:\n/tmp/tmp8hihjolf.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp8hihjolf.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8hihjolf.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8hihjolf.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8hihjolf.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp8hihjolf.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp8hihjolf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdr4bumc.cpp: In function 'int main()':\n/tmp/tmpfdr4bumc.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfdr4bumc.cpp:2:\n/tmp/tmpfdr4bumc.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpfdr4bumc.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfdr4bumc.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfdr4bumc.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpfdr4bumc.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpfdr4bumc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) == result.end()) {\n            result[token] =\
    \ 1;\n        } else {\n            result[token]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw5054nz.cpp: In function 'int main()':\n/tmp/tmpsw5054nz.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/tmp/tmpsw5054nz.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpsw5054nz.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsw5054nz.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8aldf33.cpp: In function 'int main()':\n/tmp/tmpb8aldf33.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/tmp/tmpb8aldf33.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpb8aldf33.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb8aldf33.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string token;\n  while(getline(ss,\
    \ token, ' ')) {\n    it = result.find(token);\n    if(it != result.end()) {\n\
    \      it->second++;\n    } else {\n      result.insert(std::pair<std::string,long>(token,\
    \ 1));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiertm4s7.cpp: In function 'int main()':\n/tmp/tmpiertm4s7.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiertm4s7.cpp:2:\n/tmp/tmpiertm4s7.cpp:34:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpiertm4s7.cpp:34:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpiertm4s7.cpp:34:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpiertm4s7.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpiertm4s7.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiertm4s7.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiertm4s7.cpp:34:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpiertm4s7.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpiertm4s7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        res[word]++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2is49zv.cpp: In function 'int main()':\n/tmp/tmpt2is49zv.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/tmp/tmpt2is49zv.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpt2is49zv.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt2is49zv.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::istringstream\
    \ iss(test);\n    std::string word;\n    while(iss >> word) {\n        res[word]++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcn2l991u.cpp: In function 'int main()':\n/tmp/tmpcn2l991u.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcn2l991u.cpp:2:\n/tmp/tmpcn2l991u.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcn2l991u.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcn2l991u.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcn2l991u.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcn2l991u.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcn2l991u.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcn2l991u.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcn2l991u.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcn2l991u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpic6vvv25.cpp: In function 'int main()':\n/tmp/tmpic6vvv25.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/tmp/tmpic6vvv25.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpic6vvv25.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpic6vvv25.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8aldf33.cpp: In function 'int main()':\n/tmp/tmpb8aldf33.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/tmp/tmpb8aldf33.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpb8aldf33.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb8aldf33.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8aldf33.cpp: In function 'int main()':\n/tmp/tmpb8aldf33.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/tmp/tmpb8aldf33.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpb8aldf33.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb8aldf33.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::map<std::string,long>::iterator\
    \ it;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        it = result.find(token);\n        if(it != result.end())\
    \ {\n            it->second++;\n        } else {\n            result.insert(std::pair<std::string,long>(token,\
    \ 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8rlnvlz9.cpp: In function 'int main()':\n/tmp/tmp8rlnvlz9.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8rlnvlz9.cpp:2:\n/tmp/tmp8rlnvlz9.cpp:34:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp8rlnvlz9.cpp:34:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp8rlnvlz9.cpp:34:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp8rlnvlz9.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8rlnvlz9.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8rlnvlz9.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8rlnvlz9.cpp:34:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp8rlnvlz9.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp8rlnvlz9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> map;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word)\n        map[word]++;\n\
    \    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmqp12fe3.cpp: In function 'int main()':\n/tmp/tmpmqp12fe3.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmqp12fe3.cpp:2:\n/tmp/tmpmqp12fe3.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpmqp12fe3.cpp:27:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpmqp12fe3.cpp:27:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpmqp12fe3.cpp:27:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmqp12fe3.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmqp12fe3.cpp:27:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmqp12fe3.cpp:27:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpmqp12fe3.cpp:27:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpmqp12fe3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    it = result.find(word);\n    if(it != result.end()) {\n      it->second++;\n\
    \    } else {\n      result.insert(std::pair<std::string,long>(word,1));\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpysj0m9_v.cpp: In function 'int main()':\n/tmp/tmpysj0m9_v.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpysj0m9_v.cpp:2:\n/tmp/tmpysj0m9_v.cpp:34:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpysj0m9_v.cpp:34:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpysj0m9_v.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpysj0m9_v.cpp:34:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpysj0m9_v.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpysj0m9_v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        if(result.find(word)\
    \ == result.end()) {\n            result[word] = 1;\n        } else {\n      \
    \      result[word]++;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt3ii2_b.cpp: In function 'int main()':\n/tmp/tmpnt3ii2_b.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnt3ii2_b.cpp:2:\n/tmp/tmpnt3ii2_b.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpnt3ii2_b.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpnt3ii2_b.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpnt3ii2_b.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpnt3ii2_b.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnt3ii2_b.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnt3ii2_b.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpnt3ii2_b.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpnt3ii2_b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp64z4dinu.cpp: In function 'int main()':\n/tmp/tmp64z4dinu.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/tmp/tmp64z4dinu.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp64z4dinu.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp64z4dinu.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        res[word]++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2is49zv.cpp: In function 'int main()':\n/tmp/tmpt2is49zv.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/tmp/tmpt2is49zv.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpt2is49zv.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt2is49zv.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp64z4dinu.cpp: In function 'int main()':\n/tmp/tmp64z4dinu.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/tmp/tmp64z4dinu.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp64z4dinu.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp64z4dinu.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   if(result.find(token) == result.end()) {\n      result[token] = 1;\n    }\
    \ else {\n      result[token]++;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xt9sujt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::istringstream\
    \ iss(test);\n    std::string word;\n    while (iss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8avy4y23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::istringstream\
    \ iss(test);\n  std::string word;\n  while (iss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyeyara1.cpp: In function 'int main()':\n/tmp/tmpcyeyara1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/tmp/tmpcyeyara1.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcyeyara1.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcyeyara1.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  result[item]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuma45_pd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string s;\n    while(ss >> s) {\n        m[s]++;\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x5r87gh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string s;\n    while(ss >> s) {\n        m[s]++;\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1x5r87gh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> res;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    res[word]++;\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfyzd75hm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  result[item]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuma45_pd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  if (result.find(item) == result.end()) {\n      result[item] = 1;\n    } else\
    \ {\n      result[item]++;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp64z4dinu.cpp: In function 'int main()':\n/tmp/tmp64z4dinu.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/tmp/tmp64z4dinu.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp64z4dinu.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp64z4dinu.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp64z4dinu.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp64z4dinu.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp64z4dinu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n \
    \   assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdr4bumc.cpp: In function 'int main()':\n/tmp/tmpfdr4bumc.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfdr4bumc.cpp:2:\n/tmp/tmpfdr4bumc.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpfdr4bumc.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpfdr4bumc.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfdr4bumc.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfdr4bumc.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpfdr4bumc.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpfdr4bumc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::istringstream\
    \ iss(test);\n    std::string word;\n    while (iss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8avy4y23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0aot7649.cpp: In function 'int main()':\n/tmp/tmp0aot7649.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/tmp/tmp0aot7649.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp0aot7649.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0aot7649.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0aot7649.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp0aot7649.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp0aot7649.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8aldf33.cpp: In function 'int main()':\n/tmp/tmpb8aldf33.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/tmp/tmpb8aldf33.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpb8aldf33.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb8aldf33.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        res[word]++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n  \
    \  assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2is49zv.cpp: In function 'int main()':\n/tmp/tmpt2is49zv.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/tmp/tmpt2is49zv.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpt2is49zv.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt2is49zv.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt2is49zv.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpt2is49zv.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpt2is49zv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) == result.end()) {\n            result[token] =\
    \ 1;\n        } else {\n            result[token]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw5054nz.cpp: In function 'int main()':\n/tmp/tmpsw5054nz.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/tmp/tmpsw5054nz.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpsw5054nz.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsw5054nz.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> m;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    m[word]++;\n  }\n\
    \  return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi8qdsbev.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) == result.end()) {\n            result[token] =\
    \ 1;\n        } else {\n            result[token] += 1;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpne61gl03.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpic6vvv25.cpp: In function 'int main()':\n/tmp/tmpic6vvv25.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/tmp/tmpic6vvv25.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpic6vvv25.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpic6vvv25.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphnz2_tpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8aldf33.cpp: In function 'int main()':\n/tmp/tmpb8aldf33.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/tmp/tmpb8aldf33.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpb8aldf33.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb8aldf33.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb8aldf33.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpb8aldf33.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpb8aldf33.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string s;\n  while(ss >> s) {\n    result[s]++;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46gka337.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpic6vvv25.cpp: In function 'int main()':\n/tmp/tmpic6vvv25.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/tmp/tmpic6vvv25.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpic6vvv25.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpic6vvv25.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        res[token]++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2_5nsxqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> m;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        m[word]++;\n\
    \    }\n    return m;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpic6vvv25.cpp: In function 'int main()':\n/tmp/tmpic6vvv25.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/tmp/tmpic6vvv25.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpic6vvv25.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpic6vvv25.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpic6vvv25.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpic6vvv25.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpic6vvv25.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        if(result.find(token) == result.end()) {\n            result[token] =\
    \ 1;\n        } else {\n            result[token]++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
    a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n  \
    \  assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1},\
    \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw5054nz.cpp: In function 'int main()':\n/tmp/tmpsw5054nz.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/tmp/tmpsw5054nz.cpp:32:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpsw5054nz.cpp:32:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsw5054nz.cpp:32:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsw5054nz.cpp:32:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpsw5054nz.cpp:32:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpsw5054nz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::istringstream\
    \ iss(test);\n    std::string word;\n    while (iss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8avy4y23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748859
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::map<std::string,long>::iterator\
    \ it;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\
    \ {\n    it = result.find(word);\n    if(it != result.end()) {\n      it->second++;\n\
    \    } else {\n      result.insert(std::pair<std::string,long>(word,1));\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpysj0m9_v.cpp: In function 'int main()':\n/tmp/tmpysj0m9_v.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpysj0m9_v.cpp:2:\n/tmp/tmpysj0m9_v.cpp:34:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpysj0m9_v.cpp:34:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpysj0m9_v.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpysj0m9_v.cpp:34:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpysj0m9_v.cpp:34:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpysj0m9_v.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpysj0m9_v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e09q_91.cpp: In function 'int main()':\n/tmp/tmp5e09q_91.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/tmp/tmp5e09q_91.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmp5e09q_91.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5e09q_91.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5e09q_91.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmp5e09q_91.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmp5e09q_91.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::istringstream\
    \ iss(test);\n  std::string word;\n  while (iss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyeyara1.cpp: In function 'int main()':\n/tmp/tmpcyeyara1.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/tmp/tmpcyeyara1.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpcyeyara1.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcyeyara1.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcyeyara1.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpcyeyara1.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpcyeyara1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while(ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc86vokc8.cpp: In function 'int main()':\n/tmp/tmpc86vokc8.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/tmp/tmpc86vokc8.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpc86vokc8.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc86vokc8.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc86vokc8.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpc86vokc8.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpc86vokc8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n\
    \    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm85wzwt2.cpp: In function 'int main()':\n/tmp/tmpm85wzwt2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/tmp/tmpm85wzwt2.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpm85wzwt2.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm85wzwt2.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpm85wzwt2.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpm85wzwt2.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpm85wzwt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
    \ a space separated lowercase letters, return a map\n// of the letter with the\
    \ most repetition and containing the corresponding count.\n// If several letters\
    \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
    a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
    // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
    b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
    b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
    \ histogram(std::string test) {\n  std::map<std::string,long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while(ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = histogram;\n   \
    \ assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2},\
    \ {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"\
    a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"\
    a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
    r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
    \    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\"\
    , 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
    r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
    \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8objc6v.cpp: In function 'int main()':\n/tmp/tmpw8objc6v.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = histogram;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/tmp/tmpw8objc6v.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"a b b a\"\
    )) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n             \
    \                    ^\n/tmp/tmpw8objc6v.cpp:28:65: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\",\
    \ 2}, {\"b\", 2}})));\n                                                      \
    \           ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    \
    \                                                                            \
    \      ^\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw8objc6v.cpp:28:86: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw8objc6v.cpp:28:86: error: no matching function for call to 'std::map<std::basic_string<char>,\
    \ long int>::map(<brace-enclosed initializer list>)'\n/tmp/tmpw8objc6v.cpp:28:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/map:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:80,\n\
    \                 from /tmp/tmpw8objc6v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_map.h:241:9:\
    \ note: template<class _InputIterator> std::map<_Key, _Tp, _Compare"
  stdout: ''
