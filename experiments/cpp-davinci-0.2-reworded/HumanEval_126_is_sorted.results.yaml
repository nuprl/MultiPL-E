language: cpp
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    long n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] > lst[i + 1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp074nn9q2.cpp: In function 'int main()':\n/tmp/tmp074nn9q2.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp074nn9q2.cpp:2:\n/tmp/tmp074nn9q2.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp074nn9q2.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp074nn9q2.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp074nn9q2.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp074nn9q2.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp074nn9q2.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp074nn9q2.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp074nn9q2.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp074nn9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0zwa0fg.cpp: In function 'int main()':\n/tmp/tmpy0zwa0fg.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy0zwa0fg.cpp:2:\n/tmp/tmpy0zwa0fg.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpy0zwa0fg.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpy0zwa0fg.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpy0zwa0fg.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpy0zwa0fg.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpy0zwa0fg.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy0zwa0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >=\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dsrzl5j.cpp: In function 'int main()':\n/tmp/tmp7dsrzl5j.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dsrzl5j.cpp:2:\n/tmp/tmp7dsrzl5j.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp7dsrzl5j.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp7dsrzl5j.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp7dsrzl5j.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp7dsrzl5j.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp7dsrzl5j.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7dsrzl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q3gij68.cpp: In function 'int main()':\n/tmp/tmp1q3gij68.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1q3gij68.cpp:2:\n/tmp/tmp1q3gij68.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1q3gij68.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1q3gij68.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1q3gij68.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1q3gij68.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1q3gij68.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1q3gij"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7zmqyrt.cpp: In function 'int main()':\n/tmp/tmpl7zmqyrt.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl7zmqyrt.cpp:2:\n/tmp/tmpl7zmqyrt.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl7zmqyrt.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl7zmqyrt.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl7zmqyrt.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl7zmqyrt.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl7zmqyrt.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl7zmqyrt.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl7zmqyrt.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl7zmqy"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8p_txqt1.cpp: In function 'int main()':\n/tmp/tmp8p_txqt1.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8p_txqt1.cpp:2:\n/tmp/tmp8p_txqt1.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp8p_txqt1.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp8p_txqt1.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp8p_txqt1.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp8p_txqt1.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp8p_txqt1.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8p_txq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n - 1; i++) {\n        if(lst[i] >= lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxure0ba.cpp: In function 'int main()':\n/tmp/tmpsxure0ba.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxure0ba.cpp:2:\n/tmp/tmpsxure0ba.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsxure0ba.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsxure0ba.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsxure0ba.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsxure0ba.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsxure0ba.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsxure0ba.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsxure0ba.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsxure0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kczsq49.cpp: In function 'int main()':\n/tmp/tmp6kczsq49.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kczsq49.cpp:2:\n/tmp/tmp6kczsq49.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6kczsq49.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6kczsq49.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6kczsq49.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6kczsq49.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6kczsq49.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kczsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    int prev\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ prev) {\n            return false;\n        }\n        prev = lst[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz6_pcajf.cpp: In function 'int main()':\n/tmp/tmpz6_pcajf.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz6_pcajf.cpp:2:\n/tmp/tmpz6_pcajf.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpz6_pcajf.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpz6_pcajf.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz6_pcajf.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpz6_pcajf.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpz6_pcajf.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpz6_pcajf.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz6_pcajf.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpz6_pca"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n - 1; i++){\n        if(lst[i] >= lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwjee9ta.cpp: In function 'int main()':\n/tmp/tmprwjee9ta.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprwjee9ta.cpp:2:\n/tmp/tmprwjee9ta.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprwjee9ta.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprwjee9ta.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprwjee9ta.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprwjee9ta.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprwjee9ta.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprwjee9ta.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprwjee9ta.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprwjee9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8p_txqt1.cpp: In function 'int main()':\n/tmp/tmp8p_txqt1.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8p_txqt1.cpp:2:\n/tmp/tmp8p_txqt1.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp8p_txqt1.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp8p_txqt1.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp8p_txqt1.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp8p_txqt1.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp8p_txqt1.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8p_txq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmbgmi4x.cpp: In function 'int main()':\n/tmp/tmphmbgmi4x.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphmbgmi4x.cpp:2:\n/tmp/tmphmbgmi4x.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmphmbgmi4x.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmphmbgmi4x.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphmbgmi4x.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmphmbgmi4x.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmphmbgmi4x.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmphmbgmi4x.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphmbgmi4x.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphmbgmi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q3gij68.cpp: In function 'int main()':\n/tmp/tmp1q3gij68.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1q3gij68.cpp:2:\n/tmp/tmp1q3gij68.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1q3gij68.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1q3gij68.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1q3gij68.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1q3gij68.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1q3gij68.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1q3gij"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqzhbnis.cpp: In function 'int main()':\n/tmp/tmpcqzhbnis.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcqzhbnis.cpp:2:\n/tmp/tmpcqzhbnis.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpcqzhbnis.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpcqzhbnis.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcqzhbnis.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpcqzhbnis.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpcqzhbnis.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpcqzhbnis.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcqzhbnis.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpcqzhbn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_03_b3ly.cpp: In function 'int main()':\n/tmp/tmp_03_b3ly.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_03_b3ly.cpp:2:\n/tmp/tmp_03_b3ly.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp_03_b3ly.cpp:32:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp_03_b3ly.cpp:32:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:32:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp_03_b3ly.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp_03_b3ly.cpp:33:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp_03_b3ly.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_03_b3"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // your code here\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwdz7oik.cpp: In function 'int main()':\n/tmp/tmpzwdz7oik.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzwdz7oik.cpp:2:\n/tmp/tmpzwdz7oik.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpzwdz7oik.cpp:29:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpzwdz7oik.cpp:29:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzwdz7oik.cpp:29:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpzwdz7oik.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpzwdz7oik.cpp:30:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpzwdz7oik.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzwdz7oik.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzwdz7o"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1) return true;\n    for(int\
    \ i=0;i<lst.size()-1;i++){\n        if(lst[i]>=lst[i+1]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwynmvbmx.cpp: In function 'int main()':\n/tmp/tmpwynmvbmx.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwynmvbmx.cpp:2:\n/tmp/tmpwynmvbmx.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpwynmvbmx.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpwynmvbmx.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwynmvbmx.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpwynmvbmx.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpwynmvbmx.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpwynmvbmx.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwynmvbmx.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwynmvb"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg22gpvm8.cpp: In function 'int main()':\n/tmp/tmpg22gpvm8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg22gpvm8.cpp:2:\n/tmp/tmpg22gpvm8.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpg22gpvm8.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpg22gpvm8.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpg22gpvm8.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpg22gpvm8.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpg22gpvm8.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpg22gpv"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n==1)\n    {\n\
    \        return true;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n        if(lst[i]>=lst[i+1])\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rnriwm0.cpp: In function 'int main()':\n/tmp/tmp1rnriwm0.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1rnriwm0.cpp:2:\n/tmp/tmp1rnriwm0.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1rnriwm0.cpp:41:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1rnriwm0.cpp:41:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1rnriwm0.cpp:41:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1rnriwm0.cpp:42:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1rnriwm0.cpp:42:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1rnriwm0.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1rnriwm0.cpp:42:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1rnriw"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // YOUR CODE HERE\n    int n = lst.size();\n    int i = 0;\n   \
    \ while(i < n-1){\n        if(lst[i] > lst[i+1]){\n            return false;\n\
    \        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubveh1kk.cpp: In function 'int main()':\n/tmp/tmpubveh1kk.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpubveh1kk.cpp:2:\n/tmp/tmpubveh1kk.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpubveh1kk.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpubveh1kk.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpubveh1kk.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpubveh1kk.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpubveh1kk.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpubveh1kk.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpubveh1kk.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpubveh1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0zwa0fg.cpp: In function 'int main()':\n/tmp/tmpy0zwa0fg.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy0zwa0fg.cpp:2:\n/tmp/tmpy0zwa0fg.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpy0zwa0fg.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpy0zwa0fg.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpy0zwa0fg.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpy0zwa0fg.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpy0zwa0fg.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy0zwa0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // Your code here\n  int n = lst.size();\n  for(int i = 0; i < n -\
    \ 1; i++) {\n    if(lst[i] >= lst[i + 1]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_wegybo.cpp: In function 'int main()':\n/tmp/tmpk_wegybo.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_wegybo.cpp:2:\n/tmp/tmpk_wegybo.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpk_wegybo.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpk_wegybo.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk_wegybo.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpk_wegybo.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpk_wegybo.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpk_wegybo.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk_wegybo.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk_wegy"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] > lst[i\
    \ + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktqy2nw2.cpp: In function 'int main()':\n/tmp/tmpktqy2nw2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpktqy2nw2.cpp:2:\n/tmp/tmpktqy2nw2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpktqy2nw2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpktqy2nw2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpktqy2nw2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpktqy2nw2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpktqy2nw2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpktqy2nw2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpktqy2nw2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpktqy2n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int len = lst.size();\n    for(int i = 0;\
    \ i < len - 1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq0rkfjvs.cpp: In function 'int main()':\n/tmp/tmpq0rkfjvs.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq0rkfjvs.cpp:2:\n/tmp/tmpq0rkfjvs.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpq0rkfjvs.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpq0rkfjvs.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq0rkfjvs.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpq0rkfjvs.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpq0rkfjvs.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpq0rkfjvs.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq0rkfjvs.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq0rkfj"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it = lst.begin();\n    long prev = *it;\n\
    \    it++;\n    for (; it != lst.end(); it++) {\n        if (prev >= *it) {\n\
    \            return false;\n        }\n        prev = *it;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz0kv5w_.cpp: In function 'int main()':\n/tmp/tmprz0kv5w_.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprz0kv5w_.cpp:2:\n/tmp/tmprz0kv5w_.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmprz0kv5w_.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmprz0kv5w_.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprz0kv5w_.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmprz0kv5w_.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmprz0kv5w_.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmprz0kv5w_.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprz0kv5w_.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprz0kv5"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_awhhw2.cpp: In function 'int main()':\n/tmp/tmpu_awhhw2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu_awhhw2.cpp:2:\n/tmp/tmpu_awhhw2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu_awhhw2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu_awhhw2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu_awhhw2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu_awhhw2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu_awhhw2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu_awhhw2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu_awhhw2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu_awhh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjmcw0se.cpp: In function 'int main()':\n/tmp/tmpcjmcw0se.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcjmcw0se.cpp:2:\n/tmp/tmpcjmcw0se.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpcjmcw0se.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpcjmcw0se.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcjmcw0se.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpcjmcw0se.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpcjmcw0se.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpcjmcw0se.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcjmcw0se.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpcjmcw0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e1_6v4u.cpp: In function 'int main()':\n/tmp/tmp1e1_6v4u.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1e1_6v4u.cpp:2:\n/tmp/tmp1e1_6v4u.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1e1_6v4u.cpp:32:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1e1_6v4u.cpp:32:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1e1_6v4u.cpp:32:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1e1_6v4u.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1e1_6v4u.cpp:33:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1e1_6v4u.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1e1_6v4u.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1e1_6v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q3gij68.cpp: In function 'int main()':\n/tmp/tmp1q3gij68.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1q3gij68.cpp:2:\n/tmp/tmp1q3gij68.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1q3gij68.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1q3gij68.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1q3gij68.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1q3gij68.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1q3gij68.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1q3gij"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmookp5l.cpp: In function 'int main()':\n/tmp/tmpvmookp5l.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmookp5l.cpp:2:\n/tmp/tmpvmookp5l.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpvmookp5l.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpvmookp5l.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpvmookp5l.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpvmookp5l.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpvmookp5l.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvmookp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0zwa0fg.cpp: In function 'int main()':\n/tmp/tmpy0zwa0fg.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy0zwa0fg.cpp:2:\n/tmp/tmpy0zwa0fg.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpy0zwa0fg.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpy0zwa0fg.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpy0zwa0fg.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpy0zwa0fg.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpy0zwa0fg.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0zwa0fg.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy0zwa0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8p_txqt1.cpp: In function 'int main()':\n/tmp/tmp8p_txqt1.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8p_txqt1.cpp:2:\n/tmp/tmp8p_txqt1.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp8p_txqt1.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp8p_txqt1.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp8p_txqt1.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp8p_txqt1.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp8p_txqt1.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8p_txq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    // You can change the return type of this\
    \ function\n    // if you want to.\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpppe1l1jz.cpp: In function 'int main()':\n/tmp/tmpppe1l1jz.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpppe1l1jz.cpp:2:\n/tmp/tmpppe1l1jz.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpppe1l1jz.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpppe1l1jz.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpppe1l1jz.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpppe1l1jz.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpppe1l1jz.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpppe1l1jz.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpppe1l1jz.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpppe1l1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgacnsq7h.cpp: In function 'int main()':\n/tmp/tmpgacnsq7h.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgacnsq7h.cpp:2:\n/tmp/tmpgacnsq7h.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpgacnsq7h.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpgacnsq7h.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpgacnsq7h.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpgacnsq7h.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpgacnsq7h.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgacnsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end())) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplfd2_pe7.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmplfd2_pe7.cpp:28:9: error: 'is_sorted' is not a member of 'std'\n     if\
    \ (std::is_sorted(lst.begin(), lst.end())) {\n         ^\n/tmp/tmplfd2_pe7.cpp:28:9:\
    \ note: suggested alternative:\n/tmp/tmplfd2_pe7.cpp:23:6: note:   'is_sorted'\n\
    \ bool is_sorted(std::vector<long> lst) {\n      ^\n/tmp/tmplfd2_pe7.cpp: In function\
    \ 'int main()':\n/tmp/tmplfd2_pe7.cpp:34:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = is_sorted;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplfd2_pe7.cpp:2:\n/tmp/tmplfd2_pe7.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmplfd2_pe7.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmplfd2_pe7.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplfd2_pe7.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmplfd2_pe7.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmplfd2_pe7.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n         "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n - 1; i++){\n        if(lst[i] >= lst[i + 1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4llia148.cpp: In function 'int main()':\n/tmp/tmp4llia148.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4llia148.cpp:2:\n/tmp/tmp4llia148.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp4llia148.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp4llia148.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4llia148.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp4llia148.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp4llia148.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp4llia148.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4llia148.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4llia1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    for(it\
    \ = lst.begin(); it != lst.end(); it++){\n        if(it != lst.end()-1){\n   \
    \         if(*it > *(it+1)){\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6q9elxxc.cpp: In function 'int main()':\n/tmp/tmp6q9elxxc.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6q9elxxc.cpp:2:\n/tmp/tmp6q9elxxc.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6q9elxxc.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6q9elxxc.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6q9elxxc.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6q9elxxc.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6q9elxxc.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6q9elxxc.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6q9elxxc.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6q9elx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg22gpvm8.cpp: In function 'int main()':\n/tmp/tmpg22gpvm8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg22gpvm8.cpp:2:\n/tmp/tmpg22gpvm8.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpg22gpvm8.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpg22gpvm8.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpg22gpvm8.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpg22gpvm8.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpg22gpvm8.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpg22gpv"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5588lk7t.cpp: In function 'int main()':\n/tmp/tmp5588lk7t.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5588lk7t.cpp:2:\n/tmp/tmp5588lk7t.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp5588lk7t.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp5588lk7t.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5588lk7t.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp5588lk7t.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp5588lk7t.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp5588lk7t.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5588lk7t.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5588lk"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmookp5l.cpp: In function 'int main()':\n/tmp/tmpvmookp5l.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmookp5l.cpp:2:\n/tmp/tmpvmookp5l.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpvmookp5l.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpvmookp5l.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpvmookp5l.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpvmookp5l.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpvmookp5l.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvmookp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n==1)\n     \
    \   return true;\n    for(int i=0;i<n-1;i++){\n        if(lst[i]>lst[i+1])\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q3gij68.cpp: In function 'int main()':\n/tmp/tmp1q3gij68.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1q3gij68.cpp:2:\n/tmp/tmp1q3gij68.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1q3gij68.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1q3gij68.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1q3gij68.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1q3gij68.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1q3gij68.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1q3gij68.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1q3gij"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (long i : lst) {\n        s.insert(i);\n\
    \    }\n    if (s.size() != lst.size()) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi2qr0iq.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsi2qr0iq.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsi2qr0iq.cpp:\
    \ In function 'int main()':\n/tmp/tmpsi2qr0iq.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsi2qr0iq.cpp:2:\n/tmp/tmpsi2qr0iq.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsi2qr0iq.cpp:40:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsi2qr0iq.cpp:40:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsi2qr0iq.cpp:40:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsi2qr0iq.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsi2qr0iq.cpp:41:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsi2qr0iq.cpp:41:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg22gpvm8.cpp: In function 'int main()':\n/tmp/tmpg22gpvm8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg22gpvm8.cpp:2:\n/tmp/tmpg22gpvm8.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpg22gpvm8.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpg22gpvm8.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpg22gpvm8.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpg22gpvm8.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpg22gpvm8.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg22gpvm8.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpg22gpv"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ya9mnk7.cpp: In function 'int main()':\n/tmp/tmp_ya9mnk7.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_ya9mnk7.cpp:2:\n/tmp/tmp_ya9mnk7.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp_ya9mnk7.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp_ya9mnk7.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_ya9mnk7.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp_ya9mnk7.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp_ya9mnk7.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp_ya9mnk7.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_ya9mnk7.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_ya9mn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    // You can use std::sort()\n    // You can\
    \ use std::unique()\n    // You can use std::vector::size()\n    // You can use\
    \ std::vector::begin()\n    // You can use std::vector::end()\n    // You can\
    \ use std::vector::erase()\n    // You can use std::vector::insert()\n    // You\
    \ can use std::vector::push_back()\n    // You can use std::vector::pop_back()\n\
    \    // You can use std::vector::empty()\n    // You can use std::vector::clear()\n\
    \    // You can use std::vector::front()\n    // You can use std::vector::back()\n\
    \    // You can use std::vector::at()\n    // You can use std::vector::data()\n\
    \    // You can use std::vector::resize()\n    // You can use std::vector::swap()\n\
    \    // You can use std::vector::emplace()\n    // You can use std::vector::emplace_back()\n\
    \    // You can use std::vector::operator[]()\n    // You can use std::vector::operator=()\n\
    \    // You can use std::vector::operator==()\n    // You can use std::vector::operator!=()\n\
    \    // You can use std::vector::operator<()\n    // You can use std::vector::operator<=()\n\
    \    // You can use std::vector::operator>()\n    // You can use std::vector::operator>=()\n\
    \    // You can use std::vector::max_size()\n    // You can use std::vector::capacity()\n\
    \    // You can use std::vector::shrink_to_fit()\n    // You can use std::vector::reserve()\n\
    \    // You can use std::vector::assign()\n    // You can use std::vector::get_allocator()\n\
    \    // You can use std::vector::begin()\n    // You can use std::vector::cbegin()\n\
    \    // You can use std::vector::end()\n    // You can use std::vector::cend()\n\
    \    // You can use std::vector::rbegin()\n    // You can use std::vector::crbegin()\n\
    \    // You can\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftgamn0n.cpp: In function 'int main()':\n/tmp/tmpftgamn0n.cpp:67:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpftgamn0n.cpp:2:\n/tmp/tmpftgamn0n.cpp:68:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpftgamn0n.cpp:68:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpftgamn0n.cpp:68:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpftgamn0n.cpp:68:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpftgamn0n.cpp:69:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpftgamn0n.cpp:69:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpftgamn0n.cpp:69:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpftgamn0n.cpp:69:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpftgamn"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    bool sorted = true;\n    for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            sorted = false;\n       \
    \     break;\n        }\n    }\n    return sorted;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28n9ft6z.cpp: In function 'int main()':\n/tmp/tmp28n9ft6z.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28n9ft6z.cpp:2:\n/tmp/tmp28n9ft6z.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp28n9ft6z.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp28n9ft6z.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp28n9ft6z.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp28n9ft6z.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp28n9ft6z.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp28n9ft6z.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp28n9ft6z.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp28n9ft"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>=lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m0sg2nr.cpp: In function 'int main()':\n/tmp/tmp1m0sg2nr.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1m0sg2nr.cpp:2:\n/tmp/tmp1m0sg2nr.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp1m0sg2nr.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp1m0sg2nr.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1m0sg2nr.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp1m0sg2nr.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp1m0sg2nr.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp1m0sg2nr.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1m0sg2nr.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1m0sg2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgacnsq7h.cpp: In function 'int main()':\n/tmp/tmpgacnsq7h.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgacnsq7h.cpp:2:\n/tmp/tmpgacnsq7h.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpgacnsq7h.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpgacnsq7h.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpgacnsq7h.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpgacnsq7h.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpgacnsq7h.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgacnsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpned0xhz6.cpp: In function 'int main()':\n/tmp/tmpned0xhz6.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpned0xhz6.cpp:2:\n/tmp/tmpned0xhz6.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpned0xhz6.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpned0xhz6.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpned0xhz6.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpned0xhz6.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpned0xhz6.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpned0xhz6.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpned0xhz6.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpned0xh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    int i =\
    \ 0;\n    while (i < lst.size() - 1) {\n        if (lst[i] > lst[i + 1]) {\n \
    \           return false;\n        }\n        i++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfaz5zm89.cpp: In function 'int main()':\n/tmp/tmpfaz5zm89.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfaz5zm89.cpp:2:\n/tmp/tmpfaz5zm89.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpfaz5zm89.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpfaz5zm89.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfaz5zm89.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpfaz5zm89.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpfaz5zm89.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpfaz5zm89.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfaz5zm89.cpp:39:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfaz5zm"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmookp5l.cpp: In function 'int main()':\n/tmp/tmpvmookp5l.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvmookp5l.cpp:2:\n/tmp/tmpvmookp5l.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpvmookp5l.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpvmookp5l.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpvmookp5l.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpvmookp5l.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpvmookp5l.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvmookp5l.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvmookp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // YOUR CODE HERE\n    for(int i=0;i<lst.size()-1;i++){\n      \
    \  if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphb626vmp.cpp: In function 'int main()':\n/tmp/tmphb626vmp.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphb626vmp.cpp:2:\n/tmp/tmphb626vmp.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmphb626vmp.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmphb626vmp.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphb626vmp.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmphb626vmp.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmphb626vmp.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmphb626vmp.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphb626vmp.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphb626v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    int i = 0;\n    while(i < lst.size() - 1) {\n        if(lst[i] > lst[i +\
    \ 1])\n            return false;\n        i++;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tb5ggm_.cpp: In function 'int main()':\n/tmp/tmp4tb5ggm_.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4tb5ggm_.cpp:2:\n/tmp/tmp4tb5ggm_.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp4tb5ggm_.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp4tb5ggm_.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4tb5ggm_.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp4tb5ggm_.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp4tb5ggm_.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp4tb5ggm_.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4tb5ggm_.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4tb5gg"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqaxsh72o.cpp: In function 'int main()':\n/tmp/tmpqaxsh72o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqaxsh72o.cpp:2:\n/tmp/tmpqaxsh72o.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpqaxsh72o.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpqaxsh72o.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpqaxsh72o.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpqaxsh72o.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpqaxsh72o.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqaxsh7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ya9mnk7.cpp: In function 'int main()':\n/tmp/tmp_ya9mnk7.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_ya9mnk7.cpp:2:\n/tmp/tmp_ya9mnk7.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp_ya9mnk7.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp_ya9mnk7.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_ya9mnk7.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp_ya9mnk7.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp_ya9mnk7.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp_ya9mnk7.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_ya9mnk7.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_ya9mn"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::set<long> s;\n    for(int i=0;i<lst.size();i++){\n\
    \        s.insert(lst[i]);\n    }\n    if(s.size()==lst.size()){\n        for(int\
    \ i=0;i<lst.size()-1;i++){\n            if(lst[i]>lst[i+1]){\n               \
    \ return false;\n            }\n        }\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    if (s.size() != lst.size())\
    \ {\n        return false;\n    }\n    for (int i = 0; i < lst.size() - 1; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++){\n\
    \        if(prev >= *it)\n            return false;\n        prev = *it;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n - 1; i++) {\n        if(lst[i] >= lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxure0ba.cpp: In function 'int main()':\n/tmp/tmpsxure0ba.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsxure0ba.cpp:2:\n/tmp/tmpsxure0ba.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsxure0ba.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsxure0ba.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsxure0ba.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsxure0ba.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsxure0ba.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsxure0ba.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsxure0ba.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsxure0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >=\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dsrzl5j.cpp: In function 'int main()':\n/tmp/tmp7dsrzl5j.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dsrzl5j.cpp:2:\n/tmp/tmp7dsrzl5j.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp7dsrzl5j.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp7dsrzl5j.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp7dsrzl5j.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp7dsrzl5j.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp7dsrzl5j.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7dsrzl"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    for(; it != lst.end(); it++){\n\
    \        if(*it < prev)\n            return false;\n        prev = *it;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        for(int i=0;i<lst.size()-1;i++)\n   \
    \     {\n            if(lst[i]>lst[i+1])\n            {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kczsq49.cpp: In function 'int main()':\n/tmp/tmp6kczsq49.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kczsq49.cpp:2:\n/tmp/tmp6kczsq49.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6kczsq49.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6kczsq49.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6kczsq49.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6kczsq49.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6kczsq49.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kczsq"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // Your code here\n  std::set<long> s;\n  for(int i=0;i<lst.size();i++){\n\
    \    s.insert(lst[i]);\n  }\n  if(s.size()!=lst.size()){\n    return false;\n\
    \  }\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1]){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1) return\
    \ true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9m0u0sgr: /tmp/tmp9m0u0sgr.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    bool flag = true;\n    for(int i = 0; i <\
    \ lst.size()-1; i++){\n        if(lst[i] > lst[i+1]){\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_03_b3ly.cpp: In function 'int main()':\n/tmp/tmp_03_b3ly.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_03_b3ly.cpp:2:\n/tmp/tmp_03_b3ly.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp_03_b3ly.cpp:32:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp_03_b3ly.cpp:32:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:32:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp_03_b3ly.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp_03_b3ly.cpp:33:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp_03_b3ly.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_03_b3"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8p_txqt1.cpp: In function 'int main()':\n/tmp/tmp8p_txqt1.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8p_txqt1.cpp:2:\n/tmp/tmp8p_txqt1.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp8p_txqt1.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp8p_txqt1.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp8p_txqt1.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp8p_txqt1.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp8p_txqt1.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8p_txqt1.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8p_txq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s(lst.begin(), lst.end());\n\
    \    if (s.size() != lst.size()) {\n        return false;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfaqswz7: /tmp/tmpxfaqswz7.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end())) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjkbdgjnt: /tmp/tmpjkbdgjnt.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfaqswz7: /tmp/tmpxfaqswz7.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kczsq49.cpp: In function 'int main()':\n/tmp/tmp6kczsq49.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kczsq49.cpp:2:\n/tmp/tmp6kczsq49.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6kczsq49.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6kczsq49.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6kczsq49.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6kczsq49.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6kczsq49.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kczsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long n = lst.size();\n    if(n == 1)\n  \
    \      return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ >= lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsy9dimhp: /tmp/tmpsy9dimhp.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1) return true;\n    for(int\
    \ i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgacnsq7h.cpp: In function 'int main()':\n/tmp/tmpgacnsq7h.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgacnsq7h.cpp:2:\n/tmp/tmpgacnsq7h.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpgacnsq7h.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpgacnsq7h.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpgacnsq7h.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpgacnsq7h.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpgacnsq7h.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgacnsq"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1) return true;\n    for(int\
    \ i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    long\
    \ prev = *lst.begin();\n    for(it = lst.begin()+1; it != lst.end(); it++){\n\
    \        if(*it < prev)\n            return false;\n        prev = *it;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    int len = lst.size();\n    if (len == 1)\
    \ {\n        return true;\n    }\n    for (int i = 0; i < len - 1; i++) {\n  \
    \      if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvgnwjf88: /tmp/tmpvgnwjf88.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    int i = 0;\n   \
    \ while(i < n-1){\n        if(lst[i] > lst[i+1]){\n            return false;\n\
    \        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1xz525br: /tmp/tmp1xz525br.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s;\n    for (auto i: lst) {\n        s.insert(i);\n\
    \    }\n    return s.size() == lst.size();\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk6c4__af: /tmp/tmpk6c4__af.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (std::is_sorted(lst.begin(), lst.end())) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplfd2_pe7.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmplfd2_pe7.cpp:28:9: error: 'is_sorted' is not a member of 'std'\n     if\
    \ (std::is_sorted(lst.begin(), lst.end())) {\n         ^\n/tmp/tmplfd2_pe7.cpp:28:9:\
    \ note: suggested alternative:\n/tmp/tmplfd2_pe7.cpp:23:6: note:   'is_sorted'\n\
    \ bool is_sorted(std::vector<long> lst) {\n      ^\n/tmp/tmplfd2_pe7.cpp: In function\
    \ 'int main()':\n/tmp/tmplfd2_pe7.cpp:34:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = is_sorted;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplfd2_pe7.cpp:2:\n/tmp/tmplfd2_pe7.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmplfd2_pe7.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmplfd2_pe7.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplfd2_pe7.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmplfd2_pe7.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmplfd2_pe7.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n         "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpes8cudtp.cpp: In function 'int main()':\n/tmp/tmpes8cudtp.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes8cudtp.cpp:2:\n/tmp/tmpes8cudtp.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpes8cudtp.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpes8cudtp.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpes8cudtp.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpes8cudtp.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpes8cudtp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpes8cudtp.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpes8cud"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaz9njs5x: /tmp/tmpaz9njs5x.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kczsq49.cpp: In function 'int main()':\n/tmp/tmp6kczsq49.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kczsq49.cpp:2:\n/tmp/tmp6kczsq49.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6kczsq49.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6kczsq49.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6kczsq49.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6kczsq49.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6kczsq49.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kczsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqaxsh72o.cpp: In function 'int main()':\n/tmp/tmpqaxsh72o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqaxsh72o.cpp:2:\n/tmp/tmpqaxsh72o.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpqaxsh72o.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpqaxsh72o.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpqaxsh72o.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpqaxsh72o.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpqaxsh72o.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqaxsh7"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    std::vector<long>::iterator it;\n    it =\
    \ lst.begin();\n    long prev = *it;\n    it++;\n    while(it != lst.end()){\n\
    \        if(prev >= *it){\n            return false;\n        }\n        prev\
    \ = *it;\n        it++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::vector<long>::iterator it;\n    for(it\
    \ = lst.begin(); it != lst.end(); it++){\n        if(it+1 != lst.end()){\n   \
    \         if(*it > *(it+1)){\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq_rmpzrk: /tmp/tmpq_rmpzrk.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >=\
    \ lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dsrzl5j.cpp: In function 'int main()':\n/tmp/tmp7dsrzl5j.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dsrzl5j.cpp:2:\n/tmp/tmp7dsrzl5j.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp7dsrzl5j.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp7dsrzl5j.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp7dsrzl5j.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp7dsrzl5j.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp7dsrzl5j.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7dsrzl5j.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7dsrzl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n - 1; i++)\n    {\n        if(lst[i]\
    \ > lst[i + 1])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kczsq49.cpp: In function 'int main()':\n/tmp/tmp6kczsq49.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kczsq49.cpp:2:\n/tmp/tmp6kczsq49.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp6kczsq49.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp6kczsq49.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp6kczsq49.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp6kczsq49.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp6kczsq49.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kczsq49.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6kczsq"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] >= lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it;\n    long prev = *lst.begin();\n\
    \    for (it = lst.begin() + 1; it != lst.end(); it++) {\n        if (*it < prev)\
    \ {\n            return false;\n        }\n        prev = *it;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprawfxrwv: /tmp/tmprawfxrwv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    else {\n\
    \        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst[i] >\
    \ lst[i + 1]) {\n                return false;\n            }\n        }\n   \
    \     return true;\n    }\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] >= lst[i\
    \ + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for(int i = 0; i < n - 1; i++) {\n    \
    \    if(lst[i] >= lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu_i29djn: /tmp/tmpu_i29djn.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749356
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // your code here\n    std::set<long> s;\n    for(auto i:lst){\n\
    \        s.insert(i);\n    }\n    if(s.size()!=lst.size()){\n        return false;\n\
    \    }\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]){\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    else {\n\
    \        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst[i] >\
    \ lst[i + 1]) {\n                return false;\n            }\n        }\n   \
    \     return true;\n    }\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) return true;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_03_b3ly.cpp: In function 'int main()':\n/tmp/tmp_03_b3ly.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_03_b3ly.cpp:2:\n/tmp/tmp_03_b3ly.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp_03_b3ly.cpp:32:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp_03_b3ly.cpp:32:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:32:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp_03_b3ly.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp_03_b3ly.cpp:33:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp_03_b3ly.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_03_b3ly.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_03_b3"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int i=0;\n    int j=0;\n    int k=0;\n  \
    \  int count=0;\n    for(i=0;i<lst.size();i++)\n    {\n        for(j=i+1;j<lst.size();j++)\n\
    \        {\n            if(lst[i]==lst[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    if(count>0)\n    {\n        return false;\n\
    \    }\n    else\n    {\n        for(k=0;k<lst.size()-1;k++)\n        {\n    \
    \        if(lst[k]>lst[k+1])\n            {\n                return false;\n \
    \           }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long prev = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++){\n        if(lst[i] < prev) return false;\n        prev =\
    \ lst[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqaxsh72o.cpp: In function 'int main()':\n/tmp/tmpqaxsh72o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqaxsh72o.cpp:2:\n/tmp/tmpqaxsh72o.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpqaxsh72o.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpqaxsh72o.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpqaxsh72o.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpqaxsh72o.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpqaxsh72o.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqaxsh72o.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqaxsh7"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n  // your code here\n  int n = lst.size();\n  int i = 0;\n  while(i\
    \ < n-1){\n    if(lst[i] == lst[i+1]){\n      return false;\n    }\n    i++;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfbnpj75w: /tmp/tmpfbnpj75w.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1)\n        return true;\n\
    \    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgacnsq7h.cpp: In function 'int main()':\n/tmp/tmpgacnsq7h.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgacnsq7h.cpp:2:\n/tmp/tmpgacnsq7h.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpgacnsq7h.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpgacnsq7h.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpgacnsq7h.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpgacnsq7h.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpgacnsq7h.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgacnsq7h.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpgacnsq"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    if(n == 1)\n   \
    \     return true;\n    for(int i = 0; i < n-1; i++){\n        if(lst[i] >= lst[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_awhhw2.cpp: In function 'int main()':\n/tmp/tmpu_awhhw2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu_awhhw2.cpp:2:\n/tmp/tmpu_awhhw2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu_awhhw2.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu_awhhw2.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu_awhhw2.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu_awhhw2.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu_awhhw2.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu_awhhw2.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu_awhhw2.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu_awhh"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    int n = lst.size();\n    for(int i = 0; i\
    \ < n-1; i++){\n        if(lst[i] >= lst[i+1]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaz9njs5x: /tmp/tmpaz9njs5x.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749355
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long>::iterator it = lst.begin();\n    long prev = *it;\n\
    \    it++;\n    while (it != lst.end()) {\n        if (prev >= *it) {\n      \
    \      return false;\n        }\n        prev = *it;\n        it++;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749356
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] >= lst[i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9bsx6tq.cpp: In function 'int main()':\n/tmp/tmpf9bsx6tq.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9bsx6tq.cpp:2:\n/tmp/tmpf9bsx6tq.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpf9bsx6tq.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpf9bsx6tq.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpf9bsx6tq.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpf9bsx6tq.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpf9bsx6tq.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9bsx6tq.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9bsx6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size()==1)\n        return true;\n\
    \    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1])\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7xzhx0p.cpp: In function 'int main()':\n/tmp/tmpu7xzhx0p.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu7xzhx0p.cpp:2:\n/tmp/tmpu7xzhx0p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpu7xzhx0p.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpu7xzhx0p.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpu7xzhx0p.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpu7xzhx0p.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpu7xzhx0p.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu7xzhx0p.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu7xzhx"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    if(lst.size() == 1) return true;\n    for(int\
    \ i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5588lk7t.cpp: In function 'int main()':\n/tmp/tmp5588lk7t.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5588lk7t.cpp:2:\n/tmp/tmp5588lk7t.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp5588lk7t.cpp:33:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp5588lk7t.cpp:33:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5588lk7t.cpp:33:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp5588lk7t.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp5588lk7t.cpp:34:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp5588lk7t.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5588lk7t.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5588lk"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 1) {\n        return true;\n    }\n    for (int\
    \ i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl251hoii.cpp: In function 'int main()':\n/tmp/tmpl251hoii.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl251hoii.cpp:2:\n/tmp/tmpl251hoii.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpl251hoii.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpl251hoii.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpl251hoii.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpl251hoii.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpl251hoii.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl251hoii.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl251ho"
  stdout: ''
