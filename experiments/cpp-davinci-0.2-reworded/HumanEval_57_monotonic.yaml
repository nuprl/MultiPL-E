name: HumanEval_57_monotonic
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements\
  \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
completions: ["    if (l.size() <= 1) {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;", "    if\
    \ (l.size() <= 1) {\n        return true;\n    }\n    bool increasing = l[0] <\
    \ l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;", "    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;", "    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n\
    \        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;", "    if (l.size() <= 1) {\n   \
    \     return true;\n    }\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1])\
    \ {\n            increasing = false;\n        }\n        if (l[i] > l[i - 1])\
    \ {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;", "    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;",
  "    if (l.size() == 0) return true;\n    long prev = l[0];\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < prev) {\n            increasing = false;\n        }\n\
    \        if (l[i] > prev) {\n            decreasing = false;\n        }\n    \
    \    prev = l[i];\n    }\n    return increasing || decreasing;", "    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;", "    if (l.size() <= 1) {\n\
    \        return true;\n    }\n    bool increasing = l[0] < l[1];\n    for (int\
    \ i = 1; i < l.size() - 1; i++) {\n        if (increasing) {\n            if (l[i]\
    \ > l[i + 1]) {\n                return false;\n            }\n        } else\
    \ {\n            if (l[i] < l[i + 1]) {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;", "    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n     \
    \   if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;", "    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            increasing = false;\n        }\n        if (l[i]\
    \ > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;", "    if (l.size() <= 1) {\n        return true;\n\
    \    }\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.size() -\
    \ 1; i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n\
    \    }\n    return true;", "    int flag = 0;\n    for(int i = 0; i < l.size()\
    \ - 1; i++) {\n        if(l[i] < l[i + 1]) {\n            if(flag == -1) {\n \
    \               return false;\n            }\n            flag = 1;\n        }\n\
    \        else if(l[i] > l[i + 1]) {\n            if(flag == 1) {\n           \
    \     return false;\n            }\n            flag = -1;\n        }\n    }\n\
    \    return true;", "    if (l.size() <= 1) {\n        return true;\n    }\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;", "    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;", "    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n\
    \        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;", "    if (l.size() <= 1) {\n   \
    \     return true;\n    }\n    bool increasing = l[0] < l[1];\n    for (int i\
    \ = 1; i < l.size() - 1; i++) {\n        if (increasing) {\n            if (l[i]\
    \ > l[i + 1]) {\n                return false;\n            }\n        } else\
    \ {\n            if (l[i] < l[i + 1]) {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;", "    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n     \
    \   if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;", "    if (l.size() <= 1) return true;\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;", "    // YOUR\
    \ CODE HERE\n    int n = l.size();\n    if(n <= 1)\n        return true;\n   \
    \ int i = 0;\n    while(i < n-1 && l[i] <= l[i+1])\n        i++;\n    if(i ==\
    \ n-1)\n        return true;\n    i = 0;\n    while(i < n-1 && l[i] >= l[i+1])\n\
    \        i++;\n    if(i == n-1)\n        return true;\n    return false;"]
stop_tokens:
- "\n}"
