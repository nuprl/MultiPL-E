name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a vector of strings.\n// The vector contains different words. Return the word\
  \ with maximum number\n// of unique characters. If multiple strings have maximum\
  \ number of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    std::string max_word = \"\";\n    int max_count = 0;\n    for (int\
    \ i = 0; i < words.size(); i++) {\n        int count = 0;\n        std::string\
    \ word = words[i];\n        std::vector<bool> chars(26, false);\n        for (int\
    \ j = 0; j < word.size(); j++) {\n            if (!chars[word[j] - 'a']) {\n \
    \               chars[word[j] - 'a'] = true;\n                count++;\n     \
    \       }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    std::string max_word = \"\";\n    int max_unique_chars = 0;\n    for (auto\
    \ word : words) {\n        std::set<char> unique_chars;\n        for (auto c :\
    \ word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_characters = 0;\n    for (std::string word\
    \ : words) {\n        int unique_characters = 0;\n        for (char c : word)\
    \ {\n            if (word.find(c) == word.rfind(c)) {\n                unique_characters++;\n\
    \            }\n        }\n        if (unique_characters > max_unique_characters)\
    \ {\n            max_unique_characters = unique_characters;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "  std::string max_word =\
    \ \"\";\n  int max_unique_chars = 0;\n  for (std::string word : words) {\n   \
    \ std::set<char> unique_chars;\n    for (char c : word) {\n      unique_chars.insert(c);\n\
    \    }\n    if (unique_chars.size() > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars.size();\n      max_word = word;\n    }\n  }\n  return max_word;",
  "    int max_unique = 0;\n    std::string max_word;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (auto c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique) {\n            max_unique = unique_chars.size();\n           \
    \ max_word = word;\n        }\n    }\n    return max_word;", "    // Write your\
    \ code here\n    int max = 0;\n    std::string ans;\n    for(int i = 0; i < words.size();\
    \ i++){\n        std::string word = words[i];\n        std::set<char> s;\n   \
    \     for(int j = 0; j < word.size(); j++){\n            s.insert(word[j]);\n\
    \        }\n        if(s.size() > max){\n            max = s.size();\n       \
    \     ans = word;\n        }\n    }\n    return ans;", "  std::string max_word\
    \ = \"\";\n  int max_unique_characters = 0;\n  for (auto word : words) {\n   \
    \ std::set<char> unique_characters;\n    for (auto character : word) {\n     \
    \ unique_characters.insert(character);\n    }\n    if (unique_characters.size()\
    \ > max_unique_characters) {\n      max_unique_characters = unique_characters.size();\n\
    \      max_word = word;\n    }\n  }\n  return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_characters = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_characters;\n        for (char c : word) {\n\
    \            unique_characters.insert(c);\n        }\n        if (unique_characters.size()\
    \ > max_unique_characters) {\n            max_unique_characters = unique_characters.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_characters = 0;\n    for (std::string word\
    \ : words) {\n        int unique_characters = 0;\n        for (char c : word)\
    \ {\n            if (word.find(c) == word.rfind(c)) {\n                unique_characters++;\n\
    \            }\n        }\n        if (unique_characters > max_unique_characters)\
    \ {\n            max_unique_characters = unique_characters;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word;\n\
    \    int max_unique_chars = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ unique_chars;\n        for (auto c : word) {\n            unique_chars.insert(c);\n\
    \        }\n        if (unique_chars.size() > max_unique_chars) {\n          \
    \  max_unique_chars = unique_chars.size();\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;", "  std::string max_word = \"\";\n  int\
    \ max_unique_char = 0;\n  for (auto word : words) {\n    std::set<char> unique_char;\n\
    \    for (auto c : word) {\n      unique_char.insert(c);\n    }\n    if (unique_char.size()\
    \ > max_unique_char) {\n      max_unique_char = unique_char.size();\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;", "    int max_unique = 0;\n    std::string\
    \ max_word;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique) {\n            max_unique = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_count = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (char c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max_count = unique_chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Write your code here\n\
    \    int max = 0;\n    std::string max_str;\n    for(auto word : words) {\n  \
    \      std::set<char> s;\n        for(auto c : word) {\n            s.insert(c);\n\
    \        }\n        if(s.size() > max) {\n            max = s.size();\n      \
    \      max_str = word;\n        }\n    }\n    return max_str;", "    std::string\
    \ max_word;\n    int max_count = 0;\n    for (std::string word : words) {\n  \
    \      std::set<char> chars;\n        for (char c : word) {\n            chars.insert(c);\n\
    \        }\n        if (chars.size() > max_count) {\n            max_count = chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    int\
    \ max_unique = 0;\n    std::string max_word;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (char ch : word) {\n  \
    \          unique_chars.insert(ch);\n        }\n        if (unique_chars.size()\
    \ > max_unique) {\n            max_unique = unique_chars.size();\n           \
    \ max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_char;\n        for (auto c : word) {\n    \
    \        unique_char.insert(c);\n        }\n        if (unique_char.size() > max_unique_char)\
    \ {\n            max_unique_char = unique_char.size();\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;", "    std::string max_word =\
    \ \"\";\n    int max_unique_char = 0;\n    for (auto word : words) {\n       \
    \ std::set<char> unique_char;\n        for (auto c : word) {\n            unique_char.insert(c);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string result;\n    int max_unique_char = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_char;\n        for (auto\
    \ c : word) {\n            unique_char.insert(c);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          result = word;\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
