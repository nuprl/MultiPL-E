name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a vector of strings.\n// The vector contains different words. Return the word\
  \ with maximum number\n// of unique characters. If multiple strings have maximum\
  \ number of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    std::string max_word = \"\";\n    int max_count = 0;\n    for (int\
    \ i = 0; i < words.size(); i++) {\n        int count = 0;\n        std::string\
    \ word = words[i];\n        std::vector<bool> chars(26, false);\n        for (int\
    \ j = 0; j < word.size(); j++) {\n            if (!chars[word[j] - 'a']) {\n \
    \               chars[word[j] - 'a'] = true;\n                count++;\n     \
    \       }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    std::string max_word = \"\";\n    int max_unique_chars = 0;\n    for (auto\
    \ word : words) {\n        std::set<char> unique_chars;\n        for (auto c :\
    \ word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_characters = 0;\n    for (std::string word\
    \ : words) {\n        int unique_characters = 0;\n        for (char c : word)\
    \ {\n            if (word.find(c) == word.rfind(c)) {\n                unique_characters++;\n\
    \            }\n        }\n        if (unique_characters > max_unique_characters)\
    \ {\n            max_unique_characters = unique_characters;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "  std::string max_word =\
    \ \"\";\n  int max_unique_chars = 0;\n  for (std::string word : words) {\n   \
    \ std::set<char> unique_chars;\n    for (char c : word) {\n      unique_chars.insert(c);\n\
    \    }\n    if (unique_chars.size() > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars.size();\n      max_word = word;\n    }\n  }\n  return max_word;",
  "    int max_unique = 0;\n    std::string max_word;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (auto c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique) {\n            max_unique = unique_chars.size();\n           \
    \ max_word = word;\n        }\n    }\n    return max_word;", "    // Write your\
    \ code here\n    int max = 0;\n    std::string ans;\n    for(int i = 0; i < words.size();\
    \ i++){\n        std::string word = words[i];\n        std::set<char> s;\n   \
    \     for(int j = 0; j < word.size(); j++){\n            s.insert(word[j]);\n\
    \        }\n        if(s.size() > max){\n            max = s.size();\n       \
    \     ans = word;\n        }\n    }\n    return ans;", "  std::string max_word\
    \ = \"\";\n  int max_unique_characters = 0;\n  for (auto word : words) {\n   \
    \ std::set<char> unique_characters;\n    for (auto character : word) {\n     \
    \ unique_characters.insert(character);\n    }\n    if (unique_characters.size()\
    \ > max_unique_characters) {\n      max_unique_characters = unique_characters.size();\n\
    \      max_word = word;\n    }\n  }\n  return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_characters = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_characters;\n        for (char c : word) {\n\
    \            unique_characters.insert(c);\n        }\n        if (unique_characters.size()\
    \ > max_unique_characters) {\n            max_unique_characters = unique_characters.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_characters = 0;\n    for (std::string word\
    \ : words) {\n        int unique_characters = 0;\n        for (char c : word)\
    \ {\n            if (word.find(c) == word.rfind(c)) {\n                unique_characters++;\n\
    \            }\n        }\n        if (unique_characters > max_unique_characters)\
    \ {\n            max_unique_characters = unique_characters;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word;\n\
    \    int max_unique_chars = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ unique_chars;\n        for (auto c : word) {\n            unique_chars.insert(c);\n\
    \        }\n        if (unique_chars.size() > max_unique_chars) {\n          \
    \  max_unique_chars = unique_chars.size();\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;", "  std::string max_word = \"\";\n  int\
    \ max_unique_char = 0;\n  for (auto word : words) {\n    std::set<char> unique_char;\n\
    \    for (auto c : word) {\n      unique_char.insert(c);\n    }\n    if (unique_char.size()\
    \ > max_unique_char) {\n      max_unique_char = unique_char.size();\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;", "    int max_unique = 0;\n    std::string\
    \ max_word;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique) {\n            max_unique = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_count = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (char c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max_count = unique_chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Write your code here\n\
    \    int max = 0;\n    std::string max_str;\n    for(auto word : words) {\n  \
    \      std::set<char> s;\n        for(auto c : word) {\n            s.insert(c);\n\
    \        }\n        if(s.size() > max) {\n            max = s.size();\n      \
    \      max_str = word;\n        }\n    }\n    return max_str;", "    std::string\
    \ max_word;\n    int max_count = 0;\n    for (std::string word : words) {\n  \
    \      std::set<char> chars;\n        for (char c : word) {\n            chars.insert(c);\n\
    \        }\n        if (chars.size() > max_count) {\n            max_count = chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    int\
    \ max_unique = 0;\n    std::string max_word;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (char ch : word) {\n  \
    \          unique_chars.insert(ch);\n        }\n        if (unique_chars.size()\
    \ > max_unique) {\n            max_unique = unique_chars.size();\n           \
    \ max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_char;\n        for (auto c : word) {\n    \
    \        unique_char.insert(c);\n        }\n        if (unique_char.size() > max_unique_char)\
    \ {\n            max_unique_char = unique_char.size();\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;", "    std::string max_word =\
    \ \"\";\n    int max_unique_char = 0;\n    for (auto word : words) {\n       \
    \ std::set<char> unique_char;\n        for (auto c : word) {\n            unique_char.insert(c);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string result;\n    int max_unique_char = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_char;\n        for (auto\
    \ c : word) {\n            unique_char.insert(c);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          result = word;\n        }\n    }\n    return result;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_char;\n        for (char c : word) {\n\
    \            unique_char.insert(c);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_characters = 0;\n    for (std::string word\
    \ : words) {\n        std::set<char> unique_characters;\n        for (char c :\
    \ word) {\n            unique_characters.insert(c);\n        }\n        if (unique_characters.size()\
    \ > max_unique_characters) {\n            max_unique_characters = unique_characters.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        std::string word = words[i];\n        std::set<char> unique_char;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_char.insert(word[j]);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (std::string word : words) {\n        std::set<char> unique_char;\n \
    \       for (char c : word) {\n            unique_char.insert(c);\n        }\n\
    \        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (std::string word : words) {\n        std::set<char> unique_char;\n \
    \       for (char c : word) {\n            unique_char.insert(c);\n        }\n\
    \        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word;\n    int max_unique_chars = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_chars;\n        for (auto\
    \ c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n  \
    \      std::set<char> chars;\n        for (auto c : word) {\n            chars.insert(c);\n\
    \        }\n        if (chars.size() > max_count) {\n            max_count = chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word;\n    int max_unique_char = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_char;\n        for (char c : word) {\n    \
    \        unique_char.insert(c);\n        }\n        if (unique_char.size() > max_unique_char)\
    \ {\n            max_unique_char = unique_char.size();\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;", "    std::string max_word =\
    \ \"\";\n    int max_len = 0;\n    for (std::string word : words) {\n        std::set<char>\
    \ chars;\n        for (char c : word) {\n            chars.insert(c);\n      \
    \  }\n        if (chars.size() > max_len) {\n            max_len = chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (std::string word :\
    \ words) {\n        int unique_char = 0;\n        for (int i = 0; i < word.length();\
    \ i++) {\n            if (word.find(word[i]) == i) {\n                unique_char++;\n\
    \            }\n        }\n        if (unique_char > max_unique_char) {\n    \
    \        max_unique_char = unique_char;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;", "    std::string max_word = \"\";\n    int\
    \ max_unique_chars = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ unique_chars;\n        for (auto c : word) {\n            unique_chars.insert(c);\n\
    \        }\n        if (unique_chars.size() > max_unique_chars) {\n          \
    \  max_unique_chars = unique_chars.size();\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;", "    std::string result = \"\";\n    int\
    \ max_unique_characters = 0;\n    for (auto word : words) {\n        int unique_characters\
    \ = 0;\n        for (int i = 0; i < word.size(); i++) {\n            if (word.find(word[i])\
    \ == i) {\n                unique_characters++;\n            }\n        }\n  \
    \      if (unique_characters > max_unique_characters) {\n            max_unique_characters\
    \ = unique_characters;\n            result = word;\n        }\n    }\n    return\
    \ result;", "    std::string max_word;\n    int max_unique_chars = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_chars;\n        for (auto\
    \ c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word;\n    int max_unique_chars = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (char c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        std::string word = words[i];\n        std::set<char> unique_char;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_char.insert(word[j]);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word;\n    int max_unique_chars = 0;\n    for\
    \ (std::string word : words) {\n        int unique_chars = 0;\n        for (char\
    \ c : word) {\n            if (word.find(c) == word.rfind(c)) {\n            \
    \    unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    std::string max_word = \"\";\n\
    \    int max_count = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ unique_chars;\n        for (auto ch : word) {\n            unique_chars.insert(ch);\n\
    \        }\n        if (unique_chars.size() > max_count) {\n            max_count\
    \ = unique_chars.size();\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max_word = \"\";\n    int max_count = 0;\n\
    \    for (std::string word : words) {\n        std::set<char> chars;\n       \
    \ for (char c : word) {\n            chars.insert(c);\n        }\n        if (chars.size()\
    \ > max_count) {\n            max_count = chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_char = 0;\n    for (std::string word : words) {\n\
    \        int unique_char = 0;\n        for (char c : word) {\n            if (word.find(c)\
    \ == word.rfind(c)) {\n                unique_char++;\n            }\n       \
    \ }\n        if (unique_char > max_unique_char) {\n            max_unique_char\
    \ = unique_char;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    std::string max_word;\n    int max_unique_chars = 0;\n    for (auto word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (auto c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word;\n    int max_count = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ chars;\n        for (auto c : word) {\n            chars.insert(c);\n      \
    \  }\n        if (chars.size() > max_count) {\n            max_count = chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        int unique_chars = 0;\n        for (char c : word) {\n   \
    \         if (word.find(c) == word.rfind(c)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;", "    std::string max_word = \"\";\n  \
    \  int max_count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::string\
    \ word = words[i];\n        std::set<char> chars;\n        for (int j = 0; j <\
    \ word.size(); j++) {\n            chars.insert(word[j]);\n        }\n       \
    \ if (chars.size() > max_count) {\n            max_count = chars.size();\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        int unique_chars = 0;\n        for (char c : word) {\n   \
    \         if (word.find(c) == word.rfind(c)) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;", "    std::string result;\n    int max_unique_chars\
    \ = 0;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto ch : word) {\n            unique_chars.insert(ch);\n      \
    \  }\n        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars.size();\n            result = word;\n        }\n    }\n    return\
    \ result;", "    std::string max_word;\n    int max_unique = 0;\n    for (std::string\
    \ word : words) {\n        int unique = 0;\n        for (int i = 0; i < word.size();\
    \ i++) {\n            if (word.find(word[i]) == i) {\n                unique++;\n\
    \            }\n        }\n        if (unique > max_unique) {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    std::string result = \"\";\n    int max_count = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_chars;\n        for (auto c : word) {\n   \
    \         unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max_count = unique_chars.size();\n            result\
    \ = word;\n        }\n    }\n    return result;", "    std::string max_word =\
    \ \"\";\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n\
    \        int unique_chars = 0;\n        for (char c : word) {\n            if\
    \ (word.find(c) == word.rfind(c)) {\n                unique_chars++;\n       \
    \     }\n        }\n        if (unique_chars > max_unique_chars) {\n         \
    \   max_unique_chars = unique_chars;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string ans = \"\";\n    int max_unique\
    \ = 0;\n    for (std::string word : words) {\n        int unique = 0;\n      \
    \  std::vector<bool> seen(26, false);\n        for (char c : word) {\n       \
    \     if (!seen[c - 'a']) {\n                unique++;\n                seen[c\
    \ - 'a'] = true;\n            }\n        }\n        if (unique > max_unique) {\n\
    \            max_unique = unique;\n            ans = word;\n        }\n    }\n\
    \    return ans;", "  std::string result;\n  int max_unique = 0;\n  for (std::string\
    \ word : words) {\n    std::set<char> unique_chars;\n    for (char c : word) {\n\
    \      unique_chars.insert(c);\n    }\n    if (unique_chars.size() > max_unique)\
    \ {\n      max_unique = unique_chars.size();\n      result = word;\n    }\n  }\n\
    \  return result;", "    std::string max_word = \"\";\n    int max_unique_char\
    \ = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::string word\
    \ = words[i];\n        std::set<char> unique_char;\n        for (int j = 0; j\
    \ < word.size(); j++) {\n            unique_char.insert(word[j]);\n        }\n\
    \        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_chars = 0;\n\
    \    for (std::string word : words) {\n        int unique_chars = 0;\n       \
    \ for (char c : word) {\n            if (word.find(c) == word.rfind(c)) {\n  \
    \              unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ result = \"\";\n    int max = 0;\n    for (int i = 0; i < words.size(); i++)\
    \ {\n        std::set<char> s;\n        for (int j = 0; j < words[i].size(); j++)\
    \ {\n            s.insert(words[i][j]);\n        }\n        if (s.size() > max)\
    \ {\n            max = s.size();\n            result = words[i];\n        }\n\
    \    }\n    return result;", "    std::string max_word = \"\";\n    int max_unique_characters\
    \ = 0;\n    for (auto word : words) {\n        std::set<char> unique_characters;\n\
    \        for (auto character : word) {\n            unique_characters.insert(character);\n\
    \        }\n        if (unique_characters.size() > max_unique_characters) {\n\
    \            max_unique_characters = unique_characters.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n\
    \        std::set<char> unique_chars;\n        for (char c : word) {\n       \
    \     unique_chars.insert(c);\n        }\n        if (unique_chars.size() > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_count = 0;\n    for (std::string word : words) {\n    \
    \    std::set<char> unique_chars;\n        for (char c : word) {\n           \
    \ unique_chars.insert(c);\n        }\n        if (unique_chars.size() > max_count)\
    \ {\n            max_count = unique_chars.size();\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    std::string max_word = \"\";\n\
    \    int max_unique_chars = 0;\n    for (std::string word : words) {\n       \
    \ int unique_chars = 0;\n        for (char c : word) {\n            if (word.find(c)\
    \ == word.rfind(c)) {\n                unique_chars++;\n            }\n      \
    \  }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word;\n    int max_unique_chars = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_chars;\n        for (auto\
    \ c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ result = \"\";\n    int max_unique_chars = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        std::string word = words[i];\n        std::set<char> unique_chars;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_chars.insert(word[j]);\n\
    \        }\n        if (unique_chars.size() > max_unique_chars) {\n          \
    \  max_unique_chars = unique_chars.size();\n            result = word;\n     \
    \   }\n    }\n    return result;", "    std::string max_word = \"\";\n    int\
    \ max_unique_char = 0;\n    for (int i = 0; i < words.size(); i++) {\n       \
    \ std::string word = words[i];\n        std::set<char> unique_char;\n        for\
    \ (int j = 0; j < word.size(); j++) {\n            unique_char.insert(word[j]);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (auto word : words) {\n        std::set<char> unique_char;\n        for\
    \ (auto c : word) {\n            unique_char.insert(c);\n        }\n        if\
    \ (unique_char.size() > max_unique_char) {\n            max_unique_char = unique_char.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_count = 0;\n    for (std::string word : words)\
    \ {\n        std::set<char> chars;\n        for (char c : word) {\n          \
    \  chars.insert(c);\n        }\n        if (chars.size() > max_count) {\n    \
    \        max_count = chars.size();\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string max_word = \"\";\n    int max_count\
    \ = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::string word\
    \ = words[i];\n        std::set<char> chars;\n        for (int j = 0; j < word.size();\
    \ j++) {\n            chars.insert(word[j]);\n        }\n        if (chars.size()\
    \ > max_count) {\n            max_count = chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word;\n\
    \    int max_count = 0;\n    for (std::string word : words) {\n        int count\
    \ = 0;\n        for (char c : word) {\n            if (word.find(c) == word.rfind(c))\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string result;\n    int max_unique_chars\
    \ = 0;\n    for (std::string word : words) {\n        int unique_chars = 0;\n\
    \        for (char ch : word) {\n            if (word.find(ch) == word.rfind(ch))\
    \ {\n                unique_chars++;\n            }\n        }\n        if (unique_chars\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars;\n      \
    \      result = word;\n        }\n    }\n    return result;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ ans;\n    int max_unique = 0;\n    for (int i = 0; i < words.size(); i++) {\n\
    \        std::string word = words[i];\n        std::set<char> unique_chars;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_chars.insert(word[j]);\n\
    \        }\n        if (unique_chars.size() > max_unique) {\n            max_unique\
    \ = unique_chars.size();\n            ans = word;\n        }\n    }\n    return\
    \ ans;", "    std::string max_word = \"\";\n    int max_unique_chars = 0;\n  \
    \  for (auto word : words) {\n        int unique_chars = 0;\n        for (auto\
    \ c : word) {\n            if (word.find(c) == word.rfind(c)) {\n            \
    \    unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars)\
    \ {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    std::string max_word = \"\";\n\
    \    int max_unique_characters = 0;\n    for (int i = 0; i < words.size(); i++)\
    \ {\n        std::string word = words[i];\n        std::set<char> unique_characters;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_characters.insert(word[j]);\n\
    \        }\n        if (unique_characters.size() > max_unique_characters) {\n\
    \            max_unique_characters = unique_characters.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n\
    \        int unique_chars = 0;\n        for (int i = 0; i < word.length(); i++)\
    \ {\n            if (word.find(word[i]) == i) {\n                unique_chars++;\n\
    \            }\n        }\n        if (unique_chars > max_unique_chars) {\n  \
    \          max_unique_chars = unique_chars;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;", "    std::string max_word = \"\";\n  \
    \  int max_unique_char = 0;\n    for (auto word : words) {\n        std::set<char>\
    \ unique_char;\n        for (auto c : word) {\n            unique_char.insert(c);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (std::string word : words) {\n        std::set<char> unique_chars;\n\
    \        for (char c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_chars.size();\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max_word = \"\";\n    int max_unique_char\
    \ = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::string word\
    \ = words[i];\n        std::set<char> unique_char;\n        for (int j = 0; j\
    \ < word.size(); j++) {\n            unique_char.insert(word[j]);\n        }\n\
    \        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        std::string word = words[i];\n\
    \        std::set<char> unique_char;\n        for (int j = 0; j < word.size();\
    \ j++) {\n            unique_char.insert(word[j]);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_count = 0;\n    for (auto word : words) {\n  \
    \      std::set<char> s;\n        for (auto c : word) {\n            s.insert(c);\n\
    \        }\n        if (s.size() > max_count) {\n            max_count = s.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_char;\n        for (char c : word) {\n\
    \            unique_char.insert(c);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_char;\n        for (auto ch : word) {\n   \
    \         unique_char.insert(ch);\n        }\n        if (unique_char.size() >\
    \ max_unique_char) {\n            max_unique_char = unique_char.size();\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        std::string word = words[i];\n        std::set<char> unique_char;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_char.insert(word[j]);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_count = 0;\n    for\
    \ (auto word : words) {\n        std::set<char> unique_chars;\n        for (auto\
    \ c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max_count = unique_chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word\
    \ = \"\";\n    int max_unique_char = 0;\n    for (auto word : words) {\n     \
    \   std::set<char> unique_char;\n        for (auto c : word) {\n            unique_char.insert(c);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_count = 0;\n    for\
    \ (int i = 0; i < words.size(); i++) {\n        std::string word = words[i];\n\
    \        std::set<char> unique_chars;\n        for (int j = 0; j < word.size();\
    \ j++) {\n            unique_chars.insert(word[j]);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max_count = unique_chars.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string result;\n\
    \    int max = 0;\n    for (auto word : words) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max) {\n            max = count;\n            result = word;\n        }\n\
    \    }\n    return result;", "  std::string max_word = \"\";\n  int max_unique_chars\
    \ = 0;\n  for (std::string word : words) {\n    int unique_chars = 0;\n    for\
    \ (int i = 0; i < word.size(); i++) {\n      if (word.find(word[i]) == i) {\n\
    \        unique_chars++;\n      }\n    }\n    if (unique_chars > max_unique_chars)\
    \ {\n      max_unique_chars = unique_chars;\n      max_word = word;\n    }\n \
    \ }\n  return max_word;", "    std::string max_word;\n    int max_unique_chars\
    \ = 0;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars.size();\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max_word;\n    int max_unique_chars = 0;\n\
    \    for (std::string word : words) {\n        std::set<char> unique_chars;\n\
    \        for (char c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars.size();\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max_word = \"\";\n    int max_unique_characters\
    \ = 0;\n    for (std::string word : words) {\n        int unique_characters =\
    \ 0;\n        for (char c : word) {\n            if (word.find(c) == word.rfind(c))\
    \ {\n                unique_characters++;\n            }\n        }\n        if\
    \ (unique_characters > max_unique_characters) {\n            max_unique_characters\
    \ = unique_characters;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "  std::string max_word = \"\";\n  int max_unique_char = 0;\n  for\
    \ (auto word : words) {\n    std::set<char> unique_char;\n    for (auto c : word)\
    \ {\n      unique_char.insert(c);\n    }\n    if (unique_char.size() > max_unique_char)\
    \ {\n      max_unique_char = unique_char.size();\n      max_word = word;\n   \
    \ }\n  }\n  return max_word;", "    std::string max_word;\n    int max_unique_chars\
    \ = 0;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique_chars) {\n            max_unique_chars\
    \ = unique_chars.size();\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max_word = \"\";\n    int max_unique_char\
    \ = 0;\n    for (std::string word : words) {\n        std::set<char> unique_char;\n\
    \        for (char c : word) {\n            unique_char.insert(c);\n        }\n\
    \        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;", "    std::string max_word = \"\";\n    int max_unique_char = 0;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        std::string word = words[i];\n\
    \        std::set<char> unique_char;\n        for (int j = 0; j < word.size();\
    \ j++) {\n            unique_char.insert(word[j]);\n        }\n        if (unique_char.size()\
    \ > max_unique_char) {\n            max_unique_char = unique_char.size();\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_chars = 0;\n    for (std::string word :\
    \ words) {\n        std::set<char> unique_chars;\n        for (char c : word)\
    \ {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_unique_chars) {\n            max_unique_chars = unique_chars.size();\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_char;\n        for (auto c : word) {\n    \
    \        unique_char.insert(c);\n        }\n        if (unique_char.size() > max_unique_char)\
    \ {\n            max_unique_char = unique_char.size();\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;", "    std::string max_word =\
    \ \"\";\n    int max_unique_chars = 0;\n    for (std::string word : words) {\n\
    \        int unique_chars = 0;\n        for (int i = 0; i < word.length(); i++)\
    \ {\n            bool is_unique = true;\n            for (int j = 0; j < word.length();\
    \ j++) {\n                if (i != j && word[i] == word[j]) {\n              \
    \      is_unique = false;\n                    break;\n                }\n   \
    \         }\n            if (is_unique) {\n                unique_chars++;\n \
    \           }\n        }\n        if (unique_chars > max_unique_chars) {\n   \
    \         max_unique_chars = unique_chars;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;", "  std::string max_word = \"\";\n  int\
    \ max_unique_chars = 0;\n  for (std::string word : words) {\n    std::set<char>\
    \ chars;\n    for (char c : word) {\n      chars.insert(c);\n    }\n    if (chars.size()\
    \ > max_unique_chars) {\n      max_unique_chars = chars.size();\n      max_word\
    \ = word;\n    }\n  }\n  return max_word;", "    int max = 0;\n    std::string\
    \ result;\n    for (int i = 0; i < words.size(); i++) {\n        std::set<char>\
    \ s;\n        for (int j = 0; j < words[i].size(); j++) {\n            s.insert(words[i][j]);\n\
    \        }\n        if (s.size() > max) {\n            max = s.size();\n     \
    \       result = words[i];\n        }\n    }\n    return result;", "    int max_unique_char\
    \ = 0;\n    std::string max_unique_word;\n    for (auto word : words) {\n    \
    \    int unique_char = 0;\n        for (int i = 0; i < word.size(); i++) {\n \
    \           int j;\n            for (j = 0; j < i; j++) {\n                if\
    \ (word[i] == word[j]) {\n                    break;\n                }\n    \
    \        }\n            if (i == j) {\n                unique_char++;\n      \
    \      }\n        }\n        if (unique_char > max_unique_char) {\n          \
    \  max_unique_char = unique_char;\n            max_unique_word = word;\n     \
    \   }\n    }\n    return max_unique_word;", "  std::string max_word = \"\";\n\
    \  int max_unique_chars = 0;\n  for (std::string word : words) {\n    std::set<char>\
    \ unique_chars;\n    for (char c : word) {\n      unique_chars.insert(c);\n  \
    \  }\n    if (unique_chars.size() > max_unique_chars) {\n      max_unique_chars\
    \ = unique_chars.size();\n      max_word = word;\n    }\n  }\n  return max_word;",
  "    std::string max_word = \"\";\n    int max_unique_characters = 0;\n    for (auto\
    \ word : words) {\n        std::set<char> unique_characters;\n        for (auto\
    \ character : word) {\n            unique_characters.insert(character);\n    \
    \    }\n        if (unique_characters.size() > max_unique_characters) {\n    \
    \        max_unique_characters = unique_characters.size();\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    std::string max_word;\n\
    \    int max_unique = 0;\n    for (std::string word : words) {\n        int unique\
    \ = 0;\n        for (char c : word) {\n            if (word.find(c) == word.rfind(c))\
    \ {\n                unique++;\n            }\n        }\n        if (unique >\
    \ max_unique) {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    std::string result;\n    int max_unique\
    \ = 0;\n    for (auto word : words) {\n        std::set<char> unique_chars;\n\
    \        for (auto c : word) {\n            unique_chars.insert(c);\n        }\n\
    \        if (unique_chars.size() > max_unique) {\n            max_unique = unique_chars.size();\n\
    \            result = word;\n        }\n    }\n    return result;", "    std::string\
    \ max_word = \"\";\n    int max_unique_char = 0;\n    for (auto word : words)\
    \ {\n        std::set<char> unique_char;\n        for (auto c : word) {\n    \
    \        unique_char.insert(c);\n        }\n        if (unique_char.size() > max_unique_char)\
    \ {\n            max_unique_char = unique_char.size();\n            max_word =\
    \ word;\n        }\n    }\n    return max_word;", "    std::string max_word =\
    \ \"\";\n    int max_unique_char = 0;\n    for (int i = 0; i < words.size(); i++)\
    \ {\n        std::string word = words[i];\n        std::set<char> unique_char;\n\
    \        for (int j = 0; j < word.size(); j++) {\n            unique_char.insert(word[j]);\n\
    \        }\n        if (unique_char.size() > max_unique_char) {\n            max_unique_char\
    \ = unique_char.size();\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;"]
stop_tokens:
- "\n}"
