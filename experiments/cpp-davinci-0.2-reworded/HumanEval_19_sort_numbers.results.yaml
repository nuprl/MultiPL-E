language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string res = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n  \
    \      if (nums[i] == 0) res += \"zero \";\n        else if (nums[i] == 1) res\
    \ += \"one \";\n        else if (nums[i] == 2) res += \"two \";\n        else\
    \ if (nums[i] == 3) res += \"three \";\n        else if (nums[i] == 4) res +=\
    \ \"four \";\n        else if (nums[i] == 5) res += \"five \";\n        else if\
    \ (nums[i] == 6) res += \"six \";\n        else if (nums[i] == 7) res += \"seven\
    \ \";\n        else if (nums[i] == 8) res += \"eight \";\n        else if (nums[i]\
    \ == 9) res += \"nine \";\n    }\n    return res.substr(0, res.size() - 1);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<std::string> nums;\n\tstd::stringstream ss(numbers);\n\
    \tstd::string temp;\n\twhile (ss >> temp)\n\t\tnums.push_back(temp);\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string ans = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tans += nums[i];\n\t\tif (i != nums.size() - 1)\n\t\t\tans += \"\
    \ \";\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpirn1y23p: /tmp/tmpirn1y23p.cpp:27: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) ans += \" \";\n   \
    \     if (nums[i] == 0) ans += \"zero\";\n        else if (nums[i] == 1) ans +=\
    \ \"one\";\n        else if (nums[i] == 2) ans += \"two\";\n        else if (nums[i]\
    \ == 3) ans += \"three\";\n        else if (nums[i] == 4) ans += \"four\";\n \
    \       else if (nums[i] == 5) ans += \"five\";\n        else if (nums[i] == 6)\
    \ ans += \"six\";\n        else if (nums[i] == 7) ans += \"seven\";\n        else\
    \ if (nums[i] == 8) ans += \"eight\";\n        else if (nums[i] == 9) ans += \"\
    nine\";\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream result;\n    for (auto i : nums) {\n        if (i == 0)\
    \ result << \"zero \";\n        else if (i == 1) result << \"one \";\n       \
    \ else if (i == 2) result << \"two \";\n        else if (i == 3) result << \"\
    three \";\n        else if (i == 4) result << \"four \";\n        else if (i ==\
    \ 5) result << \"five \";\n        else if (i == 6) result << \"six \";\n    \
    \    else if (i == 7) result << \"seven \";\n        else if (i == 8) result <<\
    \ \"eight \";\n        else if (i == 9) result << \"nine \";\n    }\n    return\
    \ result.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmphgurck93: /tmp/tmphgurck93.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result = \"\";\n    for (int i = 0; i < v.size(); i++) {\n    \
    \    if (v[i] == 0) {\n            result += \"zero \";\n        } else if (v[i]\
    \ == 1) {\n            result += \"one \";\n        } else if (v[i] == 2) {\n\
    \            result += \"two \";\n        } else if (v[i] == 3) {\n          \
    \  result += \"three \";\n        } else if (v[i] == 4) {\n            result\
    \ += \"four \";\n        } else if (v[i] == 5) {\n            result += \"five\
    \ \";\n        } else if (v[i] == 6) {\n            result += \"six \";\n    \
    \    } else if (v[i] == 7) {\n            result += \"seven \";\n        } else\
    \ if (v[i] == 8) {\n            result += \"eight \";\n        } else if (v[i]\
    \ == 9) {\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg8kx1evj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpg8kx1evj.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmpg8kx1evj.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpg8kx1evj.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpg8kx1evj.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpg8kx1evj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpg8kx1evj.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n            result +=\
    \ \" \";\n        }\n        if (nums[i] == 0) {\n            result += \"zero\"\
    ;\n        } else if (nums[i] == 1) {\n            result += \"one\";\n      \
    \  } else if (nums[i] == 2) {\n            result += \"two\";\n        } else\
    \ if (nums[i] == 3) {\n            result += \"three\";\n        } else if (nums[i]\
    \ == 4) {\n            result += \"four\";\n        } else if (nums[i] == 5) {\n\
    \            result += \"five\";\n        } else if (nums[i] == 6) {\n       \
    \     result += \"six\";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven\";\n        } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ucn_4_s.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_ucn_4_s.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmp_ucn_4_s.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmp_ucn_4_s.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp_ucn_4_s.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_ucn_4_s.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream result;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        if (i != 0) {\n            result\
    \ << \" \";\n        }\n        if (nums[i] == 0) {\n            result << \"\
    zero\";\n        } else if (nums[i] == 1) {\n            result << \"one\";\n\
    \        } else if (nums[i] == 2) {\n            result << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            result << \"three\";\n        } else if\
    \ (nums[i] == 4) {\n            result << \"four\";\n        } else if (nums[i]\
    \ == 5) {\n            result << \"five\";\n        } else if (nums[i] == 6) {\n\
    \            result << \"six\";\n        } else if (nums[i] == 7) {\n        \
    \    result << \"seven\";\n        } else\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznt1owhw.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpznt1owhw.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpznt1owhw.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpznt1owhw.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpznt1owhw.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpznt1owhw.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream out;\n\
    \    for (auto num : nums) {\n        if (num == 0) out << \"zero \";\n      \
    \  else if (num == 1) out << \"one \";\n        else if (num == 2) out << \"two\
    \ \";\n        else if (num == 3) out << \"three \";\n        else if (num ==\
    \ 4) out << \"four \";\n        else if (num == 5) out << \"five \";\n       \
    \ else if (num == 6) out << \"six \";\n        else if (num == 7) out << \"seven\
    \ \";\n        else if (num == 8) out << \"eight \";\n        else if (num ==\
    \ 9) out << \"nine \";\n    }\n    return out.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpjcv0_81a: /tmp/tmpjcv0_81a.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  switch (nums[i]) {\n            case 0: result += \"zero \"; break;\n     \
    \       case 1: result += \"one \"; break;\n            case 2: result += \"two\
    \ \"; break;\n            case 3: result += \"three \"; break;\n            case\
    \ 4: result += \"four \"; break;\n            case 5: result += \"five \"; break;\n\
    \            case 6: result += \"six \"; break;\n            case 7: result +=\
    \ \"seven \"; break;\n            case 8: result += \"eight \"; break;\n     \
    \       case 9: result += \"nine \"; break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmplhm5dp0c: /tmp/tmplhm5dp0c.cpp:45: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while(ss >> word) {\n        if(word == \"zero\") {\n            v.push_back(0);\n\
    \        } else if(word == \"one\") {\n            v.push_back(1);\n        }\
    \ else if(word == \"two\") {\n            v.push_back(2);\n        } else if(word\
    \ == \"three\") {\n            v.push_back(3);\n        } else if(word == \"four\"\
    ) {\n            v.push_back(4);\n        } else if(word == \"five\") {\n    \
    \        v.push_back(5);\n        } else if(word == \"six\") {\n            v.push_back(6);\n\
    \        } else if(word == \"seven\") {\n            v.push_back(7);\n       \
    \ } else if(word == \"eight\") {\n            v.push_back(8);\n        } else\
    \ if(word == \"nine\") {\n            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result = \"\";\n    for(int i = 0; i < v.size();\
    \ i++) {\n        if(v[i] == 0) {\n            result += \"zero \";\n        }\
    \ else if(v[i] == 1) {\n            result += \"one \";\n        } else if(v[i]\
    \ == 2) {\n            result += \"two \";\n        } else if(v[i] == 3) {\n \
    \           result += \"three \";\n        } else if(v[i] == 4) {\n          \
    \  result += \"four \";\n        } else if(v[i] == 5) {\n            result +=\
    \ \"five \";\n        } else if(v[i] == 6) {\n            result += \"six \";\n\
    \        } else if(v[i] == 7) {\n            result += \"seven \";\n        }\
    \ else if(v[i] == 8) {\n            result += \"eight \";\n        } else if(v[i]\
    \ == 9) {\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwg8z284v.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwg8z284v.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmpwg8z284v.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpwg8z284v.cpp:37:39:\
    \ note: to match this \u2018{\u2019\n   37 |     for(int i = 0; i < v.size();\
    \ i++) {\n      |                                       ^\n/tmp/tmpwg8z284v.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpwg8z284v.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpwg8z284v.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9wvx__4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc9wvx__4.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpc9wvx__4.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpc9wvx__4.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpc9wvx__4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc9wvx__4.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (temp == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (temp == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrdhg4ag.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgrdhg4ag.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpgrdhg4ag.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpgrdhg4ag.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqscdgdem.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqscdgdem.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpqscdgdem.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmpqscdgdem.cpp:80:1: error: expected \u2018}\u2019 at\
    \ end of input\n   80 | }\n      | ^\n/tmp/tmpqscdgdem.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpqscdgdem.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i > 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string result;\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i]\
    \ == 0) {\n            result += \"zero \";\n        }\n        else if(v[i] ==\
    \ 1) {\n            result += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            result += \"two \";\n        }\n        else if(v[i] == 3) {\n\
    \            result += \"three \";\n        }\n        else if(v[i] == 4) {\n\
    \            result += \"four \";\n        }\n        else if(v[i] == 5) {\n \
    \           result += \"five \";\n        }\n        else if(v[i] == 6) {\n  \
    \          result += \"six \";\n        }\n        else if(v[i] == 7) {\n    \
    \        result += \"seven \";\n        }\n        else\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqscdgdem.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqscdgdem.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpqscdgdem.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmpqscdgdem.cpp:80:1: error: expected \u2018}\u2019 at\
    \ end of input\n   80 | }\n      | ^\n/tmp/tmpqscdgdem.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpqscdgdem.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpngfam0ui: /tmp/tmpngfam0ui.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::stringstream result;\n  for (auto num : nums) {\n    if\
    \ (num == 0) {\n      result << \"zero \";\n    } else if (num == 1) {\n     \
    \ result << \"one \";\n    } else if (num == 2) {\n      result << \"two \";\n\
    \    } else if (num == 3) {\n      result << \"three \";\n    } else if (num ==\
    \ 4) {\n      result << \"four \";\n    } else if (num == 5) {\n      result <<\
    \ \"five \";\n    } else if (num == 6) {\n      result << \"six \";\n    } else\
    \ if (num == 7) {\n      result << \"seven \";\n    } else if (num == 8) {\n \
    \     result << \"eight \";\n    } else if (num == 9) {\n      result << \"nine\
    \ \";\n    }\n  }\n  return result.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpw6dc_zql: /tmp/tmpw6dc_zql.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ num : nums) {\n        if (num == 0) {\n            result += \"zero \";\n \
    \       } else if (num == 1) {\n            result += \"one \";\n        } else\
    \ if (num == 2) {\n            result += \"two \";\n        } else if (num ==\
    \ 3) {\n            result += \"three \";\n        } else if (num == 4) {\n  \
    \          result += \"four \";\n        } else if (num == 5) {\n            result\
    \ += \"five \";\n        } else if (num == 6) {\n            result += \"six \"\
    ;\n        } else if (num == 7) {\n            result += \"seven \";\n       \
    \ } else if (num == 8) {\n            result += \"eight \";\n        } else if\
    \ (num == 9) {\n            result += \"nine \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpk4wv8olk: /tmp/tmpk4wv8olk.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    if (temp == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (temp == \"one\") {\n      nums.push_back(1);\n    } else if (temp\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (temp == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (temp == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (temp == \"five\") {\n      nums.push_back(5);\n    } else if (temp\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (temp == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (temp == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (temp == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result = \"\";\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37wh4duv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp37wh4duv.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp37wh4duv.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp37wh4duv.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp37wh4duv.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp37wh4duv.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (temp == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (temp == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string res = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) {\n\t\t\tres += \"zero \";\n\t\t}\n\t\telse if\
    \ (nums[i] == 1) {\n\t\t\tres += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2)\
    \ {\n\t\t\tres += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tres +=\
    \ \"three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tres += \"four\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppkfi1ah9.cpp:60:11: warning: missing terminating \" character\n\
    \   60 |    res += \"four\n      |           ^\n/tmp/tmppkfi1ah9.cpp:60:11: error:\
    \ missing terminating \" character\n   60 |    res += \"four\n      |        \
    \   ^~~~~\n/tmp/tmppkfi1ah9.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppkfi1ah9.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmppkfi1ah9.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmppkfi1ah9.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmppkfi1ah9.cpp:46:40: note: to match\
    \ this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmppkfi1ah9.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmppkfi1ah9.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppkfi1ah9.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string res = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n  \
    \      if (nums[i] == 0) res += \"zero \";\n        else if (nums[i] == 1) res\
    \ += \"one \";\n        else if (nums[i] == 2) res += \"two \";\n        else\
    \ if (nums[i] == 3) res += \"three \";\n        else if (nums[i] == 4) res +=\
    \ \"four \";\n        else if (nums[i] == 5) res += \"five \";\n        else if\
    \ (nums[i] == 6) res += \"six \";\n        else if (nums[i] == 7) res += \"seven\
    \ \";\n        else if (nums[i] == 8) res += \"eight \";\n        else if (nums[i]\
    \ == 9) res += \"nine \";\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpfz9rw6xf: /tmp/tmpfz9rw6xf.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string res = \"\";\n    for(int i = 0; i < v.size(); i++) {\n      \
    \  if(v[i] == 0) {\n            res += \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            res += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            res += \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           res += \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        res += \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    res += \"five \";\n        }\n        else if(v[i] == 6) {\n            res\
    \ += \"six \";\n        }\n        else if(v[i] == 7) {\n            res += \"\
    seven \";\n        }\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatnhx703.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpatnhx703.cpp:73:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpatnhx703.cpp:80:1:\
    \ error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpatnhx703.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpatnhx703.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result += \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result += \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result += \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result += \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result += \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result += \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ += \"five\";\n        } else if (nums[i] == 6) {\n            result += \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result += \"seven\";\n    \
    \    } else if\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9wvx__4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc9wvx__4.cpp:58:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n      | (\n/tmp/tmpc9wvx__4.cpp:59:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   59 |\
    \ int main() {\n      |            ^\n/tmp/tmpc9wvx__4.cpp:66:1: error: expected\
    \ \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpc9wvx__4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc9wvx__4.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < v.size(); i++) {\n      \
    \  if(v[i] == 0) {\n            ans += \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            ans += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            ans += \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           ans += \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        ans += \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    ans += \"five \";\n        }\n        else if(v[i] == 6) {\n            ans\
    \ += \"six \";\n        }\n        else if(v[i] == 7) {\n            ans += \"\
    seven \";\n        }\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_a5vwc8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu_a5vwc8.cpp:73:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpu_a5vwc8.cpp:80:1:\
    \ error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpu_a5vwc8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu_a5vwc8.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (auto i : v) {\n        if (i == 0) {\n      \
    \      result += \"zero \";\n        } else if (i == 1) {\n            result\
    \ += \"one \";\n        } else if (i == 2) {\n            result += \"two \";\n\
    \        } else if (i == 3) {\n            result += \"three \";\n        } else\
    \ if (i == 4) {\n            result += \"four \";\n        } else if (i == 5)\
    \ {\n            result += \"five \";\n        } else if (i == 6) {\n        \
    \    result += \"six \";\n        } else if (i == 7) {\n            result +=\
    \ \"seven \";\n        } else if (i == 8) {\n            result += \"eight \"\
    ;\n        } else if (i == 9) {\n            result += \"nine \";\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp4szjg4xd: /tmp/tmp4szjg4xd.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> vec;\n    while(ss >> token) {\n        if(token == \"zero\"\
    ) {\n            vec.push_back(0);\n        } else if(token == \"one\") {\n  \
    \          vec.push_back(1);\n        } else if(token == \"two\") {\n        \
    \    vec.push_back(2);\n        } else if(token == \"three\") {\n            vec.push_back(3);\n\
    \        } else if(token == \"four\") {\n            vec.push_back(4);\n     \
    \   } else if(token == \"five\") {\n            vec.push_back(5);\n        } else\
    \ if(token == \"six\") {\n            vec.push_back(6);\n        } else if(token\
    \ == \"seven\") {\n            vec.push_back(7);\n        } else if(token == \"\
    eight\") {\n            vec.push_back(8);\n        } else if(token == \"nine\"\
    ) {\n            vec.push_back(9);\n        }\n    }\n    std::sort(vec.begin(),\
    \ vec.end());\n    std::string result;\n    for(int i = 0; i < vec.size(); i++)\
    \ {\n        if(vec[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if(vec[i] == 1) {\n            result += \"one \";\n        } else if(vec[i]\
    \ == 2) {\n            result += \"two \";\n        } else if(vec[i] == 3) {\n\
    \            result += \"three \";\n        } else if(vec[i] == 4) {\n       \
    \     result += \"four \";\n        } else if(vec[i] == 5) {\n            result\
    \ += \"five \";\n        } else if(vec[i] == 6) {\n            result += \"six\
    \ \";\n        } else if(vec[i] == 7) {\n            result += \"seven \";\n \
    \       } else if(vec[i] == 8) {\n            result += \"eight \";\n        }\
    \ else if(vec[i] == 9) {\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph4k0rywt.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmph4k0rywt.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmph4k0rywt.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmph4k0rywt.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |     for(int i = 0; i < vec.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmph4k0rywt.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmph4k0rywt.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmph4k0rywt.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    if (temp == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (temp == \"one\") {\n      nums.push_back(1);\n    } else if (temp\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (temp == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (temp == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (temp == \"five\") {\n      nums.push_back(5);\n    } else if (temp\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (temp == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (temp == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (temp == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7ew3t5e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpi7ew3t5e.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpi7ew3t5e.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpi7ew3t5e.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkevouhlr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkevouhlr.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpkevouhlr.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpkevouhlr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i != 0) {\n            result << \" \";\n        }\n   \
    \     if (nums[i] == 0) {\n            result << \"zero\";\n        } else if\
    \ (nums[i] == 1) {\n            result << \"one\";\n        } else if (nums[i]\
    \ == 2) {\n            result << \"two\";\n        } else if (nums[i] == 3) {\n\
    \            result << \"three\";\n        } else if (nums[i] == 4) {\n      \
    \      result << \"four\";\n        } else if (nums[i] == 5) {\n            result\
    \ << \"five\";\n        } else if (nums[i] == 6) {\n            result << \"six\"\
    ;\n        } else if (nums[i] == 7) {\n            result << \"seven\";\n    \
    \    } else\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbi69zapo.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbi69zapo.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpbi69zapo.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpbi69zapo.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpbi69zapo.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpbi69zapo.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (temp == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (temp == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrdhg4ag.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgrdhg4ag.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpgrdhg4ag.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpgrdhg4ag.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgrdhg4ag.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (auto i : nums) {\n        switch (i) {\n  \
    \          case 0: result += \"zero \"; break;\n            case 1: result +=\
    \ \"one \"; break;\n            case 2: result += \"two \"; break;\n         \
    \   case 3: result += \"three \"; break;\n            case 4: result += \"four\
    \ \"; break;\n            case 5: result += \"five \"; break;\n            case\
    \ 6: result += \"six \"; break;\n            case 7: result += \"seven \"; break;\n\
    \            case 8: result += \"eight \"; break;\n            case 9: result\
    \ += \"nine \"; break;\n        }\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> nums;\n    while (std::getline(ss, token, ' ')) {\n       \
    \ if (token == \"zero\") {\n            nums.push_back(0);\n        } else if\
    \ (token == \"one\") {\n            nums.push_back(1);\n        } else if (token\
    \ == \"two\") {\n            nums.push_back(2);\n        } else if (token == \"\
    three\") {\n            nums.push_back(3);\n        } else if (token == \"four\"\
    ) {\n            nums.push_back(4);\n        } else if (token == \"five\") {\n\
    \            nums.push_back(5);\n        } else if (token == \"six\") {\n    \
    \        nums.push_back(6);\n        } else if (token == \"seven\") {\n      \
    \      nums.push_back(7);\n        } else if (token == \"eight\") {\n        \
    \    nums.push_back(8);\n        } else if (token == \"nine\") {\n           \
    \ nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) {\n            result += \" \";\n        }\n        if (nums[i]\
    \ == 0) {\n            result += \"zero\";\n        } else if (nums[i] == 1) {\n\
    \            result += \"one\";\n        } else if (nums[i] == 2) {\n        \
    \    result += \"two\";\n        } else if (nums[i] == 3) {\n            result\
    \ += \"three\";\n        } else if (nums[i] == 4) {\n            result += \"\
    four\";\n        } else if (nums[i] == 5) {\n            result += \"five\";\n\
    \        } else if (nums[i] == 6) {\n            result += \"six\";\n        }\
    \ else if (nums[i] == 7) {\n            result +=\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_854uqh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmph_854uqh.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmph_854uqh.cpp:58:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   58 | int main() {\n     \
    \ |            ^\n/tmp/tmph_854uqh.cpp:65:1: error: expected \u2018}\u2019 at\
    \ end of input\n   65 | }\n      | ^\n/tmp/tmph_854uqh.cpp:37:43: note: to match\
    \ this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmph_854uqh.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmph_854uqh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmph_854uqh.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) ans += \"zero \";\n     \
    \   else if(v[i] == 1) ans += \"one \";\n        else if(v[i] == 2) ans += \"\
    two \";\n        else if(v[i] == 3) ans += \"three \";\n        else if(v[i] ==\
    \ 4) ans += \"four \";\n        else if(v[i] == 5) ans += \"five \";\n       \
    \ else if(v[i] == 6) ans += \"six \";\n        else if(v[i] == 7) ans += \"seven\
    \ \";\n        else if(v[i] == 8) ans += \"eight \";\n        else if(v[i] ==\
    \ 9) ans += \"nine \";\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmph6nui5mh: /tmp/tmph6nui5mh.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ result;\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) result\
    \ += \" \";\n        if (v[i] == 0) result += \"zero\";\n        else if (v[i]\
    \ == 1) result += \"one\";\n        else if (v[i] == 2) result += \"two\";\n \
    \       else if (v[i] == 3) result += \"three\";\n        else if (v[i] == 4)\
    \ result += \"four\";\n        else if (v[i] == 5) result += \"five\";\n     \
    \   else if (v[i] == 6) result += \"six\";\n        else if (v[i] == 7) result\
    \ += \"seven\";\n        else if (v[i] == 8) result += \"eight\";\n        else\
    \ if (v[i] == 9) result += \"nine\";\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result\
    \ += \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpngfam0ui: /tmp/tmpngfam0ui.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ num : nums) {\n        if (num == 0) {\n            result += \"zero \";\n \
    \       } else if (num == 1) {\n            result += \"one \";\n        } else\
    \ if (num == 2) {\n            result += \"two \";\n        } else if (num ==\
    \ 3) {\n            result += \"three \";\n        } else if (num == 4) {\n  \
    \          result += \"four \";\n        } else if (num == 5) {\n            result\
    \ += \"five \";\n        } else if (num == 6) {\n            result += \"six \"\
    ;\n        } else if (num == 7) {\n            result += \"seven \";\n       \
    \ } else if (num == 8) {\n            result += \"eight \";\n        } else if\
    \ (num == 9) {\n            result += \"nine \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpk4wv8olk: /tmp/tmpk4wv8olk.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) result += \"zero \";\n\t\telse if (nums[i] == 1) result\
    \ += \"one \";\n\t\telse if (nums[i] == 2) result += \"two \";\n\t\telse if (nums[i]\
    \ == 3) result += \"three \";\n\t\telse if (nums[i] == 4) result += \"four \"\
    ;\n\t\telse if (nums[i] == 5) result += \"five \";\n\t\telse if (nums[i] == 6)\
    \ result += \"six \";\n\t\telse if (nums[i] == 7) result += \"seven \";\n\t\t\
    else if (nums[i] == 8) result += \"eight \";\n\t\telse if (nums[i] == 9) result\
    \ += \"nine \";\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpm93q_7nh: /tmp/tmpm93q_7nh.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> v;\n    std::stringstream ss(numbers);\n  \
    \  std::string word;\n    while(ss >> word) {\n        if(word == \"zero\") {\n\
    \            v.push_back(0);\n        } else if(word == \"one\") {\n         \
    \   v.push_back(1);\n        } else if(word == \"two\") {\n            v.push_back(2);\n\
    \        } else if(word == \"three\") {\n            v.push_back(3);\n       \
    \ } else if(word == \"four\") {\n            v.push_back(4);\n        } else if(word\
    \ == \"five\") {\n            v.push_back(5);\n        } else if(word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if(word == \"seven\") {\n   \
    \         v.push_back(7);\n        } else if(word == \"eight\") {\n          \
    \  v.push_back(8);\n        } else if(word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n\
    \    for(int i = 0; i < v.size(); i++) {\n        if(v[i] == 0) {\n          \
    \  result += \"zero \";\n        } else if(v[i] == 1) {\n            result +=\
    \ \"one \";\n        } else if(v[i] == 2) {\n            result += \"two \";\n\
    \        } else if(v[i] == 3) {\n            result += \"three \";\n        }\
    \ else if(v[i] == 4) {\n            result += \"four \";\n        } else if(v[i]\
    \ == 5) {\n            result += \"five \";\n        } else if(v[i] == 6) {\n\
    \            result += \"six \";\n        } else if(v[i] == 7) {\n           \
    \ result += \"seven \";\n        } else if(v[i] == 8) {\n            result +=\
    \ \"eight \";\n        } else if(v[i] == 9) {\n           \n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__vixggm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp__vixggm.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmp__vixggm.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp__vixggm.cpp:37:39:\
    \ note: to match this \u2018{\u2019\n   37 |     for(int i = 0; i < v.size();\
    \ i++) {\n      |                                       ^\n/tmp/tmp__vixggm.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp__vixggm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp__vixggm.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<std::string> nums;\n  std::stringstream ss(numbers);\n\
    \  std::string temp;\n  while (ss >> temp) {\n    nums.push_back(temp);\n  }\n\
    \  std::sort(nums.begin(), nums.end());\n  std::stringstream ss2;\n  for (auto\
    \ i : nums) {\n    ss2 << i << \" \";\n  }\n  return ss2.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpt16w4clt: /tmp/tmpt16w4clt.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ans += nums[i] + \" \";\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp4_ongfgs: /tmp/tmp4_ongfgs.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") nums.push_back(0);\n\
    \t\telse if (word == \"one\") nums.push_back(1);\n\t\telse if (word == \"two\"\
    ) nums.push_back(2);\n\t\telse if (word == \"three\") nums.push_back(3);\n\t\t\
    else if (word == \"four\") nums.push_back(4);\n\t\telse if (word == \"five\")\
    \ nums.push_back(5);\n\t\telse if (word == \"six\") nums.push_back(6);\n\t\telse\
    \ if (word == \"seven\") nums.push_back(7);\n\t\telse if (word == \"eight\") nums.push_back(8);\n\
    \t\telse if (word == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string ans = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) ans += \"zero \";\n\t\telse if (nums[i] == 1)\
    \ ans += \"one \";\n\t\telse if (nums[i] == 2) ans += \"two \";\n\t\telse if (nums[i]\
    \ == 3) ans += \"three \";\n\t\telse if (nums[i] == 4) ans += \"four \";\n\t\t\
    else if (nums[i] == 5) ans += \"five \";\n\t\telse if (nums[i] == 6) ans += \"\
    six \";\n\t\telse if (nums[i] == 7) ans += \"seven \";\n\t\telse if (nums[i] ==\
    \ 8) ans += \"eight \";\n\t\telse if (nums[i] == 9) ans += \"nine \";\n\t}\n\t\
    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpy4ku6i0x: /tmp/tmpy4ku6i0x.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") nums.push_back(0);\n\
    \t\telse if (temp == \"one\") nums.push_back(1);\n\t\telse if (temp == \"two\"\
    ) nums.push_back(2);\n\t\telse if (temp == \"three\") nums.push_back(3);\n\t\t\
    else if (temp == \"four\") nums.push_back(4);\n\t\telse if (temp == \"five\")\
    \ nums.push_back(5);\n\t\telse if (temp == \"six\") nums.push_back(6);\n\t\telse\
    \ if (temp == \"seven\") nums.push_back(7);\n\t\telse if (temp == \"eight\") nums.push_back(8);\n\
    \t\telse if (temp == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) result += \"zero \";\n\t\telse if (nums[i] == 1) result\
    \ += \"one \";\n\t\telse if (nums[i] == 2) result += \"two \";\n\t\telse if (nums[i]\
    \ == 3) result += \"three \";\n\t\telse if (nums[i] == 4) result += \"four \"\
    ;\n\t\telse if (nums[i] == 5) result += \"five \";\n\t\telse if (nums[i] == 6)\
    \ result += \"six \";\n\t\telse if (nums[i] == 7) result += \"seven \";\n\t\t\
    else if (nums[i] == 8) result += \"eight \";\n\t\telse if (nums[i] == 9) result\
    \ += \"nine \";\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp2zomih1h: /tmp/tmp2zomih1h.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"zero\") {\n            nums.push_back(0);\n        } else if (token\
    \ == \"one\") {\n            nums.push_back(1);\n        } else if (token == \"\
    two\") {\n            nums.push_back(2);\n        } else if (token == \"three\"\
    ) {\n            nums.push_back(3);\n        } else if (token == \"four\") {\n\
    \            nums.push_back(4);\n        } else if (token == \"five\") {\n   \
    \         nums.push_back(5);\n        } else if (token == \"six\") {\n       \
    \     nums.push_back(6);\n        } else if (token == \"seven\") {\n         \
    \   nums.push_back(7);\n        } else if (token == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (token == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] ==\
    \ 0) {\n            result += \"zero \";\n        } else if (nums[i] == 1) {\n\
    \            result += \"one \";\n        } else if (nums[i] == 2) {\n       \
    \     result += \"two \";\n        } else if (nums[i] == 3) {\n            result\
    \ += \"three \";\n        } else if (nums[i] == 4) {\n            result += \"\
    four \";\n        } else if (nums[i] == 5) {\n            result += \"five \"\
    ;\n        } else if (nums[i] == 6) {\n            result += \"six \";\n     \
    \   } else if (nums[i] == 7) {\n            result += \"seven \";\n        } else\
    \ if (\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6iqn_p38.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6iqn_p38.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp6iqn_p38.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmp6iqn_p38.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmp6iqn_p38.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmp6iqn_p38.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp6iqn_p38.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6iqn_p38.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream out;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            out\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            out << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            out << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            out << \"three\";\n        } else if (nums[i]\
    \ == 4) {\n            out << \"four\";\n        } else if (nums[i] == 5) {\n\
    \            out << \"five\";\n        } else if (nums[i] == 6) {\n          \
    \  out << \"six\";\n        } else if (nums[i] == 7) {\n            out << \"\
    seven\";\n        } else if (nums[i] == 8) {\n            out << \"eight\";\n\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4njqog9f.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp4njqog9f.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmp4njqog9f.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp4njqog9f.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp4njqog9f.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp4njqog9f.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp4njqog9f.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") nums.push_back(0);\n\
    \t\telse if (temp == \"one\") nums.push_back(1);\n\t\telse if (temp == \"two\"\
    ) nums.push_back(2);\n\t\telse if (temp == \"three\") nums.push_back(3);\n\t\t\
    else if (temp == \"four\") nums.push_back(4);\n\t\telse if (temp == \"five\")\
    \ nums.push_back(5);\n\t\telse if (temp == \"six\") nums.push_back(6);\n\t\telse\
    \ if (temp == \"seven\") nums.push_back(7);\n\t\telse if (temp == \"eight\") nums.push_back(8);\n\
    \t\telse if (temp == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) result += \"zero \";\n\t\telse if (nums[i] == 1) result\
    \ += \"one \";\n\t\telse if (nums[i] == 2) result += \"two \";\n\t\telse if (nums[i]\
    \ == 3) result += \"three \";\n\t\telse if (nums[i] == 4) result += \"four \"\
    ;\n\t\telse if (nums[i] == 5) result += \"five \";\n\t\telse if (nums[i] == 6)\
    \ result += \"six \";\n\t\telse if (nums[i] == 7) result += \"seven \";\n\t\t\
    else if (nums[i] == 8) result += \"eight \";\n\t\telse if (nums[i] == 9) result\
    \ += \"nine \";\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp2zomih1h: /tmp/tmp2zomih1h.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (token == \"zero\"\
    ) {\n\t\t\tnums.push_back(0);\n\t\t}\n\t\telse if (token == \"one\") {\n\t\t\t\
    nums.push_back(1);\n\t\t}\n\t\telse if (token == \"two\") {\n\t\t\tnums.push_back(2);\n\
    \t\t}\n\t\telse if (token == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\
    \telse if (token == \"four\") {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if\
    \ (token == \"five\") {\n\t\t\tnums.push_back(5);\n\t\t}\n\t\telse if (token ==\
    \ \"six\") {\n\t\t\tnums.push_back(6);\n\t\t}\n\t\telse if (token == \"seven\"\
    ) {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\telse if (token == \"eight\") {\n\t\t\
    \tnums.push_back(8);\n\t\t}\n\t\telse if (token == \"nine\") {\n\t\t\tnums.push_back(9);\n\
    \t\t}\n\t}\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result = \"\"\
    ;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] == 0) {\n\t\t\t\
    result += \"zero \";\n\t\t}\n\t\telse if (nums[i] == 1) {\n\t\t\tresult += \"\
    one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\tresult += \"two \";\n\t\t\
    }\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"three \";\n\t\t}\n\t\telse\
    \ if (nums[i] == 4) {\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzu3fyeh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxzu3fyeh.cpp:61:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   61 | int main() {\n      |            ^\n/tmp/tmpxzu3fyeh.cpp:68:1:\
    \ error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpxzu3fyeh.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpxzu3fyeh.cpp:68:1:\
    \ error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpxzu3fyeh.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxzu3fyeh.cpp:68:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   68 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> v;\n    std::stringstream ss(numbers);\n  \
    \  std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (temp == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (temp == \"two\") {\n            v.push_back(2);\n\
    \        } else if (temp == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (temp == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (temp == \"five\") {\n            v.push_back(5);\n        } else if (temp\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (temp == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (temp == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (temp == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtstbz6w.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwtstbz6w.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpwtstbz6w.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpwtstbz6w.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpwtstbz6w.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpwtstbz6w.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpwtstbz6w.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<int>\
    \ v;\n    while(ss >> temp) {\n        if(temp == \"zero\") v.push_back(0);\n\
    \        else if(temp == \"one\") v.push_back(1);\n        else if(temp == \"\
    two\") v.push_back(2);\n        else if(temp == \"three\") v.push_back(3);\n \
    \       else if(temp == \"four\") v.push_back(4);\n        else if(temp == \"\
    five\") v.push_back(5);\n        else if(temp == \"six\") v.push_back(6);\n  \
    \      else if(temp == \"seven\") v.push_back(7);\n        else if(temp == \"\
    eight\") v.push_back(8);\n        else if(temp == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) ans += \"zero \";\n     \
    \   else if(v[i] == 1) ans += \"one \";\n        else if(v[i] == 2) ans += \"\
    two \";\n        else if(v[i] == 3) ans += \"three \";\n        else if(v[i] ==\
    \ 4) ans += \"four \";\n        else if(v[i] == 5) ans += \"five \";\n       \
    \ else if(v[i] == 6) ans += \"six \";\n        else if(v[i] == 7) ans += \"seven\
    \ \";\n        else if(v[i] == 8) ans += \"eight \";\n        else if(v[i] ==\
    \ 9) ans += \"nine \";\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpx8rfvoa0: /tmp/tmpx8rfvoa0.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::vector<int> nums;\n   \
    \ std::stringstream ss(numbers);\n    std::string temp;\n    while (ss >> temp)\
    \ {\n        if (temp == \"zero\") {\n            nums.push_back(0);\n       \
    \ } else if (temp == \"one\") {\n            nums.push_back(1);\n        } else\
    \ if (temp == \"two\") {\n            nums.push_back(2);\n        } else if (temp\
    \ == \"three\") {\n            nums.push_back(3);\n        } else if (temp ==\
    \ \"four\") {\n            nums.push_back(4);\n        } else if (temp == \"five\"\
    ) {\n            nums.push_back(5);\n        } else if (temp == \"six\") {\n \
    \           nums.push_back(6);\n        } else if (temp == \"seven\") {\n    \
    \        nums.push_back(7);\n        } else if (temp == \"eight\") {\n       \
    \     nums.push_back(8);\n        } else if (temp == \"nine\") {\n           \
    \ nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n  \
    \          result += \"zero \";\n        } else if (nums[i] == 1) {\n        \
    \    result += \"one \";\n        } else if (nums[i] == 2) {\n            result\
    \ += \"two \";\n        } else if (nums[i] == 3) {\n            result += \"three\
    \ \";\n        } else if (nums[i] == 4) {\n            result += \"four \";\n\
    \        } else if (nums[i] == 5) {\n            result += \"five \";\n      \
    \  } else if (nums[i] == 6) {\n            result += \"six \";\n        } else\
    \ if (nums[i] == 7) {\n            result += \"seven \";\n        } else if (nums[i]\
    \ == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7mpgqyc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpk7mpgqyc.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpk7mpgqyc.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpk7mpgqyc.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpk7mpgqyc.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpk7mpgqyc.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (i > 0) {\n            result << \" \";\n        }\n    \
    \    if (nums[i] == 0) {\n            result << \"zero\";\n        } else if (nums[i]\
    \ == 1) {\n            result << \"one\";\n        } else if (nums[i] == 2) {\n\
    \            result << \"two\";\n        } else if (nums[i] == 3) {\n        \
    \    result << \"three\";\n        } else if (nums[i] == 4) {\n            result\
    \ << \"four\";\n        } else if (nums[i] == 5) {\n            result << \"five\"\
    ;\n        } else if (nums[i] == 6) {\n            result << \"six\";\n      \
    \  } else if (nums[i] == 7) {\n            result << \"seven\";\n        } else\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmn_vjx9e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpmn_vjx9e.cpp:58:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   58 | }\n      | ^\n/tmp/tmpmn_vjx9e.cpp:59:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   59 | int main() {\n     \
    \ |            ^\n/tmp/tmpmn_vjx9e.cpp:66:1: error: expected \u2018}\u2019 at\
    \ end of input\n   66 | }\n      | ^\n/tmp/tmpmn_vjx9e.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpmn_vjx9e.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ v;\n    while(ss >> word) {\n        if(word == \"zero\") v.push_back(0);\n\
    \        else if(word == \"one\") v.push_back(1);\n        else if(word == \"\
    two\") v.push_back(2);\n        else if(word == \"three\") v.push_back(3);\n \
    \       else if(word == \"four\") v.push_back(4);\n        else if(word == \"\
    five\") v.push_back(5);\n        else if(word == \"six\") v.push_back(6);\n  \
    \      else if(word == \"seven\") v.push_back(7);\n        else if(word == \"\
    eight\") v.push_back(8);\n        else if(word == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n    for(int\
    \ i = 0; i < v.size(); i++) {\n        if(v[i] == 0) res += \"zero \";\n     \
    \   else if(v[i] == 1) res += \"one \";\n        else if(v[i] == 2) res += \"\
    two \";\n        else if(v[i] == 3) res += \"three \";\n        else if(v[i] ==\
    \ 4) res += \"four \";\n        else if(v[i] == 5) res += \"five \";\n       \
    \ else if(v[i] == 6) res += \"six \";\n        else if(v[i] == 7) res += \"seven\
    \ \";\n        else if(v[i] == 8) res += \"eight \";\n        else if(v[i] ==\
    \ 9) res += \"nine \";\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp97r_w1sv: /tmp/tmp97r_w1sv.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse\
    \ if (nums[i] == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 2) {\n\t\t\tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\
    \tresult += \"three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult +=\
    \ \"four\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k7zj9li.cpp:60:14: warning: missing terminating \" character\n\
    \   60 |    result += \"four\n      |              ^\n/tmp/tmp3k7zj9li.cpp:60:14:\
    \ error: missing terminating \" character\n   60 |    result += \"four\n     \
    \ |              ^~~~~\n/tmp/tmp3k7zj9li.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp3k7zj9li.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp3k7zj9li.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmp3k7zj9li.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmp3k7zj9li.cpp:46:40: note: to match\
    \ this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmp3k7zj9li.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp3k7zj9li.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp3k7zj9li.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        nums.push_back(word);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss2 << nums[i] << \" \"\
    ;\n    }\n    return ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmps0nuzakc: /tmp/tmps0nuzakc.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::map<std::string, int> num_map = {{\"zero\", 0}, {\"one\"\
    , 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6},\
    \ {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::vector<int> num_vec;\n\
    \    std::stringstream ss(numbers);\n    std::string temp;\n    while (ss >> temp)\
    \ {\n        num_vec.push_back(num_map[temp]);\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result;\n    for (auto i : num_vec) {\n   \
    \     for (auto j : num_map) {\n            if (j.second == i) {\n           \
    \     result += j.first + \" \";\n            }\n        }\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Your code here\n    std::vector<int> nums;\n    std::stringstream\
    \ ss(numbers);\n    std::string word;\n    while(ss >> word) {\n        if(word\
    \ == \"zero\") {\n            nums.push_back(0);\n        }\n        else if(word\
    \ == \"one\") {\n            nums.push_back(1);\n        }\n        else if(word\
    \ == \"two\") {\n            nums.push_back(2);\n        }\n        else if(word\
    \ == \"three\") {\n            nums.push_back(3);\n        }\n        else if(word\
    \ == \"four\") {\n            nums.push_back(4);\n        }\n        else if(word\
    \ == \"five\") {\n            nums.push_back(5);\n        }\n        else if(word\
    \ == \"six\") {\n            nums.push_back(6);\n        }\n        else if(word\
    \ == \"seven\") {\n            nums.push_back(7);\n        }\n        else if(word\
    \ == \"eight\") {\n            nums.push_back(8);\n        }\n        else if(word\
    \ == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for(int i = 0; i < nums.size();\
    \ i++) {\n        if(nums[i] == 0) {\n            result += \"zero \";\n     \
    \   }\n        else if(nums[i] == 1) {\n            result += \"one \";\n    \
    \    }\n        else if(nums[i] == 2) {\n            result += \"two \";\n   \
    \     }\n        else if(nums[i] == 3) {\n            result += \"three \";\n\
    \        }\n        else if(nums[i] == 4) {\n            result += \"four \";\n\
    \        }\n        else if(nums[i] == 5) {\n            result += \"five \";\n\
    \        }\n        else if(nums[i] == 6) {\n            result += \"six \";\n\
    \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpklps4_p7.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpklps4_p7.cpp:70:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   70 | int main() {\n      |            ^\n/tmp/tmpklps4_p7.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpklps4_p7.cpp:47:42:\
    \ note: to match this \u2018{\u2019\n   47 |     for(int i = 0; i < nums.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmpklps4_p7.cpp:77:1:\
    \ error: expected \u2018}\u2019 at end of input\n   77 | }\n      | ^\n/tmp/tmpklps4_p7.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpklps4_p7.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   77 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::stringstream ss(numbers);\n  std::string word;\n  std::vector<int>\
    \ nums;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result = \"\";\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jvmnb7e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2jvmnb7e.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmp2jvmnb7e.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmp2jvmnb7e.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmp2jvmnb7e.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp2jvmnb7e.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            ss2\
    \ << \"zero \";\n        } else if (nums[i] == 1) {\n            ss2 << \"one\
    \ \";\n        } else if (nums[i] == 2) {\n            ss2 << \"two \";\n    \
    \    } else if (nums[i] == 3) {\n            ss2 << \"three \";\n        } else\
    \ if (nums[i] == 4) {\n            ss2 << \"four \";\n        } else if (nums[i]\
    \ == 5) {\n            ss2 << \"five \";\n        } else if (nums[i] == 6) {\n\
    \            ss2 << \"six \";\n        } else if (nums[i] == 7) {\n          \
    \  ss2 << \"seven \";\n        } else if (\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor7hbf53.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpor7hbf53.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpor7hbf53.cpp:54:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   55 | }\n      | ~\
    \                   \n/tmp/tmpor7hbf53.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpor7hbf53.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpor7hbf53.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpor7hbf53.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpor7hbf53.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result\
    \ += \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp)\n        nums.push_back(temp);\n\
    \    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ it = nums.begin(); it != nums.end(); it++) {\n        result += *it;\n     \
    \   if (it != nums.end() - 1)\n            result += \" \";\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpxsfoovit: /tmp/tmpxsfoovit.cpp:27: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        if (i != 0) result += \" \"\
    ;\n        if (nums[i] == 0) result += \"zero\";\n        else if (nums[i] ==\
    \ 1) result += \"one\";\n        else if (nums[i] == 2) result += \"two\";\n \
    \       else if (nums[i] == 3) result += \"three\";\n        else if (nums[i]\
    \ == 4) result += \"four\";\n        else if (nums[i] == 5) result += \"five\"\
    ;\n        else if (nums[i] == 6) result += \"six\";\n        else if (nums[i]\
    \ == 7) result += \"seven\";\n        else if (nums[i] == 8) result += \"eight\"\
    ;\n        else if (nums[i] == 9) result += \"nine\";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        nums.push_back(item);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i];\n     \
    \   if (i != nums.size() - 1) {\n            result += \" \";\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpm5_303v0: /tmp/tmpm5_303v0.cpp:29: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        if (i == 0) result += \"zero \";\n        else\
    \ if (i == 1) result += \"one \";\n        else if (i == 2) result += \"two \"\
    ;\n        else if (i == 3) result += \"three \";\n        else if (i == 4) result\
    \ += \"four \";\n        else if (i == 5) result += \"five \";\n        else if\
    \ (i == 6) result += \"six \";\n        else if (i == 7) result += \"seven \"\
    ;\n        else if (i == 8) result += \"eight \";\n        else if (i == 9) result\
    \ += \"nine \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        nums.push_back(token);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i];\n     \
    \   if (i != nums.size() - 1) {\n            result += \" \";\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpzb41jad3: /tmp/tmpzb41jad3.cpp:29: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpev7v991g.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpev7v991g.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") nums.push_back(0);\n\
    \t\telse if (temp == \"one\") nums.push_back(1);\n\t\telse if (temp == \"two\"\
    ) nums.push_back(2);\n\t\telse if (temp == \"three\") nums.push_back(3);\n\t\t\
    else if (temp == \"four\") nums.push_back(4);\n\t\telse if (temp == \"five\")\
    \ nums.push_back(5);\n\t\telse if (temp == \"six\") nums.push_back(6);\n\t\telse\
    \ if (temp == \"seven\") nums.push_back(7);\n\t\telse if (temp == \"eight\") nums.push_back(8);\n\
    \t\telse if (temp == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::stringstream ret;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (i != 0) ret << \" \";\n\t\tif (nums[i] == 0) ret << \"zero\";\n\t\
    \telse if (nums[i] == 1) ret << \"one\";\n\t\telse if (nums[i] == 2) ret << \"\
    two\";\n\t\telse if (nums[i] == 3) ret << \"three\";\n\t\telse if (nums[i] ==\
    \ 4) ret << \"four\";\n\t\telse if (nums[i] == 5) ret << \"five\";\n\t\telse if\
    \ (nums[i] == 6) ret << \"six\";\n\t\telse if (nums[i] == 7) ret << \"seven\"\
    ;\n\t\telse if (nums[i] == 8) ret << \"eight\";\n\t\telse if (nums[i] == 9) ret\
    \ << \"nine\";\n\t}\n\treturn ret.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string token;\n   \
    \ std::vector<int> nums;\n    while (std::getline(ss, token, ' ')) {\n       \
    \ if (token == \"zero\") {\n            nums.push_back(0);\n        } else if\
    \ (token == \"one\") {\n            nums.push_back(1);\n        } else if (token\
    \ == \"two\") {\n            nums.push_back(2);\n        } else if (token == \"\
    three\") {\n            nums.push_back(3);\n        } else if (token == \"four\"\
    ) {\n            nums.push_back(4);\n        } else if (token == \"five\") {\n\
    \            nums.push_back(5);\n        } else if (token == \"six\") {\n    \
    \        nums.push_back(6);\n        } else if (token == \"seven\") {\n      \
    \      nums.push_back(7);\n        } else if (token == \"eight\") {\n        \
    \    nums.push_back(8);\n        } else if (token == \"nine\") {\n           \
    \ nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) {\n            result += \" \";\n        }\n        if (nums[i]\
    \ == 0) {\n            result += \"zero\";\n        } else if (nums[i] == 1) {\n\
    \            result += \"one\";\n        } else if (nums[i] == 2) {\n        \
    \    result += \"two\";\n        } else if (nums[i] == 3) {\n            result\
    \ += \"three\";\n        } else if (nums[i] == 4) {\n            result += \"\
    four\";\n        } else if (nums[i] == 5) {\n            result += \"five\";\n\
    \        } else if (nums[i] == 6) {\n            result += \"six\";\n        }\
    \ else if (nums[i] == 7) {\n            result +=\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54fjm_e5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp54fjm_e5.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmp54fjm_e5.cpp:58:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   58 | int main() {\n     \
    \ |            ^\n/tmp/tmp54fjm_e5.cpp:65:1: error: expected \u2018}\u2019 at\
    \ end of input\n   65 | }\n      | ^\n/tmp/tmp54fjm_e5.cpp:37:43: note: to match\
    \ this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmp54fjm_e5.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp54fjm_e5.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp54fjm_e5.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream result;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (i != 0) result << \" \";\n        if (nums[i] == 0) result << \"\
    zero\";\n        else if (nums[i] == 1) result << \"one\";\n        else if (nums[i]\
    \ == 2) result << \"two\";\n        else if (nums[i] == 3) result << \"three\"\
    ;\n        else if (nums[i] == 4) result << \"four\";\n        else if (nums[i]\
    \ == 5) result << \"five\";\n        else if (nums[i] == 6) result << \"six\"\
    ;\n        else if (nums[i] == 7) result << \"seven\";\n        else if (nums[i]\
    \ == 8) result << \"eight\";\n        else if (nums[i] == 9) result << \"nine\"\
    ;\n    }\n    return result.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string token;\n    while (ss >> token) {\n        if (token == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (token == \"one\") {\n\
    \            nums.push_back(1);\n        } else if (token == \"two\") {\n    \
    \        nums.push_back(2);\n        } else if (token == \"three\") {\n      \
    \      nums.push_back(3);\n        } else if (token == \"four\") {\n         \
    \   nums.push_back(4);\n        } else if (token == \"five\") {\n            nums.push_back(5);\n\
    \        } else if (token == \"six\") {\n            nums.push_back(6);\n    \
    \    } else if (token == \"seven\") {\n            nums.push_back(7);\n      \
    \  } else if (token == \"eight\") {\n            nums.push_back(8);\n        }\
    \ else if (token == \"nine\") {\n            nums.push_back(9);\n        }\n \
    \   }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n   \
    \ for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n     \
    \       result += \"zero \";\n        } else if (nums[i] == 1) {\n           \
    \ result += \"one \";\n        } else if (nums[i] == 2) {\n            result\
    \ += \"two \";\n        } else if (nums[i] == 3) {\n            result += \"three\
    \ \";\n        } else if (nums[i] == 4) {\n            result += \"four \";\n\
    \        } else if (nums[i] == 5) {\n            result += \"five \";\n      \
    \  } else if (nums[i] == 6) {\n            result += \"six \";\n        } else\
    \ if (nums[i] == 7) {\n            result += \"seven \";\n        } else if (nums[i]\
    \ == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5ds79ux.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_5ds79ux.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp_5ds79ux.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp_5ds79ux.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp_5ds79ux.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp_5ds79ux.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp_5ds79ux.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) res +=\
    \ \"zero \";\n        else if (nums[i] == 1) res += \"one \";\n        else if\
    \ (nums[i] == 2) res += \"two \";\n        else if (nums[i] == 3) res += \"three\
    \ \";\n        else if (nums[i] == 4) res += \"four \";\n        else if (nums[i]\
    \ == 5) res += \"five \";\n        else if (nums[i] == 6) res += \"six \";\n \
    \       else if (nums[i] == 7) res += \"seven \";\n        else if (nums[i] ==\
    \ 8) res += \"eight \";\n        else if (nums[i] == 9) res += \"nine \";\n  \
    \  }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n  \
    \  std::string temp;\n    std::vector<int> nums;\n    while (ss >> temp) {\n \
    \       if (temp == \"zero\") {\n            nums.push_back(0);\n        } else\
    \ if (temp == \"one\") {\n            nums.push_back(1);\n        } else if (temp\
    \ == \"two\") {\n            nums.push_back(2);\n        } else if (temp == \"\
    three\") {\n            nums.push_back(3);\n        } else if (temp == \"four\"\
    ) {\n            nums.push_back(4);\n        } else if (temp == \"five\") {\n\
    \            nums.push_back(5);\n        } else if (temp == \"six\") {\n     \
    \       nums.push_back(6);\n        } else if (temp == \"seven\") {\n        \
    \    nums.push_back(7);\n        } else if (temp == \"eight\") {\n           \
    \ nums.push_back(8);\n        } else if (temp == \"nine\") {\n            nums.push_back(9);\n\
    \        }\n    }\n    std::sort(nums.begin(), nums.end());\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrb4ead4.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpjrb4ead4.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpjrb4ead4.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpjrb4ead4.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpjrb4ead4.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpjrb4ead4.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpjrb4ead4.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    if (temp == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (temp == \"one\") {\n      nums.push_back(1);\n    } else if (temp\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (temp == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (temp == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (temp == \"five\") {\n      nums.push_back(5);\n    } else if (temp\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (temp == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (temp == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (temp == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result = \"\";\n  for (auto num : nums) {\n    if\
    \ (num == 0) {\n      result += \"zero \";\n    } else if (num == 1) {\n     \
    \ result += \"one \";\n    } else if (num == 2) {\n      result += \"two \";\n\
    \    } else if (num == 3) {\n      result += \"three \";\n    } else if (num ==\
    \ 4) {\n      result += \"four \";\n    } else if (num == 5) {\n      result +=\
    \ \"five \";\n    } else if (num == 6) {\n      result += \"six \";\n    } else\
    \ if (num == 7) {\n      result += \"seven \";\n    } else if (num == 8) {\n \
    \     result += \"eight \";\n    } else if (num == 9) {\n      result += \"nine\
    \ \";\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpk60ptwyc: /tmp/tmpk60ptwyc.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpev7v991g.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpev7v991g.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i] == 0) result\
    \ += \"zero \";\n        else if (v[i] == 1) result += \"one \";\n        else\
    \ if (v[i] == 2) result += \"two \";\n        else if (v[i] == 3) result += \"\
    three \";\n        else if (v[i] == 4) result += \"four \";\n        else if (v[i]\
    \ == 5) result += \"five \";\n        else if (v[i] == 6) result += \"six \";\n\
    \        else if (v[i] == 7) result += \"seven \";\n        else if (v[i] == 8)\
    \ result += \"eight \";\n        else if (v[i] == 9) result += \"nine \";\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpo8y97y9h: /tmp/tmpo8y97y9h.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i > 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\";\n\
    \        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i] ==\
    \ 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\";\n\
    \        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream out;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i != 0) out << \" \";\n        if (nums[i] == 0) out << \"zero\";\n\
    \        else if (nums[i] == 1) out << \"one\";\n        else if (nums[i] == 2)\
    \ out << \"two\";\n        else if (nums[i] == 3) out << \"three\";\n        else\
    \ if (nums[i] == 4) out << \"four\";\n        else if (nums[i] == 5) out << \"\
    five\";\n        else if (nums[i] == 6) out << \"six\";\n        else if (nums[i]\
    \ == 7) out << \"seven\";\n        else if (nums[i] == 8) out << \"eight\";\n\
    \        else if (nums[i] == 9) out << \"nine\";\n    }\n    return out.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::stringstream ss(numbers);\n  std::string word;\n  std::vector<int>\
    \ nums;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuh2ebc9l.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpuh2ebc9l.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpuh2ebc9l.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpuh2ebc9l.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpuh2ebc9l.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpuh2ebc9l.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpuh2ebc9l.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::stringstream ss(numbers);\n  \
    \  std::vector<int> v;\n    std::string temp;\n    while(ss >> temp) {\n     \
    \   if(temp == \"zero\") {\n            v.push_back(0);\n        }\n        else\
    \ if(temp == \"one\") {\n            v.push_back(1);\n        }\n        else\
    \ if(temp == \"two\") {\n            v.push_back(2);\n        }\n        else\
    \ if(temp == \"three\") {\n            v.push_back(3);\n        }\n        else\
    \ if(temp == \"four\") {\n            v.push_back(4);\n        }\n        else\
    \ if(temp == \"five\") {\n            v.push_back(5);\n        }\n        else\
    \ if(temp == \"six\") {\n            v.push_back(6);\n        }\n        else\
    \ if(temp == \"seven\") {\n            v.push_back(7);\n        }\n        else\
    \ if(temp == \"eight\") {\n            v.push_back(8);\n        }\n        else\
    \ if(temp == \"nine\") {\n            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    for(int i = 0; i < v.size(); i++) {\n        if(v[i] == 0) {\n\
    \            result += \"zero \";\n        }\n        else if(v[i] == 1) {\n \
    \           result += \"one \";\n        }\n        else if(v[i] == 2) {\n   \
    \         result += \"two \";\n        }\n        else if(v[i] == 3) {\n     \
    \       result += \"three \";\n        }\n        else if(v[i] == 4) {\n     \
    \       result += \"four \";\n        }\n        else if(v[i] == 5) {\n      \
    \      result += \"five \";\n        }\n        else if(v[i] == 6) {\n       \
    \     result += \"six \";\n        }\n        else if(v[i] == 7) {\n         \
    \   result += \"seven \";\n        }\n        else\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhwybmaz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpqhwybmaz.cpp:72:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   72 | }\n      | ^\n/tmp/tmpqhwybmaz.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmpqhwybmaz.cpp:80:1: error: expected \u2018}\u2019 at\
    \ end of input\n   80 | }\n      | ^\n/tmp/tmpqhwybmaz.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpqhwybmaz.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream result;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (i != 0) result << \" \";\n        if (nums[i] == 0) result << \"\
    zero\";\n        else if (nums[i] == 1) result << \"one\";\n        else if (nums[i]\
    \ == 2) result << \"two\";\n        else if (nums[i] == 3) result << \"three\"\
    ;\n        else if (nums[i] == 4) result << \"four\";\n        else if (nums[i]\
    \ == 5) result << \"five\";\n        else if (nums[i] == 6) result << \"six\"\
    ;\n        else if (nums[i] == 7) result << \"seven\";\n        else if (nums[i]\
    \ == 8) result << \"eight\";\n        else if (nums[i] == 9) result << \"nine\"\
    ;\n    }\n    return result.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ temp;\n  while (ss >> temp) {\n    if (temp == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (temp == \"one\") {\n      nums.push_back(1);\n    } else if (temp\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (temp == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (temp == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (temp == \"five\") {\n      nums.push_back(5);\n    } else if (temp\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (temp == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (temp == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (temp == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7ew3t5e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpi7ew3t5e.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpi7ew3t5e.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpi7ew3t5e.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpi7ew3t5e.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  switch (nums[i]) {\n            case 0: result += \"zero \"; break;\n     \
    \       case 1: result += \"one \"; break;\n            case 2: result += \"two\
    \ \"; break;\n            case 3: result += \"three \"; break;\n            case\
    \ 4: result += \"four \"; break;\n            case 5: result += \"five \"; break;\n\
    \            case 6: result += \"six \"; break;\n            case 7: result +=\
    \ \"seven \"; break;\n            case 8: result += \"eight \"; break;\n     \
    \       case 9: result += \"nine \"; break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpecwz4pfz: /tmp/tmpecwz4pfz.cpp:45: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057919
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") nums.push_back(0);\n\
    \        else if (word == \"one\") nums.push_back(1);\n        else if (word ==\
    \ \"two\") nums.push_back(2);\n        else if (word == \"three\") nums.push_back(3);\n\
    \        else if (word == \"four\") nums.push_back(4);\n        else if (word\
    \ == \"five\") nums.push_back(5);\n        else if (word == \"six\") nums.push_back(6);\n\
    \        else if (word == \"seven\") nums.push_back(7);\n        else if (word\
    \ == \"eight\") nums.push_back(8);\n        else if (word == \"nine\") nums.push_back(9);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) result\
    \ += \"zero \";\n        else if (nums[i] == 1) result += \"one \";\n        else\
    \ if (nums[i] == 2) result += \"two \";\n        else if (nums[i] == 3) result\
    \ += \"three \";\n        else if (nums[i] == 4) result += \"four \";\n      \
    \  else if (nums[i] == 5) result += \"five \";\n        else if (nums[i] == 6)\
    \ result += \"six \";\n        else if (nums[i] == 7) result += \"seven \";\n\
    \        else if (nums[i] == 8) result += \"eight \";\n        else if (nums[i]\
    \ == 9) result += \"nine \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i = nums.begin(); i != nums.end(); i++) {\n        result += *i +\
    \ \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpemvx7m3i: /tmp/tmpemvx7m3i.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ {\n            v.push_back(0);\n        } else if (word == \"one\") {\n    \
    \        v.push_back(1);\n        } else if (word == \"two\") {\n            v.push_back(2);\n\
    \        } else if (word == \"three\") {\n            v.push_back(3);\n      \
    \  } else if (word == \"four\") {\n            v.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            v.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            v.push_back(6);\n        } else if (word == \"seven\"\
    ) {\n            v.push_back(7);\n        } else if (word == \"eight\") {\n  \
    \          v.push_back(8);\n        } else if (word == \"nine\") {\n         \
    \   v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n  \
    \  std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        if (v[i]\
    \ == 0) {\n            result += \"zero \";\n        } else if (v[i] == 1) {\n\
    \            result += \"one \";\n        } else if (v[i] == 2) {\n          \
    \  result += \"two \";\n        } else if (v[i] == 3) {\n            result +=\
    \ \"three \";\n        } else if (v[i] == 4) {\n            result += \"four \"\
    ;\n        } else if (v[i] == 5) {\n            result += \"five \";\n       \
    \ } else if (v[i] == 6) {\n            result += \"six \";\n        } else if\
    \ (v[i] == 7) {\n            result += \"seven \";\n        } else if (v[i] ==\
    \ 8) {\n            result += \"eight \";\n        } else if (v[i] == 9) {\n \
    \          \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkevouhlr.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkevouhlr.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpkevouhlr.cpp:37:40:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpkevouhlr.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpkevouhlr.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto\
    \ num : nums) {\n        if (num == 0) {\n            result += \"zero \";\n \
    \       } else if (num == 1) {\n            result += \"one \";\n        } else\
    \ if (num == 2) {\n            result += \"two \";\n        } else if (num ==\
    \ 3) {\n            result += \"three \";\n        } else if (num == 4) {\n  \
    \          result += \"four \";\n        } else if (num == 5) {\n            result\
    \ += \"five \";\n        } else if (num == 6) {\n            result += \"six \"\
    ;\n        } else if (num == 7) {\n            result += \"seven \";\n       \
    \ } else if (num == 8) {\n            result += \"eight \";\n        } else if\
    \ (num == 9) {\n            result += \"nine \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpk4wv8olk: /tmp/tmpk4wv8olk.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (auto i : nums) {\n        result += i + \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpkobwnuhp: /tmp/tmpkobwnuhp.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string word;\n    while (ss >> word) {\n        if (word == \"zero\")\
    \ v.push_back(0);\n        else if (word == \"one\") v.push_back(1);\n       \
    \ else if (word == \"two\") v.push_back(2);\n        else if (word == \"three\"\
    ) v.push_back(3);\n        else if (word == \"four\") v.push_back(4);\n      \
    \  else if (word == \"five\") v.push_back(5);\n        else if (word == \"six\"\
    ) v.push_back(6);\n        else if (word == \"seven\") v.push_back(7);\n     \
    \   else if (word == \"eight\") v.push_back(8);\n        else if (word == \"nine\"\
    ) v.push_back(9);\n    }\n    std::sort(v.begin(), v.end());\n    std::string\
    \ res;\n    for (int i = 0; i < v.size(); i++) {\n        if (i != 0) res += \"\
    \ \";\n        if (v[i] == 0) res += \"zero\";\n        else if (v[i] == 1) res\
    \ += \"one\";\n        else if (v[i] == 2) res += \"two\";\n        else if (v[i]\
    \ == 3) res += \"three\";\n        else if (v[i] == 4) res += \"four\";\n    \
    \    else if (v[i] == 5) res += \"five\";\n        else if (v[i] == 6) res +=\
    \ \"six\";\n        else if (v[i] == 7) res += \"seven\";\n        else if (v[i]\
    \ == 8) res += \"eight\";\n        else if (v[i] == 9) res += \"nine\";\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream result;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        if (i > 0) result << \" \";\n        if (nums[i] == 0) result << \"zero\"\
    ;\n        else if (nums[i] == 1) result << \"one\";\n        else if (nums[i]\
    \ == 2) result << \"two\";\n        else if (nums[i] == 3) result << \"three\"\
    ;\n        else if (nums[i] == 4) result << \"four\";\n        else if (nums[i]\
    \ == 5) result << \"five\";\n        else if (nums[i] == 6) result << \"six\"\
    ;\n        else if (nums[i] == 7) result << \"seven\";\n        else if (nums[i]\
    \ == 8) result << \"eight\";\n        else if (nums[i] == 9) result << \"nine\"\
    ;\n    }\n    return result.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\") nums.push_back(0);\n\
    \t\telse if (temp == \"one\") nums.push_back(1);\n\t\telse if (temp == \"two\"\
    ) nums.push_back(2);\n\t\telse if (temp == \"three\") nums.push_back(3);\n\t\t\
    else if (temp == \"four\") nums.push_back(4);\n\t\telse if (temp == \"five\")\
    \ nums.push_back(5);\n\t\telse if (temp == \"six\") nums.push_back(6);\n\t\telse\
    \ if (temp == \"seven\") nums.push_back(7);\n\t\telse if (temp == \"eight\") nums.push_back(8);\n\
    \t\telse if (temp == \"nine\") nums.push_back(9);\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) result += \"zero \";\n\t\telse if (nums[i] == 1) result\
    \ += \"one \";\n\t\telse if (nums[i] == 2) result += \"two \";\n\t\telse if (nums[i]\
    \ == 3) result += \"three \";\n\t\telse if (nums[i] == 4) result += \"four \"\
    ;\n\t\telse if (nums[i] == 5) result += \"five \";\n\t\telse if (nums[i] == 6)\
    \ result += \"six \";\n\t\telse if (nums[i] == 7) result += \"seven \";\n\t\t\
    else if (nums[i] == 8) result += \"eight \";\n\t\telse if (nums[i] == 9) result\
    \ += \"nine \";\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp2zomih1h: /tmp/tmp2zomih1h.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string res = \"\";\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            res\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            res += \"one\
    \ \";\n        } else if (nums[i] == 2) {\n            res += \"two \";\n    \
    \    } else if (nums[i] == 3) {\n            res += \"three \";\n        } else\
    \ if (nums[i] == 4) {\n            res += \"four \";\n        } else if (nums[i]\
    \ == 5) {\n            res += \"five \";\n        } else if (nums[i] == 6) {\n\
    \            res += \"six \";\n        } else if (nums[i] == 7) {\n          \
    \  res += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5fgvpht.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpx5fgvpht.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpx5fgvpht.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpx5fgvpht.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpx5fgvpht.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpx5fgvpht.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> nums;\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream res;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i != 0) res << \" \";\n        if (nums[i] == 0) res << \"zero\";\n\
    \        else if (nums[i] == 1) res << \"one\";\n        else if (nums[i] == 2)\
    \ res << \"two\";\n        else if (nums[i] == 3) res << \"three\";\n        else\
    \ if (nums[i] == 4) res << \"four\";\n        else if (nums[i] == 5) res << \"\
    five\";\n        else if (nums[i] == 6) res << \"six\";\n        else if (nums[i]\
    \ == 7) res << \"seven\";\n        else if (nums[i] == 8) res << \"eight\";\n\
    \        else if (nums[i] == 9) res << \"nine\";\n    }\n    return res.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n  \
    \  std::string temp;\n    while(ss >> temp) {\n        if(temp == \"zero\") {\n\
    \            v.push_back(0);\n        }\n        else if(temp == \"one\") {\n\
    \            v.push_back(1);\n        }\n        else if(temp == \"two\") {\n\
    \            v.push_back(2);\n        }\n        else if(temp == \"three\") {\n\
    \            v.push_back(3);\n        }\n        else if(temp == \"four\") {\n\
    \            v.push_back(4);\n        }\n        else if(temp == \"five\") {\n\
    \            v.push_back(5);\n        }\n        else if(temp == \"six\") {\n\
    \            v.push_back(6);\n        }\n        else if(temp == \"seven\") {\n\
    \            v.push_back(7);\n        }\n        else if(temp == \"eight\") {\n\
    \            v.push_back(8);\n        }\n        else if(temp == \"nine\") {\n\
    \            v.push_back(9);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < v.size(); i++) {\n      \
    \  if(v[i] == 0) {\n            ans += \"zero \";\n        }\n        else if(v[i]\
    \ == 1) {\n            ans += \"one \";\n        }\n        else if(v[i] == 2)\
    \ {\n            ans += \"two \";\n        }\n        else if(v[i] == 3) {\n \
    \           ans += \"three \";\n        }\n        else if(v[i] == 4) {\n    \
    \        ans += \"four \";\n        }\n        else if(v[i] == 5) {\n        \
    \    ans += \"five \";\n        }\n        else if(v[i] == 6) {\n            ans\
    \ += \"six \";\n        }\n        else if(v[i] == 7) {\n            ans += \"\
    seven \";\n        }\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_a5vwc8.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpu_a5vwc8.cpp:73:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpu_a5vwc8.cpp:80:1:\
    \ error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpu_a5vwc8.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpu_a5vwc8.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   80 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (auto i : nums) {\n        if\
    \ (i == 0) {\n            result += \"zero \";\n        } else if (i == 1) {\n\
    \            result += \"one \";\n        } else if (i == 2) {\n            result\
    \ += \"two \";\n        } else if (i == 3) {\n            result += \"three \"\
    ;\n        } else if (i == 4) {\n            result += \"four \";\n        } else\
    \ if (i == 5) {\n            result += \"five \";\n        } else if (i == 6)\
    \ {\n            result += \"six \";\n        } else if (i == 7) {\n         \
    \   result += \"seven \";\n        } else if (i == 8) {\n            result +=\
    \ \"eight \";\n        } else if (i == 9) {\n            result += \"nine \";\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpe81h14ua: /tmp/tmpe81h14ua.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057919
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::stringstream out;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     if (i > 0) out << \" \";\n        if (nums[i] == 0) out << \"zero\";\n \
    \       else if (nums[i] == 1) out << \"one\";\n        else if (nums[i] == 2)\
    \ out << \"two\";\n        else if (nums[i] == 3) out << \"three\";\n        else\
    \ if (nums[i] == 4) out << \"four\";\n        else if (nums[i] == 5) out << \"\
    five\";\n        else if (nums[i] == 6) out << \"six\";\n        else if (nums[i]\
    \ == 7) out << \"seven\";\n        else if (nums[i] == 8) out << \"eight\";\n\
    \        else if (nums[i] == 9) out << \"nine\";\n    }\n    return out.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057919
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::stringstream ss2;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            ss2\
    \ << \"zero\";\n        } else if (nums[i] == 1) {\n            ss2 << \"one\"\
    ;\n        } else if (nums[i] == 2) {\n            ss2 << \"two\";\n        }\
    \ else if (nums[i] == 3) {\n            ss2 << \"three\";\n        } else if (nums[i]\
    \ == 4) {\n            ss2 << \"four\";\n        } else if (nums[i] == 5) {\n\
    \            ss2 << \"five\";\n        } else if (nums[i] == 6) {\n          \
    \  ss2 << \"six\";\n        } else if (nums[i] == 7) {\n            ss2 << \"\
    seven\";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfl7sut95.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfl7sut95.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpfl7sut95.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpfl7sut95.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpfl7sut95.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpfl7sut95.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) nums.push_back(0);\n        else if (temp == \"one\") nums.push_back(1);\n \
    \       else if (temp == \"two\") nums.push_back(2);\n        else if (temp ==\
    \ \"three\") nums.push_back(3);\n        else if (temp == \"four\") nums.push_back(4);\n\
    \        else if (temp == \"five\") nums.push_back(5);\n        else if (temp\
    \ == \"six\") nums.push_back(6);\n        else if (temp == \"seven\") nums.push_back(7);\n\
    \        else if (temp == \"eight\") nums.push_back(8);\n        else if (temp\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] == 0) result += \"zero \";\n        else if (nums[i] == 1) result\
    \ += \"one \";\n        else if (nums[i] == 2) result += \"two \";\n        else\
    \ if (nums[i] == 3) result += \"three \";\n        else if (nums[i] == 4) result\
    \ += \"four \";\n        else if (nums[i] == 5) result += \"five \";\n       \
    \ else if (nums[i] == 6) result += \"six \";\n        else if (nums[i] == 7) result\
    \ += \"seven \";\n        else if (nums[i] == 8) result += \"eight \";\n     \
    \   else if (nums[i] == 9) result += \"nine \";\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpngfam0ui: /tmp/tmpngfam0ui.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsluetxt6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsluetxt6.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpsluetxt6.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsluetxt6.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        if (temp == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (temp == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (temp == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (temp == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (temp == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (temp == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (temp == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (temp == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (temp == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8vgjilm.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpa8vgjilm.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpa8vgjilm.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpa8vgjilm.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string\
    \ word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      nums.push_back(0);\n\
    \    } else if (word == \"one\") {\n      nums.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      nums.push_back(2);\n    } else if (word == \"three\") {\n\
    \      nums.push_back(3);\n    } else if (word == \"four\") {\n      nums.push_back(4);\n\
    \    } else if (word == \"five\") {\n      nums.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      nums.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      nums.push_back(7);\n    } else if (word == \"eight\") {\n      nums.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    if (nums[i] == 0) {\n      result += \"zero \";\n    } else if (nums[i]\
    \ == 1) {\n      result += \"one \";\n    } else if (nums[i] == 2) {\n      result\
    \ += \"two \";\n    } else if (nums[i] == 3) {\n      result += \"three \";\n\
    \    } else if (nums[i] == 4) {\n      result += \"four \";\n    } else if (nums[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (nums[i] == 6) {\n      result\
    \ += \"six \";\n    } else if (nums[i] == 7) {\n      result += \"seven \";\n\
    \    } else if (nums[i] == 8) {\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpev7v991g.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpev7v991g.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:37:41:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpev7v991g.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpev7v991g.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int>\
    \ nums;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   nums.push_back(0);\n        } else if (word == \"one\") {\n            nums.push_back(1);\n\
    \        } else if (word == \"two\") {\n            nums.push_back(2);\n     \
    \   } else if (word == \"three\") {\n            nums.push_back(3);\n        }\
    \ else if (word == \"four\") {\n            nums.push_back(4);\n        } else\
    \ if (word == \"five\") {\n            nums.push_back(5);\n        } else if (word\
    \ == \"six\") {\n            nums.push_back(6);\n        } else if (word == \"\
    seven\") {\n            nums.push_back(7);\n        } else if (word == \"eight\"\
    ) {\n            nums.push_back(8);\n        } else if (word == \"nine\") {\n\
    \            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string result = \"\";\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        if (nums[i] == 0) {\n            result += \"zero \";\n    \
    \    } else if (nums[i] == 1) {\n            result += \"one \";\n        } else\
    \ if (nums[i] == 2) {\n            result += \"two \";\n        } else if (nums[i]\
    \ == 3) {\n            result += \"three \";\n        } else if (nums[i] == 4)\
    \ {\n            result += \"four \";\n        } else if (nums[i] == 5) {\n  \
    \          result += \"five \";\n        } else if (nums[i] == 6) {\n        \
    \    result += \"six \";\n        } else if (nums[i] == 7) {\n            result\
    \ += \"seven \";\n        } else if (nums[i] == 8)\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw74a6ms.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkw74a6ms.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:56:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n     \
    \ |            ^\n/tmp/tmpkw74a6ms.cpp:63:1: error: expected \u2018}\u2019 at\
    \ end of input\n   63 | }\n      | ^\n/tmp/tmpkw74a6ms.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkw74a6ms.cpp:63:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057915
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) nums.push_back(0);\n        else if (word == \"one\") nums.push_back(1);\n \
    \       else if (word == \"two\") nums.push_back(2);\n        else if (word ==\
    \ \"three\") nums.push_back(3);\n        else if (word == \"four\") nums.push_back(4);\n\
    \        else if (word == \"five\") nums.push_back(5);\n        else if (word\
    \ == \"six\") nums.push_back(6);\n        else if (word == \"seven\") nums.push_back(7);\n\
    \        else if (word == \"eight\") nums.push_back(8);\n        else if (word\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (int i = 0; i < nums.size(); i++) {\n      \
    \  if (i != 0) result += \" \";\n        if (nums[i] == 0) result += \"zero\"\
    ;\n        else if (nums[i] == 1) result += \"one\";\n        else if (nums[i]\
    \ == 2) result += \"two\";\n        else if (nums[i] == 3) result += \"three\"\
    ;\n        else if (nums[i] == 4) result += \"four\";\n        else if (nums[i]\
    \ == 5) result += \"five\";\n        else if (nums[i] == 6) result += \"six\"\
    ;\n        else if (nums[i] == 7) result += \"seven\";\n        else if (nums[i]\
    \ == 8) result += \"eight\";\n        else if (nums[i] == 9) result += \"nine\"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057916
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::vector<int> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ word;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string result;\n\tfor (int i = 0; i < nums.size(); i++)\
    \ {\n\t\tif (nums[i] == 0) {\n\t\t\tresult += \"zero \";\n\t\t}\n\t\telse if (nums[i]\
    \ == 1) {\n\t\t\tresult += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2) {\n\t\t\
    \tresult += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tresult += \"\
    three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tresult += \"four \";\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxdz0k_7v.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxdz0k_7v.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpxdz0k_7v.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpxdz0k_7v.cpp:46:40:\
    \ note: to match this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpxdz0k_7v.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpxdz0k_7v.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpxdz0k_7v.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"zero\"\
    ) {\n            nums.push_back(0);\n        } else if (word == \"one\") {\n \
    \           nums.push_back(1);\n        } else if (word == \"two\") {\n      \
    \      nums.push_back(2);\n        } else if (word == \"three\") {\n         \
    \   nums.push_back(3);\n        } else if (word == \"four\") {\n            nums.push_back(4);\n\
    \        } else if (word == \"five\") {\n            nums.push_back(5);\n    \
    \    } else if (word == \"six\") {\n            nums.push_back(6);\n        }\
    \ else if (word == \"seven\") {\n            nums.push_back(7);\n        } else\
    \ if (word == \"eight\") {\n            nums.push_back(8);\n        } else if\
    \ (word == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n   \
    \ std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n            result\
    \ += \"zero \";\n        } else if (nums[i] == 1) {\n            result += \"\
    one \";\n        } else if (nums[i] == 2) {\n            result += \"two \";\n\
    \        } else if (nums[i] == 3) {\n            result += \"three \";\n     \
    \   } else if (nums[i] == 4) {\n            result += \"four \";\n        } else\
    \ if (nums[i] == 5) {\n            result += \"five \";\n        } else if (nums[i]\
    \ == 6) {\n            result += \"six \";\n        } else if (nums[i] == 7) {\n\
    \            result += \"seven \";\n        } else if (nums[i] == 8) {\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wr3e_6y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5wr3e_6y.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:37:43:\
    \ note: to match this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp5wr3e_6y.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp5wr3e_6y.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057916
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp3hu8xl_2: /tmp/tmp3hu8xl_2.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660057917
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ nums;\n\twhile (ss >> word) {\n\t\tif (word == \"zero\") {\n\t\t\tnums.push_back(0);\n\
    \t\t}\n\t\telse if (word == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\t\
    else if (word == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (word\
    \ == \"three\") {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (word == \"four\"\
    ) {\n\t\t\tnums.push_back(4);\n\t\t}\n\t\telse if (word == \"five\") {\n\t\t\t\
    nums.push_back(5);\n\t\t}\n\t\telse if (word == \"six\") {\n\t\t\tnums.push_back(6);\n\
    \t\t}\n\t\telse if (word == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\t\
    else if (word == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (word\
    \ == \"nine\") {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string ans = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tif (nums[i] == 0) {\n\t\t\tans += \"zero \";\n\t\t}\n\t\telse if\
    \ (nums[i] == 1) {\n\t\t\tans += \"one \";\n\t\t}\n\t\telse if (nums[i] == 2)\
    \ {\n\t\t\tans += \"two \";\n\t\t}\n\t\telse if (nums[i] == 3) {\n\t\t\tans +=\
    \ \"three \";\n\t\t}\n\t\telse if (nums[i] == 4) {\n\t\t\tans += \"four\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpma9rh2mf.cpp:60:11: warning: missing terminating \" character\n\
    \   60 |    ans += \"four\n      |           ^\n/tmp/tmpma9rh2mf.cpp:60:11: error:\
    \ missing terminating \" character\n   60 |    ans += \"four\n      |        \
    \   ^~~~~\n/tmp/tmpma9rh2mf.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpma9rh2mf.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmpma9rh2mf.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmpma9rh2mf.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmpma9rh2mf.cpp:46:40: note: to match\
    \ this \u2018{\u2019\n   46 |  for (int i = 0; i < nums.size(); i++) {\n     \
    \ |                                        ^\n/tmp/tmpma9rh2mf.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpma9rh2mf.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpma9rh2mf.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660057919
