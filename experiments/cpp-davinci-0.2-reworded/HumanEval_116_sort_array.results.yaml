language: cpp
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0)\
    \ {\n      sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  for (int i = 0; i < sorted_ones.size(); i++) {\n    sorted.push_back(sorted_ones[i]);\n\
    \  }\n  for (int i = 0; i < sorted_zeros.size(); i++) {\n    sorted.push_back(sorted_zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoe34m7hm.cpp: In function 'int main()':\n/tmp/tmpoe34m7hm.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoe34m7hm.cpp:2:\n/tmp/tmpoe34m7hm.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpoe34m7hm.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpoe34m7hm.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpoe34m7hm.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpoe34m7hm.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpoe34m7hm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  for (auto i : arr) {\n    if (i <\
    \ 0) {\n      negatives.push_back(i);\n    } else if (i == 0) {\n      zeros.push_back(i);\n\
    \    } else {\n      ones.push_back(i);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : negatives) {\n    sorted.push_back(i);\n  }\n\
    \  for (auto i : zeros) {\n    sorted.push_back(i);\n  }\n  for (auto i : ones)\
    \ {\n    sorted.push_back(i);\n  }\n  return sorted;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9w72al_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpw9w72al_.cpp:18:13: error: 'i' does not name a type\n   for\
    \ (auto i : arr) {\n             ^\n/tmp/tmpw9w72al_.cpp:27:3: error: expected\
    \ ';' before 'std'\n   std::sort(negatives.begin(), negatives.end());\n   ^\n\
    /tmp/tmpw9w72al_.cpp:27:47: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(negatives.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), negatives.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n   std::sort(negatives.begin(),\
    \ negatives.end());\n                                               ^\n/tmp/tmpw9w72al_.cpp:28:40:\
    \ error: expected ')' before ';' token\n   std::sort(zeros.begin(), zeros.end());\n\
    \                                        ^\n/tmp/tmpw9w72al_.cpp:30:13: error:\
    \ 'i' does not name a type\n   for (auto i : negatives) {\n             ^\n/tmp/tmpw9w72al_.cpp:33:3:\
    \ error: expected ';' before 'for'\n   for (auto i : zeros) {\n   ^\n/tmp/tmpw9w72al_.cpp:33:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpw9w72al_.cpp:33:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpw9w72al_.cpp:33:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpw9w72al_.cpp:33:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpw9w72al_.cpp:33:13: error: 'i' does not name a type\n\
    \   for (auto i : zeros) {\n             ^\n/tmp/tmpw9w72al_.cpp:36:3: error:\
    \ expected ';' before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpw9w72al_.cpp:36:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpw9w72al_.cpp:36:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpw9w72al_.cpp:36:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpw9w72al_.cpp:36:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpw9w72al_.cpp:36:13: error: 'i' does not name a type\n\
    \   for (auto i : ones) {\n             ^\n/tmp/tmpw9w72al_.cpp:39:3: error: expected\
    \ ';' before 'return'\n   return sorted;\n   ^\n/tmp/tmpw9w72al_.cpp:39:3: error:\
    \ expected primary-expression bef"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i\
    \ & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaa_3lccq.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpaa_3lccq.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpaa_3lccq.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpaa_3lccq.cpp:24:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpaa_3lccq.cpp:24:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpaa_3lccq.cpp:24:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpaa_3lccq.cpp:24:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpaa_3lccq.cpp:24:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpaa_3lccq.cpp:24:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpaa_3lccq.cpp:28:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpaa_3lccq.cpp:28:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpaa_3lccq.cpp:28:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpaa_3lccq.cpp:28:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpaa_3lccq.cpp:28:3: error: expected ')' before 'return'\n\
    /tmp/tmpaa_3lccq.cpp: In function 'int main()':\n/tmp/tmpaa_3lccq.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpaa_3lccq.cpp:2:\n/tmp/tmpaa_3lccq.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpaa_3lccq.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzitv9fbs.cpp: In function 'int main()':\n/tmp/tmpzitv9fbs.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzitv9fbs.cpp:2:\n/tmp/tmpzitv9fbs.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzitv9fbs.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzitv9fbs.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzitv9fbs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ if (num & 1) {\n        count++;\n      }\n      num = num >> 1;\n    }\n  \
    \  v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n\
    \  std::vector<long> result;\n  for (int i = 0; i < v.size(); i++) {\n    result.push_back(v[i].second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwvr10lx.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpvwvr10lx.cpp:14:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpvwvr10lx.cpp: In function 'int main()':\n/tmp/tmpvwvr10lx.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvwvr10lx.cpp:2:\n/tmp/tmpvwvr10lx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpvwvr10lx.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpvwvr10lx.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpvwvr10lx.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvwvr10lx.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvwvr10lx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzocvbvoh.cpp: In function 'int main()':\n/tmp/tmpzocvbvoh.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzocvbvoh.cpp:2:\n/tmp/tmpzocvbvoh.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzocvbvoh.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzocvbvoh.cpp:39:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzocvbvoh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i].second);\n  }\n  return sorted;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn21gr39u.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpn21gr39u.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpn21gr39u.cpp: In function 'int main()':\n\
    /tmp/tmpn21gr39u.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn21gr39u.cpp:2:\n/tmp/tmpn21gr39u.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpn21gr39u.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpn21gr39u.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpn21gr39u.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn21gr39u.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpn21gr39u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnqz337l.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpnnqz337l.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpnnqz337l.cpp: In function 'int main()':\n\
    /tmp/tmpnnqz337l.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnnqz337l.cpp:2:\n/tmp/tmpnnqz337l.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpnnqz337l.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpnnqz337l.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpnnqz337l.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnnqz337l.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnnqz337l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfb401x4.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpxfb401x4.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmpxfb401x4.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpxfb401x4.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmpxfb401x4.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmpxfb401x4.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpxfb401x4.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpxfb401x4.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpxfb401x4.cpp: In function 'int main()':\n/tmp/tmpxfb401x4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxfb401x4.cpp:2:\n/tmp/tmpxfb401x4.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    sorted.push_back(i.second);\n  }\n  return sorted;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8sdrx4mr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp8sdrx4mr.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmp8sdrx4mr.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp8sdrx4mr.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmp8sdrx4mr.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmp8sdrx4mr.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmp8sdrx4mr.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmp8sdrx4mr.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmp8sdrx4mr.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return sorted;\n   ^\n/tmp/tmp8sdrx4mr.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8sdrx4mr.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp8sdrx4mr.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8sdrx4mr.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp8sdrx4mr.cpp: In function 'int main()':\n/tmp/tmp8sdrx4mr.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8sdrx4mr.cpp:2:\n/tmp/tmp8sdrx4mr.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < sorted.size(); i++) {\n    arr[i] = sorted[i];\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    arr[i + sorted.size()] =\
    \ zeros[i];\n  }\n  for (int i = 0; i < ones.size(); i++) {\n    arr[i + sorted.size()\
    \ + zeros.size()] = ones[i];\n  }\n  return arr;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0gt0fd51.cpp: In function 'int main()':\n/tmp/tmp0gt0fd51.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0gt0fd51.cpp:2:\n/tmp/tmp0gt0fd51.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp0gt0fd51.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp0gt0fd51.cpp:42:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp0gt0fd51.cpp:42:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0gt0fd51.cpp:42:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0gt0fd51.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n      sorted.push_back(i);\n\
    \    } else {\n      int count = 0;\n      long temp = i;\n      while (temp >\
    \ 0) {\n        if (temp % 2 == 1) {\n          count++;\n        }\n        temp\
    \ /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(i);\n     \
    \ } else {\n        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros)\
    \ {\n    sorted.push_back(i);\n  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzk65793.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpdzk65793.cpp:17:13: error: 'i' does not name a type\n   for\
    \ (auto i : arr) {\n             ^\n/tmp/tmpdzk65793.cpp:36:3: error: expected\
    \ ';' before 'std'\n   std::sort(zeros.begin(), zeros.end());\n   ^\n/tmp/tmpdzk65793.cpp:36:39:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(zeros.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), zeros.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n   std::sort(zeros.begin(), zeros.end());\n\
    \                                       ^\n/tmp/tmpdzk65793.cpp:37:38: error:\
    \ expected ')' before ';' token\n   std::sort(ones.begin(), ones.end());\n   \
    \                                   ^\n/tmp/tmpdzk65793.cpp:38:13: error: 'i'\
    \ does not name a type\n   for (auto i : zeros) {\n             ^\n/tmp/tmpdzk65793.cpp:41:3:\
    \ error: expected ';' before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpdzk65793.cpp:41:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdzk65793.cpp:41:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpdzk65793.cpp:41:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdzk65793.cpp:41:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpdzk65793.cpp:41:13: error: 'i' does not name a type\n\
    \   for (auto i : ones) {\n             ^\n/tmp/tmpdzk65793.cpp:44:3: error: expected\
    \ ';' before 'return'\n   return sorted;\n   ^\n/tmp/tmpdzk65793.cpp:44:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpdzk65793.cpp:44:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpdzk65793.cpp:44:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpdzk65793.cpp:44:3: error: expected ')' before 'return'\n\
    /tmp/tmpdzk65793.cpp: In function 'int main()':\n/tmp/tmpdzk65793.cpp:47:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> temp;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    result.push_back(temp[i].second);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpflu2go_g.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpflu2go_g.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> temp;\n        \
    \                         ^\n/tmp/tmpflu2go_g.cpp: In function 'int main()':\n\
    /tmp/tmpflu2go_g.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpflu2go_g.cpp:2:\n/tmp/tmpflu2go_g.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpflu2go_g.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpflu2go_g.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpflu2go_g.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpflu2go_g.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpflu2go_g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negs;\n  std::vector<long> pos;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negs.push_back(arr[i]);\n\
    \    } else {\n      pos.push_back(arr[i]);\n    }\n  }\n  std::sort(negs.begin(),\
    \ negs.end());\n  std::sort(pos.begin(), pos.end());\n  for (int i = 0; i < pos.size();\
    \ i++) {\n    if (pos[i] == 0) {\n      zeros.push_back(pos[i]);\n    } else {\n\
    \      int count = 0;\n      long num = pos[i];\n      while (num > 0) {\n   \
    \     if (num % 2 == 1) {\n          count++;\n        }\n        num /= 2;\n\
    \      }\n      if (count == 0) {\n        zeros.push_back(pos[i]);\n      } else\
    \ {\n        ones.push_back(pos[i]);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    int count = 0;\n\
    \    long num = ones[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n \
    \       count++;\n      }\n      num /= 2;\n    }\n    if (count == 0) {\n   \
    \   zeros.push_back(ones[i]);\n    } else {\n      ones.push_back(ones[i]);\n\
    \    }\n  }\n  for (int i = 0; i < negs.size(); i++) {\n    result.push_back(negs[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size();\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3fm794q.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpc3fm794q.cpp:70:1: error: expected primary-expression before\
    \ '}' token\n }\n ^\n/tmp/tmpc3fm794q.cpp:70:1: error: expected ')' before '}'\
    \ token\n/tmp/tmpc3fm794q.cpp:70:1: error: expected primary-expression before\
    \ '}' token\n/tmp/tmpc3fm794q.cpp:70:1: error: expected ';' before '}' token\n\
    /tmp/tmpc3fm794q.cpp: In function 'int main()':\n/tmp/tmpc3fm794q.cpp:72:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpc3fm794q.cpp:2:\n/tmp/tmpc3fm794q.cpp:73:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpc3fm794q.cpp:73:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpc3fm794q.cpp:73:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc3fm794q.cpp:73:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc3fm794q.cpp:73:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpc3fm794q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> sorted;\n    std::vector<std::pair<long, long>>\
    \ ones_and_index;\n    for (int i = 0; i < arr.size(); i++) {\n        long ones\
    \ = 0;\n        long num = arr[i];\n        while (num > 0) {\n            if\
    \ (num % 2 == 1) {\n                ones++;\n            }\n            num /=\
    \ 2;\n        }\n        ones_and_index.push_back(std::make_pair(ones, i));\n\
    \    }\n    std::sort(ones_and_index.begin(), ones_and_index.end());\n    for\
    \ (int i = 0; i < ones_and_index.size(); i++) {\n        sorted.push_back(arr[ones_and_index[i].second]);\n\
    \    }\n    return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mp2l1md.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp4mp2l1md.cpp:15:37: error: '>>' should be '> >' within a nested\
    \ template argument list\n     std::vector<std::pair<long, long>> ones_and_index;\n\
    \                                     ^\n/tmp/tmp4mp2l1md.cpp: In function 'int\
    \ main()':\n/tmp/tmp4mp2l1md.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4mp2l1md.cpp:2:\n/tmp/tmp4mp2l1md.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp4mp2l1md.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp4mp2l1md.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp4mp2l1md.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4mp2l1md.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4mp2l1md.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _Inp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfb401x4.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpxfb401x4.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmpxfb401x4.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpxfb401x4.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmpxfb401x4.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmpxfb401x4.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpxfb401x4.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpxfb401x4.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpxfb401x4.cpp: In function 'int main()':\n/tmp/tmpxfb401x4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxfb401x4.cpp:2:\n/tmp/tmpxfb401x4.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long temp =\
    \ arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    ones_count.push_back(count);\n  }\n  std::vector<long>\
    \ temp_arr = arr;\n  std::sort(temp_arr.begin(), temp_arr.end());\n  for (int\
    \ i = 0; i < temp_arr.size(); i++) {\n    for (int j = 0; j < arr.size(); j++)\
    \ {\n      if (temp_arr[i] == arr[j]) {\n        sorted_arr.push_back(arr[j]);\n\
    \        arr[j] = -1;\n        break;\n      }\n    }\n  }\n  return sorted_arr;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkw_65f6.cpp: In function 'int main()':\n/tmp/tmpvkw_65f6.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkw_65f6.cpp:2:\n/tmp/tmpvkw_65f6.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpvkw_65f6.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpvkw_65f6.cpp:42:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpvkw_65f6.cpp:42:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvkw_65f6.cpp:42:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvkw_65f6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp =\
    \ arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8huf02x.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpu8huf02x.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpu8huf02x.cpp: In function 'int main()':\n\
    /tmp/tmpu8huf02x.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8huf02x.cpp:2:\n/tmp/tmpu8huf02x.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpu8huf02x.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpu8huf02x.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpu8huf02x.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpu8huf02x.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu8huf02x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cmafkmm.cpp: In function 'int main()':\n/tmp/tmp6cmafkmm.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6cmafkmm.cpp:2:\n/tmp/tmp6cmafkmm.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6cmafkmm.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6cmafkmm.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6cmafkmm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result(arr.size());\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int temp = arr[i];\n    while (temp) {\n      count += temp & 1;\n      temp\
    \ >>= 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (int i = 0; i < arr.size(); i++) {\n    result[i] = v[i].second;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_t8g0mr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpg_t8g0mr.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpg_t8g0mr.cpp: In function 'int main()':\n/tmp/tmpg_t8g0mr.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg_t8g0mr.cpp:2:\n/tmp/tmpg_t8g0mr.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpg_t8g0mr.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpg_t8g0mr.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpg_t8g0mr.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg_t8g0mr.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg_t8g0mr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpexfe7hll.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpexfe7hll.cpp:61:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpexfe7hll.cpp: In function 'int main()':\n/tmp/tmpexfe7hll.cpp:63:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpexfe7hll.cpp:2:\n/tmp/tmpexfe7hll.cpp:64:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpexfe7hll.cpp:64:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpexfe7hll.cpp:64:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpexfe7hll.cpp:64:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpexfe7hll.cpp:64:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpexfe7hll.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp80b4p173.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp80b4p173.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmp80b4p173.cpp: In function 'int main()':\n/tmp/tmp80b4p173.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp80b4p173.cpp:2:\n/tmp/tmp80b4p173.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp80b4p173.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp80b4p173.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp80b4p173.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp80b4p173.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp80b4p173.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_count;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /=\
    \ 2;\n    }\n    ones_count.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (auto i : ones_count) {\n    result.push_back(i.second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzurqr8iv.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpzurqr8iv.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones_count;\n  \
    \                               ^\n/tmp/tmpzurqr8iv.cpp:16:13: error: 'i' does\
    \ not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpzurqr8iv.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones_count.begin(), ones_count.end());\n\
    \   ^\n/tmp/tmpzurqr8iv.cpp:27:49: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ int>*, std::vector<std::pair<int, int> > > >(ones_count.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >(), ones_count.std::vector<_Tp,\
    \ _Alloc>::end<std::pair<int, int>, std::allocator<std::pair<int, int> > >())'\
    \ from 'void' to 'bool'\n   std::sort(ones_count.begin(), ones_count.end());\n\
    \                                                 ^\n/tmp/tmpzurqr8iv.cpp:28:3:\
    \ error: expected primary-expression before 'for'\n   for (auto i : ones_count)\
    \ {\n   ^\n/tmp/tmpzurqr8iv.cpp:28:3: error: expected ')' before 'for'\n/tmp/tmpzurqr8iv.cpp:28:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones_count) {\n          \
    \   ^\n/tmp/tmpzurqr8iv.cpp:31:3: error: expected ';' before 'return'\n   return\
    \ result;\n   ^\n/tmp/tmpzurqr8iv.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpzurqr8iv.cpp:31:3: error: expected ';' before 'return'\n\
    /tmp/tmpzurqr8iv.cpp:31:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpzurqr8iv.cpp:31:3: error: expected ')' before 'return'\n/tmp/tmpzurqr8iv.cpp:\
    \ In function 'int main()':\n/tmp/tmpzurqr8iv.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzurqr8iv.cpp:2:\n/tmp/tmpzurqr8iv.cpp:35:40: warning:\
    \ extended initializer lists only availabl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      if (num & 1) count++;\n      num >>= 1;\n    }\n   \
    \ ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmisffqw.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpsmisffqw.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpsmisffqw.cpp: In function 'int main()':\n\
    /tmp/tmpsmisffqw.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmisffqw.cpp:2:\n/tmp/tmpsmisffqw.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpsmisffqw.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpsmisffqw.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsmisffqw.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsmisffqw.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsmisffqw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      if (__builtin_popcount(arr[i])\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  result.insert(result.end(), zeros.begin(), zeros.end());\n \
    \ result.insert(result.end(), ones.begin(), ones.end());\n  return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7n1t98wf.cpp: In function 'int main()':\n/tmp/tmp7n1t98wf.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7n1t98wf.cpp:2:\n/tmp/tmp7n1t98wf.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp7n1t98wf.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp7n1t98wf.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7n1t98wf.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7n1t98wf.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7n1t98wf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<std::pair<int, int>> v;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    int temp = i;\n    while (temp) {\n      count += temp & 1;\n\
    \      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n \
    \ std::sort(v.begin(), v.end());\n  std::vector<long> res;\n  for (auto i : v)\
    \ {\n    res.push_back(i.second);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmts_17gx.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmts_17gx.cpp:14:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpmts_17gx.cpp:15:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpmts_17gx.cpp:24:3:\
    \ error: expected ';' before 'std'\n   std::sort(v.begin(), v.end());\n   ^\n\
    /tmp/tmpmts_17gx.cpp:24:31: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ int>*, std::vector<std::pair<int, int> > > >(v.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >(), v.std::vector<_Tp, _Alloc>::end<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >())' from 'void' to 'bool'\n   std::sort(v.begin(),\
    \ v.end());\n                               ^\n/tmp/tmpmts_17gx.cpp:25:21: error:\
    \ expected primary-expression before 'res'\n   std::vector<long> res;\n      \
    \               ^\n/tmp/tmpmts_17gx.cpp:25:21: error: expected ')' before 'res'\n\
    /tmp/tmpmts_17gx.cpp:25:21: error: 'res' was not declared in this scope\n/tmp/tmpmts_17gx.cpp:26:13:\
    \ error: 'i' does not name a type\n   for (auto i : v) {\n             ^\n/tmp/tmpmts_17gx.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmpmts_17gx.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpmts_17gx.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpmts_17gx.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpmts_17gx.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpmts_17gx.cpp:29:10: error: 'res' was not declared\
    \ in this scope\n   return res;\n          ^\n/tmp/tmpmts_17gx.cpp: In function\
    \ 'int main()':\n/tmp/tmpmts_17gx.cpp:32:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_ypirx2.cpp: In function 'int main()':\n/tmp/tmpy_ypirx2.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy_ypirx2.cpp:2:\n/tmp/tmpy_ypirx2.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpy_ypirx2.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpy_ypirx2.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpy_ypirx2.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy_ypirx2.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy_ypirx2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<long, long>> ones_and_values;\n\
    \  for (auto i : arr) {\n    long ones = 0;\n    long value = i;\n    while (value\
    \ > 0) {\n      if (value % 2 == 1) {\n        ones++;\n      }\n      value /=\
    \ 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_values.begin(),\
    \ ones_and_values.end());\n  for (auto i : ones_and_values) {\n    result.push_back(i.second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0x8krgd.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpn0x8krgd.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, long>> ones_and_values;\n\
    \                                   ^\n/tmp/tmpn0x8krgd.cpp:16:13: error: 'i'\
    \ does not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpn0x8krgd.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones_and_values.begin(), ones_and_values.end());\n\
    \   ^\n/tmp/tmpn0x8krgd.cpp:27:59: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, long int>*, std::vector<std::pair<long int, long int> > > >(ones_and_values.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<long int, long int>, std::allocator<std::pair<long\
    \ int, long int> > >(), ones_and_values.std::vector<_Tp, _Alloc>::end<std::pair<long\
    \ int, long int>, std::allocator<std::pair<long int, long int> > >())' from 'void'\
    \ to 'bool'\n   std::sort(ones_and_values.begin(), ones_and_values.end());\n \
    \                                                          ^\n/tmp/tmpn0x8krgd.cpp:28:3:\
    \ error: expected primary-expression before 'for'\n   for (auto i : ones_and_values)\
    \ {\n   ^\n/tmp/tmpn0x8krgd.cpp:28:3: error: expected ')' before 'for'\n/tmp/tmpn0x8krgd.cpp:28:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones_and_values) {\n     \
    \        ^\n/tmp/tmpn0x8krgd.cpp:31:3: error: expected ';' before 'return'\n \
    \  return result;\n   ^\n/tmp/tmpn0x8krgd.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpn0x8krgd.cpp:31:3: error: expected ';' before 'return'\n\
    /tmp/tmpn0x8krgd.cpp:31:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpn0x8krgd.cpp:31:3: error: expected ')' before 'return'\n/tmp/tmpn0x8krgd.cpp:\
    \ In function 'int main()':\n/tmp/tmpn0x8krgd.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \    "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /=\
    \ 2;\n    }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2cljb95m.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp2cljb95m.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmp2cljb95m.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp2cljb95m.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmp2cljb95m.cpp:27:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmp2cljb95m.cpp:28:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmp2cljb95m.cpp:28:3:\
    \ error: expected ')' before 'for'\n/tmp/tmp2cljb95m.cpp:28:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmp2cljb95m.cpp:31:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmp2cljb95m.cpp:31:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp2cljb95m.cpp:31:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp2cljb95m.cpp:31:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2cljb95m.cpp:31:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp2cljb95m.cpp: In function 'int main()':\n/tmp/tmp2cljb95m.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2cljb95m.cpp:2:\n/tmp/tmp2cljb95m.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones_count;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /=\
    \ 2;\n    }\n    ones_count.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (auto i : ones_count) {\n    result.push_back(i.second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37tkcju7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp37tkcju7.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones_count;\n \
    \                                 ^\n/tmp/tmp37tkcju7.cpp:16:13: error: 'i' does\
    \ not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp37tkcju7.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones_count.begin(), ones_count.end());\n\
    \   ^\n/tmp/tmp37tkcju7.cpp:27:49: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones_count.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones_count.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>,\
    \ std::allocator<std::pair<int, long int> > >())' from 'void' to 'bool'\n   std::sort(ones_count.begin(),\
    \ ones_count.end());\n                                                 ^\n/tmp/tmp37tkcju7.cpp:28:3:\
    \ error: expected primary-expression before 'for'\n   for (auto i : ones_count)\
    \ {\n   ^\n/tmp/tmp37tkcju7.cpp:28:3: error: expected ')' before 'for'\n/tmp/tmp37tkcju7.cpp:28:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones_count) {\n          \
    \   ^\n/tmp/tmp37tkcju7.cpp:31:3: error: expected ';' before 'return'\n   return\
    \ result;\n   ^\n/tmp/tmp37tkcju7.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp37tkcju7.cpp:31:3: error: expected ';' before 'return'\n\
    /tmp/tmp37tkcju7.cpp:31:3: error: expected primary-expression before 'return'\n\
    /tmp/tmp37tkcju7.cpp:31:3: error: expected ')' before 'return'\n/tmp/tmp37tkcju7.cpp:\
    \ In function 'int main()':\n/tmp/tmp37tkcju7.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp37tkcju7.cpp:2:\n/tmp/tmp37tkcju7.cpp:35:40: warning:\
    \ extended"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted = arr;\n  std::sort(sorted.begin(), sorted.end(),\
    \ [](long a, long b) {\n    int a_ones = std::bitset<32>(a).count();\n    int\
    \ b_ones = std::bitset<32>(b).count();\n    if (a_ones == b_ones) {\n      return\
    \ a < b;\n    }\n    return a_ones < b_ones;\n  });\n  return sorted;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsbwm7l2.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpwsbwm7l2.cpp:22:3: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n   });\n   ^\n/tmp/tmpwsbwm7l2.cpp:22:4:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n\
    \   });\n    ^\n/tmp/tmpwsbwm7l2.cpp:22:4: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpwsbwm7l2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwsbwm7l2.cpp:22:4:\
    \ note:   candidate expects 2 arguments, 3 provided\n   });\n    ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpwsbwm7l2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpwsbwm7l2.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = sort_array(std::vector<long int>)::__lambda0]':\n/tmp/tmpwsbwm7l2.cpp:22:4:\
    \   required from here\n/tmp/tmpwsbwm7l2.cpp:22:4: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local type 'sort_array(std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<long, long> map;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    map[count] = arr[i];\n  }\n  for (auto it = map.begin();\
    \ it != map.end(); it++) {\n    result.push_back(it->second);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyr_7zuw.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpnyr_7zuw.cpp:27:13: error: 'it' does not name a type\n   for\
    \ (auto it = map.begin(); it != map.end(); it++) {\n             ^\n/tmp/tmpnyr_7zuw.cpp:27:31:\
    \ error: expected ';' before 'it'\n   for (auto it = map.begin(); it != map.end();\
    \ it++) {\n                               ^\n/tmp/tmpnyr_7zuw.cpp:27:31: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpnyr_7zuw.cpp: In function 'int\
    \ main()':\n/tmp/tmpnyr_7zuw.cpp:33:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyr_7zuw.cpp:2:\n/tmp/tmpnyr_7zuw.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpnyr_7zuw.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpnyr_7zuw.cpp:34:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpnyr_7zuw.cpp:34:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnyr_7zuw.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrcoc8xm.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpsrcoc8xm.cpp:61:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpsrcoc8xm.cpp: In function 'int main()':\n/tmp/tmpsrcoc8xm.cpp:63:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsrcoc8xm.cpp:2:\n/tmp/tmpsrcoc8xm.cpp:64:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpsrcoc8xm.cpp:64:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpsrcoc8xm.cpp:64:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsrcoc8xm.cpp:64:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsrcoc8xm.cpp:64:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsrcoc8xm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> neg;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n    } else if (arr[i] ==\
    \ 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(neg.begin(),\
    \ neg.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i <\
    \ neg.size(); i++) {\n    result.push_back(neg[i]);\n  }\n  for (int i = 0; i\
    \ < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i =\
    \ 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsh0zkgv5.cpp: In function 'int main()':\n/tmp/tmpsh0zkgv5.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsh0zkgv5.cpp:2:\n/tmp/tmpsh0zkgv5.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpsh0zkgv5.cpp:43:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpsh0zkgv5.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsh0zkgv5.cpp:43:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsh0zkgv5.cpp:43:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsh0zkgv5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int cntA\
    \ = std::bitset<32>(a).count();\n    int cntB = std::bitset<32>(b).count();\n\
    \    if (cntA == cntB) {\n      return a < b;\n    }\n    return cntA < cntB;\n\
    \  });\n  return arr;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7ng7z4g.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpw7ng7z4g.cpp:21:3: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n   });\n   ^\n/tmp/tmpw7ng7z4g.cpp:21:4:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n\
    \   });\n    ^\n/tmp/tmpw7ng7z4g.cpp:21:4: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpw7ng7z4g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw7ng7z4g.cpp:21:4:\
    \ note:   candidate expects 2 arguments, 3 provided\n   });\n    ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpw7ng7z4g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpw7ng7z4g.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = sort_array(std::vector<long int>)::__lambda0]':\n/tmp/tmpw7ng7z4g.cpp:21:4:\
    \   required from here\n/tmp/tmpw7ng7z4g.cpp:21:4: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local type 'sort_array(std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<std::pair<int, int>> v;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    for (int j = 0; j < 32; j++) {\n      if (arr[i]\
    \ & (1 << j)) {\n        count++;\n      }\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> ans;\n\
    \  for (int i = 0; i < v.size(); i++) {\n    ans.push_back(v[i].second);\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeehx6nxv.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpeehx6nxv.cpp:14:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpeehx6nxv.cpp: In function 'int main()':\n/tmp/tmpeehx6nxv.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeehx6nxv.cpp:2:\n/tmp/tmpeehx6nxv.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpeehx6nxv.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpeehx6nxv.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpeehx6nxv.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpeehx6nxv.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeehx6nxv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  std::vector<long> positives;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if\
    \ (arr[i] > 0) {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < negatives.size(); i++) {\n    result.push_back(negatives[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    result.push_back(positives[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dqgq8ww.cpp: In function 'int main()':\n/tmp/tmp2dqgq8ww.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2dqgq8ww.cpp:2:\n/tmp/tmp2dqgq8ww.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp2dqgq8ww.cpp:44:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp2dqgq8ww.cpp:44:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2dqgq8ww.cpp:44:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2dqgq8ww.cpp:44:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2dqgq8ww.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long\
    \ temp = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n       \
    \ count++;\n      }\n      temp /= 2;\n    }\n    if (count == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (long i = 0; i\
    \ < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (long i\
    \ = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y9h25k.cpp: In function 'int main()':\n/tmp/tmp98y9h25k.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp98y9h25k.cpp:2:\n/tmp/tmp98y9h25k.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp98y9h25k.cpp:44:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp98y9h25k.cpp:44:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp98y9h25k.cpp:44:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp98y9h25k.cpp:44:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp98y9h25k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  // your code here\n  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg017a4ah.cpp: In function 'int main()':\n/tmp/tmpg017a4ah.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg017a4ah.cpp:2:\n/tmp/tmpg017a4ah.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpg017a4ah.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpg017a4ah.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpg017a4ah.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg017a4ah.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg017a4ah.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cmafkmm.cpp: In function 'int main()':\n/tmp/tmp6cmafkmm.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6cmafkmm.cpp:2:\n/tmp/tmp6cmafkmm.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6cmafkmm.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6cmafkmm.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6cmafkmm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n \
    \     sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (long i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (long i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2rbkgmj.cpp: In function 'int main()':\n/tmp/tmpe2rbkgmj.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe2rbkgmj.cpp:2:\n/tmp/tmpe2rbkgmj.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpe2rbkgmj.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpe2rbkgmj.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpe2rbkgmj.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe2rbkgmj.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe2rbkgmj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num & 1) {\n        count++;\n      }\n    \
    \  num = num >> 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcq3_br75.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpcq3_br75.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpcq3_br75.cpp: In function 'int main()':\n\
    /tmp/tmpcq3_br75.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcq3_br75.cpp:2:\n/tmp/tmpcq3_br75.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpcq3_br75.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpcq3_br75.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcq3_br75.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcq3_br75.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcq3_br75.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzocvbvoh.cpp: In function 'int main()':\n/tmp/tmpzocvbvoh.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzocvbvoh.cpp:2:\n/tmp/tmpzocvbvoh.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzocvbvoh.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzocvbvoh.cpp:39:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzocvbvoh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\
    \ {\n        count++;\n      }\n      i = i >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgl1z_08.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmgl1z_08.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpmgl1z_08.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpmgl1z_08.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpmgl1z_08.cpp:30:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected ')' before 'return'\n\
    /tmp/tmpmgl1z_08.cpp: In function 'int main()':\n/tmp/tmpmgl1z_08.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmgl1z_08.cpp:2:\n/tmp/tmpmgl1z_08.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmgl1z_08.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n      res.push_back(i);\n\
    \    } else {\n      if (__builtin_popcount(i) == 0) {\n        zeros.push_back(i);\n\
    \      } else {\n        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (auto i : ones)\
    \ {\n    res.push_back(i);\n  }\n  for (auto i : zeros) {\n    res.push_back(i);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbuzsbvj.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpvbuzsbvj.cpp:17:13: error: 'i' does not name a type\n   for\
    \ (auto i : arr) {\n             ^\n/tmp/tmpvbuzsbvj.cpp:28:3: error: expected\
    \ ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n   ^\n/tmp/tmpvbuzsbvj.cpp:28:37:\
    \ error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(ones.std::vector<_Tp, _Alloc>::begin<long int, std::allocator<long\
    \ int> >(), ones.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long int>\
    \ >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n     \
    \                                ^\n/tmp/tmpvbuzsbvj.cpp:29:40: error: expected\
    \ ')' before ';' token\n   std::sort(zeros.begin(), zeros.end());\n          \
    \                              ^\n/tmp/tmpvbuzsbvj.cpp:30:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpvbuzsbvj.cpp:33:3:\
    \ error: expected ';' before 'for'\n   for (auto i : zeros) {\n   ^\n/tmp/tmpvbuzsbvj.cpp:33:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpvbuzsbvj.cpp:33:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpvbuzsbvj.cpp:33:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpvbuzsbvj.cpp:33:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpvbuzsbvj.cpp:33:13: error: 'i' does not name a type\n\
    \   for (auto i : zeros) {\n             ^\n/tmp/tmpvbuzsbvj.cpp:36:3: error:\
    \ expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmpvbuzsbvj.cpp:36:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpvbuzsbvj.cpp:36:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpvbuzsbvj.cpp:36:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpvbuzsbvj.cpp:36:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpvbuzsbvj.cpp: In function 'int main()':\n/tmp/tmpvbuzsbvj.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while (num)\
    \ {\n      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdc03qxaw.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpdc03qxaw.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpdc03qxaw.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpdc03qxaw.cpp:25:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpdc03qxaw.cpp:25:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpdc03qxaw.cpp:25:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpdc03qxaw.cpp:25:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpdc03qxaw.cpp:25:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpdc03qxaw.cpp:25:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpdc03qxaw.cpp:31:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmpdc03qxaw.cpp:31:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpdc03qxaw.cpp:31:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpdc03qxaw.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpdc03qxaw.cpp:31:3: error: expected ')' before 'return'\n\
    /tmp/tmpdc03qxaw.cpp: In function 'int main()':\n/tmp/tmpdc03qxaw.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpdc03qxaw.cpp:2:\n/tmp/tmpdc03qxaw.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpdc03qxaw.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cmafkmm.cpp: In function 'int main()':\n/tmp/tmp6cmafkmm.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6cmafkmm.cpp:2:\n/tmp/tmp6cmafkmm.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6cmafkmm.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6cmafkmm.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6cmafkmm.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6cmafkmm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<long> one;\n  std::vector<long>\
    \ zero;\n  std::vector<long> neg;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      neg.push_back(arr[i]);\n    } else if (arr[i] ==\
    \ 0) {\n      zero.push_back(arr[i]);\n    } else if (arr[i] == 1) {\n      one.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      long temp = arr[i];\n      while (temp\
    \ != 0) {\n        if (temp % 2 == 1) {\n          count++;\n        }\n     \
    \   temp = temp / 2;\n      }\n      res.push_back(count);\n    }\n  }\n  std::sort(neg.begin(),\
    \ neg.end());\n  std::sort(one.begin(), one.end());\n  std::sort(zero.begin(),\
    \ zero.end());\n  std::sort(res.begin(), res.end());\n  for (int i = 0; i < neg.size();\
    \ i++) {\n    arr[i] = neg[i];\n  }\n  int k = 0;\n  for (int i = neg.size();\
    \ i < neg.size() + zero.size(); i++) {\n    arr[i] = zero[k];\n    k++;\n  }\n\
    \  k = 0;\n  for (int i = neg.size() + zero.size(); i < neg.size() + zero.size()\
    \ + one.size(); i++) {\n    arr[i] = one[k];\n    k++;\n  }\n  k = 0;\n  for (int\
    \ i = neg.size() + zero.size() + one.size(); i < arr.size(); i++) {\n    arr[i]\
    \ = res[k];\n    k++;\n  }\n  return arr;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk68qtuwb.cpp: In function 'int main()':\n/tmp/tmpk68qtuwb.cpp:62:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk68qtuwb.cpp:2:\n/tmp/tmpk68qtuwb.cpp:63:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpk68qtuwb.cpp:63:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpk68qtuwb.cpp:63:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk68qtuwb.cpp:63:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk68qtuwb.cpp:63:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk68qtuwb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      int count = 0;\n      int\
    \ temp = arr[i];\n      while (temp > 0) {\n        if (temp % 2 == 1) {\n   \
    \       count++;\n        }\n        temp /= 2;\n      }\n      if (count == 0)\
    \ {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48todi29.cpp: In function 'int main()':\n/tmp/tmp48todi29.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp48todi29.cpp:2:\n/tmp/tmp48todi29.cpp:48:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp48todi29.cpp:48:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp48todi29.cpp:48:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp48todi29.cpp:48:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp48todi29.cpp:48:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp48todi29.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  // your code here\n  std::vector<long> res;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int num = i;\n    while\
    \ (num) {\n      if (num & 1) count++;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) res.push_back(j);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbjmm4ih.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpnbjmm4ih.cpp:16:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpnbjmm4ih.cpp:17:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpnbjmm4ih.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpnbjmm4ih.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpnbjmm4ih.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpnbjmm4ih.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpnbjmm4ih.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpnbjmm4ih.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpnbjmm4ih.cpp:30:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmpnbjmm4ih.cpp:30:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpnbjmm4ih.cpp:30:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpnbjmm4ih.cpp:30:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpnbjmm4ih.cpp:30:3: error: expected ')' before 'return'\n\
    /tmp/tmpnbjmm4ih.cpp: In function 'int main()':\n/tmp/tmpnbjmm4ih.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpnbjmm4ih.cpp:2:\n/tmp/tmpnbjmm4ih.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpnbjmm4ih.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num =\
    \ arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n\
    \      }\n      num /= 2;\n    }\n    map[count].push_back(arr[i]);\n  }\n  for\
    \ (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (int i = 0; i < it->second.size(); i++) {\n    \
    \  result.push_back(it->second[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsuiscbl.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpwsuiscbl.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpwsuiscbl.cpp:27:13: error: 'it' does not name\
    \ a type\n   for (auto it = map.begin(); it != map.end(); it++) {\n          \
    \   ^\n/tmp/tmpwsuiscbl.cpp:27:31: error: expected ';' before 'it'\n   for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n                               ^\n\
    /tmp/tmpwsuiscbl.cpp:27:31: error: 'it' was not declared in this scope\n/tmp/tmpwsuiscbl.cpp:\
    \ In function 'int main()':\n/tmp/tmpwsuiscbl.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwsuiscbl.cpp:2:\n/tmp/tmpwsuiscbl.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpwsuiscbl.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpwsuiscbl.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpwsuiscbl.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwsuiscbl.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::map<int, std::vector<long>> mp;\n \
    \ for (auto i : arr) {\n    int cnt = 0;\n    while (i) {\n      cnt += i & 1;\n\
    \      i >>= 1;\n    }\n    mp[cnt].push_back(i);\n  }\n  for (auto i : mp) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(), i.second.begin(),\
    \ i.second.end());\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx3kuvwrk.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpx3kuvwrk.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> mp;\n          \
    \                       ^\n/tmp/tmpx3kuvwrk.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpx3kuvwrk.cpp:24:3:\
    \ error: expected ';' before 'for'\n   for (auto i : mp) {\n   ^\n/tmp/tmpx3kuvwrk.cpp:24:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpx3kuvwrk.cpp:24:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpx3kuvwrk.cpp:24:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpx3kuvwrk.cpp:24:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpx3kuvwrk.cpp:24:13: error: 'i' does not name a type\n\
    \   for (auto i : mp) {\n             ^\n/tmp/tmpx3kuvwrk.cpp:28:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmpx3kuvwrk.cpp:28:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpx3kuvwrk.cpp:28:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpx3kuvwrk.cpp:28:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpx3kuvwrk.cpp:28:3: error: expected ')' before 'return'\n\
    /tmp/tmpx3kuvwrk.cpp: In function 'int main()':\n/tmp/tmpx3kuvwrk.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpx3kuvwrk.cpp:2:\n/tmp/tmpx3kuvwrk.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpx3kuvwrk.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      int count = 0;\n      int\
    \ temp = arr[i];\n      while (temp) {\n        count += temp & 1;\n        temp\
    \ >>= 1;\n      }\n      if (count == 0) {\n        zeros.push_back(arr[i]);\n\
    \      } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_js_3a4o.cpp: In function 'int main()':\n/tmp/tmp_js_3a4o.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_js_3a4o.cpp:2:\n/tmp/tmp_js_3a4o.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp_js_3a4o.cpp:46:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp_js_3a4o.cpp:46:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_js_3a4o.cpp:46:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_js_3a4o.cpp:46:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_js_3a4o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int temp = arr[i];\n\
    \    while (temp) {\n      ones += temp & 1;\n      temp >>= 1;\n    }\n    count.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(count.begin(), count.end());\n  for (int i = 0;\
    \ i < count.size(); i++) {\n    result.push_back(count[i].second);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo87yutdi.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpo87yutdi.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> count;\n       \
    \                          ^\n/tmp/tmpo87yutdi.cpp: In function 'int main()':\n\
    /tmp/tmpo87yutdi.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo87yutdi.cpp:2:\n/tmp/tmpo87yutdi.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpo87yutdi.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpo87yutdi.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpo87yutdi.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpo87yutdi.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpo87yutdi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int decimal\
    \ = arr[i];\n    while (decimal > 0) {\n      if (decimal % 2 == 1) {\n      \
    \  ones++;\n      }\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    result.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2w7fcpms.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp2w7fcpms.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones_and_decimal;\n\
    \                                 ^\n/tmp/tmp2w7fcpms.cpp: In function 'int main()':\n\
    /tmp/tmp2w7fcpms.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2w7fcpms.cpp:2:\n/tmp/tmp2w7fcpms.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp2w7fcpms.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp2w7fcpms.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp2w7fcpms.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2w7fcpms.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2w7fcpms.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\
    \ {\n        count++;\n      }\n      i = i >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgl1z_08.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmgl1z_08.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpmgl1z_08.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmgl1z_08.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpmgl1z_08.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpmgl1z_08.cpp:30:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmgl1z_08.cpp:30:3: error: expected ')' before 'return'\n\
    /tmp/tmpmgl1z_08.cpp: In function 'int main()':\n/tmp/tmpmgl1z_08.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmgl1z_08.cpp:2:\n/tmp/tmpmgl1z_08.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmgl1z_08.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int number\
    \ = arr[i];\n    while (number > 0) {\n      if (number % 2 == 1) {\n        count++;\n\
    \      }\n      number /= 2;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1_waedm.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpe1_waedm.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpe1_waedm.cpp: In function 'int main()':\n\
    /tmp/tmpe1_waedm.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe1_waedm.cpp:2:\n/tmp/tmpe1_waedm.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpe1_waedm.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpe1_waedm.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpe1_waedm.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe1_waedm.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe1_waedm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> result;\n    std::vector<long> ones;\n    std::vector<long>\
    \ zeros;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0)\
    \ {\n            result.push_back(arr[i]);\n        } else {\n            if (arr[i]\
    \ == 0) {\n                zeros.push_back(arr[i]);\n            } else {\n  \
    \              ones.push_back(arr[i]);\n            }\n        }\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    std::sort(zeros.begin(), zeros.end());\n    for (int i = 0;\
    \ i < ones.size(); i++) {\n        result.push_back(ones[i]);\n    }\n    for\
    \ (int i = 0; i < zeros.size(); i++) {\n        result.push_back(zeros[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmsvvbx6x.cpp: In function 'int main()':\n/tmp/tmpmsvvbx6x.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmsvvbx6x.cpp:2:\n/tmp/tmpmsvvbx6x.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmsvvbx6x.cpp:40:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpmsvvbx6x.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmsvvbx6x.cpp:40:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmsvvbx6x.cpp:40:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmsvvbx6x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp)\
    \ {\n      if (temp & 1)\n        count++;\n      temp = temp >> 1;\n    }\n \
    \   map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    for (auto j : i.second)\n      result.push_back(j);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwb5vkrn.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpwwb5vkrn.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpwwb5vkrn.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpwwb5vkrn.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpwwb5vkrn.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpwwb5vkrn.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpwwb5vkrn.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpwwb5vkrn.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpwwb5vkrn.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpwwb5vkrn.cpp:31:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpwwb5vkrn.cpp:31:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpwwb5vkrn.cpp:31:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpwwb5vkrn.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpwwb5vkrn.cpp:31:3: error: expected ')' before 'return'\n\
    /tmp/tmpwwb5vkrn.cpp: In function 'int main()':\n/tmp/tmpwwb5vkrn.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpwwb5vkrn.cpp:2:\n/tmp/tmpwwb5vkrn.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpwwb5vkrn.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::map<int, std::vector<long>> mp;\n \
    \ for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i\
    \ & 1;\n      i >>= 1;\n    }\n    mp[count].push_back(i);\n  }\n  for (auto i\
    \ : mp) {\n    std::sort(i.second.begin(), i.second.end());\n    res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmygbw857.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmygbw857.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> mp;\n          \
    \                       ^\n/tmp/tmpmygbw857.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpmygbw857.cpp:24:3:\
    \ error: expected ';' before 'for'\n   for (auto i : mp) {\n   ^\n/tmp/tmpmygbw857.cpp:24:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpmygbw857.cpp:24:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpmygbw857.cpp:24:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpmygbw857.cpp:24:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpmygbw857.cpp:24:13: error: 'i' does not name a type\n\
    \   for (auto i : mp) {\n             ^\n/tmp/tmpmygbw857.cpp:28:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmpmygbw857.cpp:28:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpmygbw857.cpp:28:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpmygbw857.cpp:28:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmygbw857.cpp:28:3: error: expected ')' before 'return'\n\
    /tmp/tmpmygbw857.cpp: In function 'int main()':\n/tmp/tmpmygbw857.cpp:31:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpmygbw857.cpp:2:\n/tmp/tmpmygbw857.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmygbw857.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    long ones = 0;\n    long decimal = i;\n    while\
    \ (decimal) {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n     \
    \ decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n\
    \  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto\
    \ i : ones_and_decimal) {\n    result.push_back(i.second);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqr2g0ycn.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpqr2g0ycn.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, long>> ones_and_decimal;\n\
    \                                   ^\n/tmp/tmpqr2g0ycn.cpp:16:13: error: 'i'\
    \ does not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpqr2g0ycn.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \   ^\n/tmp/tmpqr2g0ycn.cpp:27:61: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, long int>*, std::vector<std::pair<long int, long int> > > >(ones_and_decimal.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<long int, long int>, std::allocator<std::pair<long\
    \ int, long int> > >(), ones_and_decimal.std::vector<_Tp, _Alloc>::end<std::pair<long\
    \ int, long int>, std::allocator<std::pair<long int, long int> > >())' from 'void'\
    \ to 'bool'\n   std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \                                                             ^\n/tmp/tmpqr2g0ycn.cpp:28:3:\
    \ error: expected primary-expression before 'for'\n   for (auto i : ones_and_decimal)\
    \ {\n   ^\n/tmp/tmpqr2g0ycn.cpp:28:3: error: expected ')' before 'for'\n/tmp/tmpqr2g0ycn.cpp:28:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones_and_decimal) {\n    \
    \         ^\n/tmp/tmpqr2g0ycn.cpp:31:3: error: expected ';' before 'return'\n\
    \   return result;\n   ^\n/tmp/tmpqr2g0ycn.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpqr2g0ycn.cpp:31:3: error: expected ';' before 'return'\n\
    /tmp/tmpqr2g0ycn.cpp:31:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpqr2g0ycn.cpp:31:3: error: expected ')' before 'return'\n/tmp/tmpqr2g0ycn.cpp:\
    \ In function 'int main()':\n/tmp/tmpqr2g0ycn.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<long, int>> temp;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while (num\
    \ > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n\
    \    }\n    temp.push_back(std::make_pair(i, count));\n  }\n  std::sort(temp.begin(),\
    \ temp.end(), [](std::pair<long, int> a, std::pair<long, int> b) {\n    if (a.second\
    \ == b.second) {\n      return a.first < b.first;\n    }\n    return a.second\
    \ < b.second;\n  });\n  for (auto i : temp) {\n    result.push_back(i.first);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6gx0fvf1.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp6gx0fvf1.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, int>> temp;\n       \
    \                           ^\n/tmp/tmp6gx0fvf1.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp6gx0fvf1.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(temp.begin(), temp.end(), [](std::pair<long,\
    \ int> a, std::pair<long, int> b) {\n   ^\n/tmp/tmp6gx0fvf1.cpp:32:3: warning:\
    \ lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n   });\n   ^\n/tmp/tmp6gx0fvf1.cpp:32:4: error: no matching function\
    \ for call to 'sort(std::vector<std::pair<long int, int> >::iterator, std::vector<std::pair<long\
    \ int, int> >::iterator, sort_array(std::vector<long int>)::__lambda0)'\n   });\n\
    \    ^\n/tmp/tmp6gx0fvf1.cpp:32:4: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp6gx0fvf1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6gx0fvf1.cpp:32:4:\
    \ note:   candidate expects 2 arguments, 3 provided\n   });\n    ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp6gx0fvf1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6gx0fvf1.cpp: In sub"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for\
    \ (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp) {\n\
    \      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu9jnt0sl.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpu9jnt0sl.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpu9jnt0sl.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpu9jnt0sl.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(v.begin(), v.end());\n   ^\n\
    /tmp/tmpu9jnt0sl.cpp:25:31: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ int>*, std::vector<std::pair<int, int> > > >(v.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >(), v.std::vector<_Tp, _Alloc>::end<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >())' from 'void' to 'bool'\n   std::sort(v.begin(),\
    \ v.end());\n                               ^\n/tmp/tmpu9jnt0sl.cpp:26:3: error:\
    \ expected primary-expression before 'for'\n   for (auto i : v) {\n   ^\n/tmp/tmpu9jnt0sl.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpu9jnt0sl.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : v) {\n             ^\n/tmp/tmpu9jnt0sl.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmpu9jnt0sl.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpu9jnt0sl.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpu9jnt0sl.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpu9jnt0sl.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpu9jnt0sl.cpp: In function 'int main()':\n/tmp/tmpu9jnt0sl.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu9jnt0sl.cpp:2:\n/tmp/tmpu9jnt0sl.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> pairs;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      if (temp & 1) {\n        count++;\n      }\n      temp >>= 1;\n   \
    \ }\n    pairs.push_back(std::make_pair(count, i));\n  }\n  std::sort(pairs.begin(),\
    \ pairs.end());\n  for (auto i : pairs) {\n    result.push_back(i.second);\n \
    \ }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpas7tp696.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpas7tp696.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> pairs;\n      \
    \                            ^\n/tmp/tmpas7tp696.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpas7tp696.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(pairs.begin(), pairs.end());\n\
    \   ^\n/tmp/tmpas7tp696.cpp:27:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(pairs.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), pairs.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(pairs.begin(), pairs.end());\n\
    \                                       ^\n/tmp/tmpas7tp696.cpp:28:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : pairs) {\n   ^\n/tmp/tmpas7tp696.cpp:28:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpas7tp696.cpp:28:13: error: 'i' does\
    \ not name a type\n   for (auto i : pairs) {\n             ^\n/tmp/tmpas7tp696.cpp:31:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpas7tp696.cpp:31:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpas7tp696.cpp:31:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpas7tp696.cpp:31:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpas7tp696.cpp:31:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpas7tp696.cpp: In function 'int main()':\n/tmp/tmpas7tp696.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpas7tp696.cpp:2:\n/tmp/tmpas7tp696.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> ans;\n    std::map<int, std::vector<long>> m;\n\
    \    for (auto i : arr) {\n        int c = 0;\n        for (int j = 0; j < 32;\
    \ j++) {\n            if (i & (1 << j)) {\n                c++;\n            }\n\
    \        }\n        m[c].push_back(i);\n    }\n    for (auto i : m) {\n      \
    \  std::sort(i.second.begin(), i.second.end());\n        for (auto j : i.second)\
    \ {\n            ans.push_back(j);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0zbmfm9.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpk0zbmfm9.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n     std::map<int, std::vector<long>> m;\n         \
    \                          ^\n/tmp/tmpk0zbmfm9.cpp:16:15: error: 'i' does not\
    \ name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpk0zbmfm9.cpp:25:5:\
    \ error: expected ';' before 'for'\n     for (auto i : m) {\n     ^\n/tmp/tmpk0zbmfm9.cpp:25:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpk0zbmfm9.cpp:25:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpk0zbmfm9.cpp:25:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpk0zbmfm9.cpp:25:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpk0zbmfm9.cpp:25:15: error: 'i' does not name a type\n\
    \     for (auto i : m) {\n               ^\n/tmp/tmpk0zbmfm9.cpp:31:5: error:\
    \ expected ';' before 'return'\n     return ans;\n     ^\n/tmp/tmpk0zbmfm9.cpp:31:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpk0zbmfm9.cpp:31:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpk0zbmfm9.cpp:31:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpk0zbmfm9.cpp:31:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpk0zbmfm9.cpp: In function 'int main()':\n/tmp/tmpk0zbmfm9.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk0zbmfm9.cpp:2:\n/tmp/tmpk0zbmfm9.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpk0zbmfm9.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  std::vector<long> positives;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if\
    \ (arr[i] > 0) {\n      positives.push_back(arr[i]);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(positives.begin(), positives.end());\n  for (int\
    \ i = 0; i < positives.size(); i++) {\n    int count = 0;\n    long temp = positives[i];\n\
    \    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n\
    \      temp /= 2;\n    }\n    ones.push_back(count);\n  }\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < positives.size(); i++) {\n    temp.push_back(positives[i]);\n\
    \  }\n  for (int i = 0; i < positives.size(); i++) {\n    for (int j = 0; j <\
    \ positives.size(); j++) {\n      if (ones[i] < ones[j]) {\n        long temp1\
    \ = positives[i];\n        positives[i] = positives[j];\n        positives[j]\
    \ = temp1;\n        long temp2 = ones[i];\n        ones[i] = ones[j];\n      \
    \  ones[j] = temp2;\n      } else if (ones[i] == ones[j]) {\n        if (temp[i]\
    \ > temp[j]) {\n          long temp1 = positives[i];\n          positives[i] =\
    \ positives[j];\n          positives[j] = temp1;\n          long temp2 = ones[i];\n\
    \          ones[i] = ones[j];\n          ones[j] = temp\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpow48my.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmpow48my.cpp:61:19: error: cannot convert 'std::vector<long\
    \ int>' to 'long int' in assignment\n           ones[j] = temp\n             \
    \      ^\n/tmp/tmpmpow48my.cpp:62:1: error: expected ';' before '}' token\n }\n\
    \ ^\n/tmp/tmpmpow48my.cpp:63:12: error: a function-definition is not allowed here\
    \ before '{' token\n int main() {\n            ^\n/tmp/tmpmpow48my.cpp:73:1: error:\
    \ expected '}' at end of input\n }\n ^\n/tmp/tmpmpow48my.cpp:73:1: error: expected\
    \ '}' at end of input\n/tmp/tmpmpow48my.cpp:73:1: error: expected '}' at end of\
    \ input\n/tmp/tmpmpow48my.cpp:73:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<long, long>> temp;\n\
    \  for (auto i : arr) {\n    long count = 0;\n    long num = i;\n    while (num)\
    \ {\n      count += num & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n\
    \    result.push_back(i.second);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0yv1m4zv.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0yv1m4zv.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, long>> temp;\n      \
    \                             ^\n/tmp/tmp0yv1m4zv.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp0yv1m4zv.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(temp.begin(), temp.end());\n\
    \   ^\n/tmp/tmp0yv1m4zv.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, long int>*, std::vector<std::pair<long int, long int> > > >(temp.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<long int, long int>, std::allocator<std::pair<long\
    \ int, long int> > >(), temp.std::vector<_Tp, _Alloc>::end<std::pair<long int,\
    \ long int>, std::allocator<std::pair<long int, long int> > >())' from 'void'\
    \ to 'bool'\n   std::sort(temp.begin(), temp.end());\n                       \
    \              ^\n/tmp/tmp0yv1m4zv.cpp:26:3: error: expected primary-expression\
    \ before 'for'\n   for (auto i : temp) {\n   ^\n/tmp/tmp0yv1m4zv.cpp:26:3: error:\
    \ expected ')' before 'for'\n/tmp/tmp0yv1m4zv.cpp:26:13: error: 'i' does not name\
    \ a type\n   for (auto i : temp) {\n             ^\n/tmp/tmp0yv1m4zv.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmp0yv1m4zv.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp0yv1m4zv.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp0yv1m4zv.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp0yv1m4zv.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp0yv1m4zv.cpp: In function 'int main()':\n/tmp/tmp0yv1m4zv.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0yv1m4zv.cpp:2:\n/tmp/tmp0yv1m4zv.cpp:33:40: warning:\
    \ extended initializer lists only available "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int ones = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        ones++;\n      }\n\
    \      num /= 2;\n    }\n    count.push_back(std::make_pair(ones, arr[i]));\n\
    \  }\n  std::sort(count.begin(), count.end());\n  for (int i = 0; i < count.size();\
    \ i++) {\n    result.push_back(count[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7s2y243j.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp7s2y243j.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> count;\n       \
    \                          ^\n/tmp/tmp7s2y243j.cpp: In function 'int main()':\n\
    /tmp/tmp7s2y243j.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7s2y243j.cpp:2:\n/tmp/tmp7s2y243j.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp7s2y243j.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp7s2y243j.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7s2y243j.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7s2y243j.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7s2y243j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8e3703go.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp8e3703go.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmp8e3703go.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp8e3703go.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmp8e3703go.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmp8e3703go.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmp8e3703go.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmp8e3703go.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmp8e3703go.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmp8e3703go.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8e3703go.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp8e3703go.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8e3703go.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp8e3703go.cpp: In function 'int main()':\n/tmp/tmp8e3703go.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8e3703go.cpp:2:\n/tmp/tmp8e3703go.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [en"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  for (auto i : arr) {\n    if (i <\
    \ 0) {\n      negatives.push_back(i);\n    } else if (i == 0) {\n      zeros.push_back(i);\n\
    \    } else {\n      ones.push_back(i);\n    }\n  }\n  std::sort(negatives.begin(),\
    \ negatives.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : negatives) {\n    result.push_back(i);\n  }\n\
    \  for (auto i : zeros) {\n    result.push_back(i);\n  }\n  for (auto i : ones)\
    \ {\n    result.push_back(i);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhd036h5.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpvhd036h5.cpp:18:13: error: 'i' does not name a type\n   for\
    \ (auto i : arr) {\n             ^\n/tmp/tmpvhd036h5.cpp:27:3: error: expected\
    \ ';' before 'std'\n   std::sort(negatives.begin(), negatives.end());\n   ^\n\
    /tmp/tmpvhd036h5.cpp:27:47: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(negatives.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), negatives.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n   std::sort(negatives.begin(),\
    \ negatives.end());\n                                               ^\n/tmp/tmpvhd036h5.cpp:28:40:\
    \ error: expected ')' before ';' token\n   std::sort(zeros.begin(), zeros.end());\n\
    \                                        ^\n/tmp/tmpvhd036h5.cpp:30:13: error:\
    \ 'i' does not name a type\n   for (auto i : negatives) {\n             ^\n/tmp/tmpvhd036h5.cpp:33:3:\
    \ error: expected ';' before 'for'\n   for (auto i : zeros) {\n   ^\n/tmp/tmpvhd036h5.cpp:33:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpvhd036h5.cpp:33:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpvhd036h5.cpp:33:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpvhd036h5.cpp:33:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpvhd036h5.cpp:33:13: error: 'i' does not name a type\n\
    \   for (auto i : zeros) {\n             ^\n/tmp/tmpvhd036h5.cpp:36:3: error:\
    \ expected ';' before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpvhd036h5.cpp:36:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpvhd036h5.cpp:36:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpvhd036h5.cpp:36:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpvhd036h5.cpp:36:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpvhd036h5.cpp:36:13: error: 'i' does not name a type\n\
    \   for (auto i : ones) {\n             ^\n/tmp/tmpvhd036h5.cpp:39:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpvhd036h5.cpp:39:3: error:\
    \ expected primary-expression bef"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnqz337l.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpnnqz337l.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmpnnqz337l.cpp: In function 'int main()':\n\
    /tmp/tmpnnqz337l.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnnqz337l.cpp:2:\n/tmp/tmpnnqz337l.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpnnqz337l.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpnnqz337l.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpnnqz337l.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnnqz337l.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnnqz337l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(sorted.begin(),\
    \ sorted.end());\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzocvbvoh.cpp: In function 'int main()':\n/tmp/tmpzocvbvoh.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzocvbvoh.cpp:2:\n/tmp/tmpzocvbvoh.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzocvbvoh.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzocvbvoh.cpp:39:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzocvbvoh.cpp:39:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzocvbvoh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3mqmemmx.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp3mqmemmx.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> ones;\n        \
    \                         ^\n/tmp/tmp3mqmemmx.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp3mqmemmx.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmp3mqmemmx.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ int>*, std::vector<std::pair<int, int> > > >(ones.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int,\
    \ int>, std::allocator<std::pair<int, int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(),\
    \ ones.end());\n                                     ^\n/tmp/tmp3mqmemmx.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n   for (auto i : ones) {\n\
    \   ^\n/tmp/tmp3mqmemmx.cpp:26:3: error: expected ')' before 'for'\n/tmp/tmp3mqmemmx.cpp:26:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones) {\n             ^\n\
    /tmp/tmp3mqmemmx.cpp:29:3: error: expected ';' before 'return'\n   return res;\n\
    \   ^\n/tmp/tmp3mqmemmx.cpp:29:3: error: expected primary-expression before 'return'\n\
    /tmp/tmp3mqmemmx.cpp:29:3: error: expected ';' before 'return'\n/tmp/tmp3mqmemmx.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp3mqmemmx.cpp:29:3:\
    \ error: expected ')' before 'return'\n/tmp/tmp3mqmemmx.cpp: In function 'int\
    \ main()':\n/tmp/tmp3mqmemmx.cpp:32:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3mqmemmx.cpp:2:\n/tmp/tmp3mqmemmx.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(ca"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, int>> v;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int temp = arr[i];\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ = temp >> 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n\
    \  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size(); i++) {\n  \
    \  res.push_back(v[i].second);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0hij3rb.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpc0hij3rb.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmpc0hij3rb.cpp: In function 'int main()':\n/tmp/tmpc0hij3rb.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc0hij3rb.cpp:2:\n/tmp/tmpc0hij3rb.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpc0hij3rb.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpc0hij3rb.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc0hij3rb.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc0hij3rb.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpc0hij3rb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrcoc8xm.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpsrcoc8xm.cpp:61:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpsrcoc8xm.cpp: In function 'int main()':\n/tmp/tmpsrcoc8xm.cpp:63:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsrcoc8xm.cpp:2:\n/tmp/tmpsrcoc8xm.cpp:64:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpsrcoc8xm.cpp:64:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpsrcoc8xm.cpp:64:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpsrcoc8xm.cpp:64:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsrcoc8xm.cpp:64:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsrcoc8xm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    int num = i;\n    while (num)\
    \ {\n      if (num & 1)\n        count++;\n      num = num >> 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second)\n      result.push_back(j);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1e_7akv0.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp1e_7akv0.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmp1e_7akv0.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp1e_7akv0.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmp1e_7akv0.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp1e_7akv0.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmp1e_7akv0.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp1e_7akv0.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmp1e_7akv0.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmp1e_7akv0.cpp:31:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmp1e_7akv0.cpp:31:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp1e_7akv0.cpp:31:3: error:\
    \ expected ';' before 'return'\n/tmp/tmp1e_7akv0.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp1e_7akv0.cpp:31:3: error: expected ')' before 'return'\n\
    /tmp/tmp1e_7akv0.cpp: In function 'int main()':\n/tmp/tmp1e_7akv0.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp1e_7akv0.cpp:2:\n/tmp/tmp1e_7akv0.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp1e_7akv0.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\
    \ {\n        count++;\n      }\n      i >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkyvifhq2.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpkyvifhq2.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpkyvifhq2.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpkyvifhq2.cpp:26:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpkyvifhq2.cpp:26:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpkyvifhq2.cpp:26:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpkyvifhq2.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpkyvifhq2.cpp:26:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpkyvifhq2.cpp:26:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpkyvifhq2.cpp:30:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmpkyvifhq2.cpp:30:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpkyvifhq2.cpp:30:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpkyvifhq2.cpp:30:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpkyvifhq2.cpp:30:3: error: expected ')' before 'return'\n\
    /tmp/tmpkyvifhq2.cpp: In function 'int main()':\n/tmp/tmpkyvifhq2.cpp:33:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpkyvifhq2.cpp:2:\n/tmp/tmpkyvifhq2.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpkyvifhq2.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::vector<long> zero_count_sorted;\n  std::vector<long> one_count_sorted;\n\
    \  std::vector<long> zero_count_sorted_decimal;\n  std::vector<long> one_count_sorted_decimal;\n\
    \  std::vector<long> result_sorted;\n  std::vector<long> result_sorted_decimal;\n\
    \  std::vector<long> result_sorted_decimal_sorted;\n  std::vector<long> result_sorted_decimal_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted;\n  std::vector<long>\
    \ result_sorted_decimal_sorted_sorted_sorted_sorted;\n  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result_sorted_decimal_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> result\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wy07glg.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp7wy07glg.cpp:35:1: error: expected initializer before '}' token\n\
    \ }\n ^\n/tmp/tmp7wy07glg.cpp: In function 'int main()':\n/tmp/tmp7wy07glg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7wy07glg.cpp:2:\n/tmp/tmp7wy07glg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp7wy07glg.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp7wy07glg.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7wy07glg.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7wy07glg.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7wy07glg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/us"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      if (__builtin_popcount(arr[i])\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tsyoige.cpp: In function 'int main()':\n/tmp/tmp_tsyoige.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_tsyoige.cpp:2:\n/tmp/tmp_tsyoige.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp_tsyoige.cpp:40:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp_tsyoige.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_tsyoige.cpp:40:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_tsyoige.cpp:40:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_tsyoige.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> result;\n    std::vector<std::pair<int, int>>\
    \ ones;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n\
    \        int num = arr[i];\n        while (num) {\n            count += num &\
    \ 1;\n            num >>= 1;\n        }\n        ones.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (int i =\
    \ 0; i < ones.size(); i++) {\n        result.push_back(ones[i].second);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3m4dooaj.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp3m4dooaj.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n     std::vector<std::pair<int, int>> ones;\n      \
    \                             ^\n/tmp/tmp3m4dooaj.cpp: In function 'int main()':\n\
    /tmp/tmp3m4dooaj.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3m4dooaj.cpp:2:\n/tmp/tmp3m4dooaj.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp3m4dooaj.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp3m4dooaj.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp3m4dooaj.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3m4dooaj.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3m4dooaj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    result.push_back(arr[i]);\n    } else {\n      if (__builtin_popcount(arr[i])\
    \ == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n        ones.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw96dcv8q.cpp: In function 'int main()':\n/tmp/tmpw96dcv8q.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw96dcv8q.cpp:2:\n/tmp/tmpw96dcv8q.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpw96dcv8q.cpp:40:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpw96dcv8q.cpp:40:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpw96dcv8q.cpp:40:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw96dcv8q.cpp:40:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw96dcv8q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n  std::vector<long>\
    \ sorted_zeros;\n  std::vector<long> sorted_negatives;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else\
    \ if (arr[i] > 0) {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_negatives.begin(), sorted_negatives.end());\n\
    \  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n  for (int i = 0; i <\
    \ sorted_negatives.size(); i++) {\n    sorted.push_back(sorted_negatives[i]);\n\
    \  }\n  for (int i = 0; i < sorted_zeros.size(); i++) {\n    sorted.push_back(sorted_zeros[i]);\n\
    \  }\n  for (int i = 0; i < sorted_ones.size(); i++) {\n    sorted.push_back(sorted_ones[i]);\n\
    \  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwwh9c24.cpp: In function 'int main()':\n/tmp/tmpmwwh9c24.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmwwh9c24.cpp:2:\n/tmp/tmpmwwh9c24.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmwwh9c24.cpp:43:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpmwwh9c24.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmwwh9c24.cpp:43:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmwwh9c24.cpp:43:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmwwh9c24.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzitv9fbs.cpp: In function 'int main()':\n/tmp/tmpzitv9fbs.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzitv9fbs.cpp:2:\n/tmp/tmpzitv9fbs.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzitv9fbs.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzitv9fbs.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzitv9fbs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  // your code here\n  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long\
    \ temp = arr[i];\n    while (temp) {\n      if (temp & 1) {\n        count++;\n\
    \      }\n      temp = temp >> 1;\n    }\n    map[count].push_back(arr[i]);\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (int i = 0; i < it->second.size(); i++) {\n    \
    \  result.push_back(it->second[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxh4v3oa.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmptxh4v3oa.cpp:16:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmptxh4v3oa.cpp:28:13: error: 'it' does not name\
    \ a type\n   for (auto it = map.begin(); it != map.end(); it++) {\n          \
    \   ^\n/tmp/tmptxh4v3oa.cpp:28:31: error: expected ';' before 'it'\n   for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n                               ^\n\
    /tmp/tmptxh4v3oa.cpp:28:31: error: 'it' was not declared in this scope\n/tmp/tmptxh4v3oa.cpp:\
    \ In function 'int main()':\n/tmp/tmptxh4v3oa.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxh4v3oa.cpp:2:\n/tmp/tmptxh4v3oa.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmptxh4v3oa.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmptxh4v3oa.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmptxh4v3oa.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptxh4v3oa.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n  \
    \    sorted.push_back(arr[i]);\n    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0;\
    \ i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzitv9fbs.cpp: In function 'int main()':\n/tmp/tmpzitv9fbs.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzitv9fbs.cpp:2:\n/tmp/tmpzitv9fbs.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzitv9fbs.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzitv9fbs.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzitv9fbs.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpzitv9fbs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, int>> temp;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i < temp.size();\
    \ i++) {\n    result.push_back(temp[i].second);\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcdjs_i9p.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpcdjs_i9p.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> temp;\n        \
    \                         ^\n/tmp/tmpcdjs_i9p.cpp: In function 'int main()':\n\
    /tmp/tmpcdjs_i9p.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcdjs_i9p.cpp:2:\n/tmp/tmpcdjs_i9p.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpcdjs_i9p.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpcdjs_i9p.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcdjs_i9p.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcdjs_i9p.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcdjs_i9p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> result;\n    std::vector<std::pair<int, int>>\
    \ v;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n   \
    \     int num = arr[i];\n        while (num) {\n            count += num & 1;\n\
    \            num >>= 1;\n        }\n        v.push_back(std::make_pair(count,\
    \ arr[i]));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i\
    \ < v.size(); i++) {\n        result.push_back(v[i].second);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6y_z02j1.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp6y_z02j1.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n     std::vector<std::pair<int, int>> v;\n         \
    \                          ^\n/tmp/tmp6y_z02j1.cpp: In function 'int main()':\n\
    /tmp/tmp6y_z02j1.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6y_z02j1.cpp:2:\n/tmp/tmp6y_z02j1.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6y_z02j1.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6y_z02j1.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6y_z02j1.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6y_z02j1.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6y_z02j1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  // your code here\n  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> v;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n   \
    \ int temp = arr[i];\n    while (temp) {\n      if (temp & 1) {\n        count++;\n\
    \      }\n      temp = temp >> 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    result.push_back(v[i].second);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_vetpml8.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp_vetpml8.cpp:16:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, int>> v;\n           \
    \                      ^\n/tmp/tmp_vetpml8.cpp: In function 'int main()':\n/tmp/tmp_vetpml8.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_vetpml8.cpp:2:\n/tmp/tmp_vetpml8.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp_vetpml8.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp_vetpml8.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_vetpml8.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_vetpml8.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_vetpml8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const all"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int a_ones\
    \ = std::bitset<32>(a).count();\n    int b_ones = std::bitset<32>(b).count();\n\
    \    if (a_ones == b_ones) {\n      return a < b;\n    }\n    return a_ones <\
    \ b_ones;\n  });\n  return arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21_ta3lk.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp21_ta3lk.cpp:21:3: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n   });\n   ^\n/tmp/tmp21_ta3lk.cpp:21:4:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n\
    \   });\n    ^\n/tmp/tmp21_ta3lk.cpp:21:4: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp21_ta3lk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp21_ta3lk.cpp:21:4:\
    \ note:   candidate expects 2 arguments, 3 provided\n   });\n    ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp21_ta3lk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp21_ta3lk.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = sort_array(std::vector<long int>)::__lambda0]':\n/tmp/tmp21_ta3lk.cpp:21:4:\
    \   required from here\n/tmp/tmp21_ta3lk.cpp:21:4: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local type 'sort_array(std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, long>> v;\n \
    \ for (auto x : arr) {\n    int count = 0;\n    long temp = x;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ x));\n  }\n  std::sort(v.begin(), v.end());\n  for (auto x : v) {\n    res.push_back(x.second);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6n_4g31.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpd6n_4g31.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> v;\n          \
    \                        ^\n/tmp/tmpd6n_4g31.cpp:16:13: error: 'x' does not name\
    \ a type\n   for (auto x : arr) {\n             ^\n/tmp/tmpd6n_4g31.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(v.begin(), v.end());\n   ^\n\
    /tmp/tmpd6n_4g31.cpp:25:31: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(v.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ long int>, std::allocator<std::pair<int, long int> > >(), v.std::vector<_Tp,\
    \ _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int, long int>\
    \ > >())' from 'void' to 'bool'\n   std::sort(v.begin(), v.end());\n         \
    \                      ^\n/tmp/tmpd6n_4g31.cpp:26:3: error: expected primary-expression\
    \ before 'for'\n   for (auto x : v) {\n   ^\n/tmp/tmpd6n_4g31.cpp:26:3: error:\
    \ expected ')' before 'for'\n/tmp/tmpd6n_4g31.cpp:26:13: error: 'x' does not name\
    \ a type\n   for (auto x : v) {\n             ^\n/tmp/tmpd6n_4g31.cpp:29:3: error:\
    \ expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmpd6n_4g31.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpd6n_4g31.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpd6n_4g31.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpd6n_4g31.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpd6n_4g31.cpp: In function 'int main()':\n/tmp/tmpd6n_4g31.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd6n_4g31.cpp:2:\n/tmp/tmpd6n_4g31.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(can"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while (num)\
    \ {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsno1kb8c.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpsno1kb8c.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmpsno1kb8c.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpsno1kb8c.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmpsno1kb8c.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmpsno1kb8c.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpsno1kb8c.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpsno1kb8c.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpsno1kb8c.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpsno1kb8c.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpsno1kb8c.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpsno1kb8c.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpsno1kb8c.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpsno1kb8c.cpp: In function 'int main()':\n/tmp/tmpsno1kb8c.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsno1kb8c.cpp:2:\n/tmp/tmpsno1kb8c.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<long, long>> v;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long temp\
    \ = arr[i];\n    while (temp) {\n      count += temp & 1;\n      temp = temp >>\
    \ 1;\n    }\n    v.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  for (long i = 0; i < v.size(); i++) {\n    result.push_back(v[i].second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08f5nsmz.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp08f5nsmz.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, long>> v;\n         \
    \                          ^\n/tmp/tmp08f5nsmz.cpp: In function 'int main()':\n\
    /tmp/tmp08f5nsmz.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp08f5nsmz.cpp:2:\n/tmp/tmp08f5nsmz.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp08f5nsmz.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp08f5nsmz.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp08f5nsmz.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp08f5nsmz.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp08f5nsmz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num =\
    \ arr[i];\n    while (num > 0) {\n      count += num & 1;\n      num >>= 1;\n\
    \    }\n    map[count].push_back(arr[i]);\n  }\n  for (auto it = map.begin();\
    \ it != map.end(); it++) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    result.insert(result.end(), it->second.begin(), it->second.end());\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dl1i615.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp8dl1i615.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmp8dl1i615.cpp:25:13: error: 'it' does not name\
    \ a type\n   for (auto it = map.begin(); it != map.end(); it++) {\n          \
    \   ^\n/tmp/tmp8dl1i615.cpp:25:31: error: expected ';' before 'it'\n   for (auto\
    \ it = map.begin(); it != map.end(); it++) {\n                               ^\n\
    /tmp/tmp8dl1i615.cpp:25:31: error: 'it' was not declared in this scope\n/tmp/tmp8dl1i615.cpp:\
    \ In function 'int main()':\n/tmp/tmp8dl1i615.cpp:32:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8dl1i615.cpp:2:\n/tmp/tmp8dl1i615.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp8dl1i615.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp8dl1i615.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp8dl1i615.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8dl1i615.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/ve"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      if (i & 1)\n\
    \        count++;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n\
    \  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n  \
    \  res.insert(res.end(), i.second.begin(), i.second.end());\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3vtp4km.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpt3vtp4km.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmpt3vtp4km.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpt3vtp4km.cpp:25:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmpt3vtp4km.cpp:25:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpt3vtp4km.cpp:25:3:\
    \ error: expected ';' before 'for'\n/tmp/tmpt3vtp4km.cpp:25:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpt3vtp4km.cpp:25:3: error: expected\
    \ ')' before 'for'\n/tmp/tmpt3vtp4km.cpp:25:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmpt3vtp4km.cpp:29:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmpt3vtp4km.cpp:29:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpt3vtp4km.cpp:29:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpt3vtp4km.cpp:29:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpt3vtp4km.cpp:29:3: error: expected ')' before 'return'\n\
    /tmp/tmpt3vtp4km.cpp: In function 'int main()':\n/tmp/tmpt3vtp4km.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpt3vtp4km.cpp:2:\n/tmp/tmpt3vtp4km.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpt3vtp4km.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      if (temp & 1) {\n        count++;\n      }\n      temp >>= 1;\n   \
    \ }\n    ones.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjbtmkcr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpzjbtmkcr.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmpzjbtmkcr.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpzjbtmkcr.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmpzjbtmkcr.cpp:27:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmpzjbtmkcr.cpp:28:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpzjbtmkcr.cpp:28:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpzjbtmkcr.cpp:28:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpzjbtmkcr.cpp:31:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpzjbtmkcr.cpp:31:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpzjbtmkcr.cpp:31:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpzjbtmkcr.cpp:31:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpzjbtmkcr.cpp:31:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpzjbtmkcr.cpp: In function 'int main()':\n/tmp/tmpzjbtmkcr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzjbtmkcr.cpp:2:\n/tmp/tmpzjbtmkcr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfb401x4.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpxfb401x4.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones;\n       \
    \                           ^\n/tmp/tmpxfb401x4.cpp:16:13: error: 'i' does not\
    \ name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpxfb401x4.cpp:25:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones.begin(), ones.end());\n\
    \   ^\n/tmp/tmpxfb401x4.cpp:25:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones.std::vector<_Tp, _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int,\
    \ long int> > >())' from 'void' to 'bool'\n   std::sort(ones.begin(), ones.end());\n\
    \                                     ^\n/tmp/tmpxfb401x4.cpp:26:3: error: expected\
    \ primary-expression before 'for'\n   for (auto i : ones) {\n   ^\n/tmp/tmpxfb401x4.cpp:26:3:\
    \ error: expected ')' before 'for'\n/tmp/tmpxfb401x4.cpp:26:13: error: 'i' does\
    \ not name a type\n   for (auto i : ones) {\n             ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n   return result;\n   ^\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxfb401x4.cpp:29:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpxfb401x4.cpp: In function 'int main()':\n/tmp/tmpxfb401x4.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxfb401x4.cpp:2:\n/tmp/tmpxfb401x4.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<std::pair<int, long>> v;\n  for (auto x : arr) {\n   \
    \ int cnt = 0;\n    while (x) {\n      cnt += x % 2;\n      x /= 2;\n    }\n \
    \   v.push_back({cnt, x});\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long>\
    \ res;\n  for (auto x : v) {\n    res.push_back(x.second);\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0fv938ly.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0fv938ly.cpp:14:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> v;\n          \
    \                        ^\n/tmp/tmp0fv938ly.cpp:15:13: error: 'x' does not name\
    \ a type\n   for (auto x : arr) {\n             ^\n/tmp/tmp0fv938ly.cpp:23:3:\
    \ error: expected ';' before 'std'\n   std::sort(v.begin(), v.end());\n   ^\n\
    /tmp/tmp0fv938ly.cpp:23:31: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(v.std::vector<_Tp, _Alloc>::begin<std::pair<int,\
    \ long int>, std::allocator<std::pair<int, long int> > >(), v.std::vector<_Tp,\
    \ _Alloc>::end<std::pair<int, long int>, std::allocator<std::pair<int, long int>\
    \ > >())' from 'void' to 'bool'\n   std::sort(v.begin(), v.end());\n         \
    \                      ^\n/tmp/tmp0fv938ly.cpp:24:21: error: expected primary-expression\
    \ before 'res'\n   std::vector<long> res;\n                     ^\n/tmp/tmp0fv938ly.cpp:24:21:\
    \ error: expected ')' before 'res'\n/tmp/tmp0fv938ly.cpp:24:21: error: 'res' was\
    \ not declared in this scope\n/tmp/tmp0fv938ly.cpp:25:13: error: 'x' does not\
    \ name a type\n   for (auto x : v) {\n             ^\n/tmp/tmp0fv938ly.cpp:28:3:\
    \ error: expected ';' before 'return'\n   return res;\n   ^\n/tmp/tmp0fv938ly.cpp:28:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp0fv938ly.cpp:28:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp0fv938ly.cpp:28:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp0fv938ly.cpp:28:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp0fv938ly.cpp:28:10: error: 'res' was not declared\
    \ in this scope\n   return res;\n          ^\n/tmp/tmp0fv938ly.cpp: In function\
    \ 'int main()':\n/tmp/tmp0fv938ly.cpp:31:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while (num)\
    \ {\n      count += num & 1;\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_s5ahb56.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp_s5ahb56.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> map;\n         \
    \                        ^\n/tmp/tmp_s5ahb56.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp_s5ahb56.cpp:25:3:\
    \ error: expected ';' before 'for'\n   for (auto i : map) {\n   ^\n/tmp/tmp_s5ahb56.cpp:25:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp_s5ahb56.cpp:25:3:\
    \ error: expected ';' before 'for'\n/tmp/tmp_s5ahb56.cpp:25:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp_s5ahb56.cpp:25:3: error: expected\
    \ ')' before 'for'\n/tmp/tmp_s5ahb56.cpp:25:13: error: 'i' does not name a type\n\
    \   for (auto i : map) {\n             ^\n/tmp/tmp_s5ahb56.cpp:29:3: error: expected\
    \ ';' before 'return'\n   return result;\n   ^\n/tmp/tmp_s5ahb56.cpp:29:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp_s5ahb56.cpp:29:3: error:\
    \ expected ';' before 'return'\n/tmp/tmp_s5ahb56.cpp:29:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp_s5ahb56.cpp:29:3: error: expected ')' before 'return'\n\
    /tmp/tmp_s5ahb56.cpp: In function 'int main()':\n/tmp/tmp_s5ahb56.cpp:32:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp_s5ahb56.cpp:2:\n/tmp/tmp_s5ahb56.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp_s5ahb56.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> negatives;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] < 0) {\n      negatives.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(negatives.begin(), negatives.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ negatives.begin(), negatives.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5fl_d4x.cpp: In function 'int main()':\n/tmp/tmpa5fl_d4x.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5fl_d4x.cpp:2:\n/tmp/tmpa5fl_d4x.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpa5fl_d4x.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpa5fl_d4x.cpp:37:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpa5fl_d4x.cpp:37:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpa5fl_d4x.cpp:37:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpa5fl_d4x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<int, long>> v;\n \
    \ for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(v.begin(), v.end());\n  for (int i = 0; i < v.size();\
    \ i++) {\n    res.push_back(v[i].second);\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwjcf6xcr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpwjcf6xcr.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> v;\n          \
    \                        ^\n/tmp/tmpwjcf6xcr.cpp: In function 'int main()':\n\
    /tmp/tmpwjcf6xcr.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwjcf6xcr.cpp:2:\n/tmp/tmpwjcf6xcr.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpwjcf6xcr.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpwjcf6xcr.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpwjcf6xcr.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwjcf6xcr.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwjcf6xcr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::vector<std::pair<long, long>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long count\
    \ = 0;\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n\
    \    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    res.push_back(ones[i].second);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmii6sigx.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmii6sigx.cpp:15:35: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<long, long>> ones;\n      \
    \                             ^\n/tmp/tmpmii6sigx.cpp: In function 'int main()':\n\
    /tmp/tmpmii6sigx.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmii6sigx.cpp:2:\n/tmp/tmpmii6sigx.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpmii6sigx.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpmii6sigx.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmii6sigx.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmii6sigx.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmii6sigx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones_count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num =\
    \ arr[i];\n    while (num > 0) {\n      count += num & 1;\n      num >>= 1;\n\
    \    }\n    ones_count.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (int i = 0; i < ones_count.size(); i++) {\n    result.push_back(ones_count[i].second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8to91n7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpb8to91n7.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones_count;\n \
    \                                 ^\n/tmp/tmpb8to91n7.cpp: In function 'int main()':\n\
    /tmp/tmpb8to91n7.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8to91n7.cpp:2:\n/tmp/tmpb8to91n7.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpb8to91n7.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpb8to91n7.cpp:33:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb8to91n7.cpp:33:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb8to91n7.cpp:33:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb8to91n7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones_and_values;\n\
    \  for (auto i : arr) {\n    int ones = 0;\n    long temp = i;\n    while (temp\
    \ > 0) {\n      if (temp % 2 == 1) {\n        ones++;\n      }\n      temp /=\
    \ 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_values.begin(),\
    \ ones_and_values.end());\n  for (auto i : ones_and_values) {\n    result.push_back(i.second);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytkckwtm.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpytkckwtm.cpp:15:34: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::vector<std::pair<int, long>> ones_and_values;\n\
    \                                  ^\n/tmp/tmpytkckwtm.cpp:16:13: error: 'i' does\
    \ not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmpytkckwtm.cpp:27:3:\
    \ error: expected ';' before 'std'\n   std::sort(ones_and_values.begin(), ones_and_values.end());\n\
    \   ^\n/tmp/tmpytkckwtm.cpp:27:59: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::pair<int,\
    \ long int>*, std::vector<std::pair<int, long int> > > >(ones_and_values.std::vector<_Tp,\
    \ _Alloc>::begin<std::pair<int, long int>, std::allocator<std::pair<int, long\
    \ int> > >(), ones_and_values.std::vector<_Tp, _Alloc>::end<std::pair<int, long\
    \ int>, std::allocator<std::pair<int, long int> > >())' from 'void' to 'bool'\n\
    \   std::sort(ones_and_values.begin(), ones_and_values.end());\n             \
    \                                              ^\n/tmp/tmpytkckwtm.cpp:28:3: error:\
    \ expected primary-expression before 'for'\n   for (auto i : ones_and_values)\
    \ {\n   ^\n/tmp/tmpytkckwtm.cpp:28:3: error: expected ')' before 'for'\n/tmp/tmpytkckwtm.cpp:28:13:\
    \ error: 'i' does not name a type\n   for (auto i : ones_and_values) {\n     \
    \        ^\n/tmp/tmpytkckwtm.cpp:31:3: error: expected ';' before 'return'\n \
    \  return result;\n   ^\n/tmp/tmpytkckwtm.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpytkckwtm.cpp:31:3: error: expected ';' before 'return'\n\
    /tmp/tmpytkckwtm.cpp:31:3: error: expected primary-expression before 'return'\n\
    /tmp/tmpytkckwtm.cpp:31:3: error: expected ')' before 'return'\n/tmp/tmpytkckwtm.cpp:\
    \ In function 'int main()':\n/tmp/tmpytkckwtm.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpytkckw"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n  std::vector<long> res;\n  std::map<int, std::vector<long>> m;\n  for\
    \ (auto i : arr) {\n    int count = 0;\n    for (int j = 0; j < 32; j++) {\n \
    \     if (i & (1 << j)) {\n        count++;\n      }\n    }\n    m[count].push_back(i);\n\
    \  }\n  for (auto i : m) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    for (auto j : i.second) {\n      res.push_back(j);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p4agmpt.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp_p4agmpt.cpp:15:33: error: '>>' should be '> >' within a nested\
    \ template argument list\n   std::map<int, std::vector<long>> m;\n           \
    \                      ^\n/tmp/tmp_p4agmpt.cpp:16:13: error: 'i' does not name\
    \ a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp_p4agmpt.cpp:25:3:\
    \ error: expected ';' before 'for'\n   for (auto i : m) {\n   ^\n/tmp/tmp_p4agmpt.cpp:25:3:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp_p4agmpt.cpp:25:3:\
    \ error: expected ';' before 'for'\n/tmp/tmp_p4agmpt.cpp:25:3: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp_p4agmpt.cpp:25:3: error: expected\
    \ ')' before 'for'\n/tmp/tmp_p4agmpt.cpp:25:13: error: 'i' does not name a type\n\
    \   for (auto i : m) {\n             ^\n/tmp/tmp_p4agmpt.cpp:31:3: error: expected\
    \ ';' before 'return'\n   return res;\n   ^\n/tmp/tmp_p4agmpt.cpp:31:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp_p4agmpt.cpp:31:3: error:\
    \ expected ';' before 'return'\n/tmp/tmp_p4agmpt.cpp:31:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp_p4agmpt.cpp:31:3: error: expected ')' before 'return'\n\
    /tmp/tmp_p4agmpt.cpp: In function 'int main()':\n/tmp/tmp_p4agmpt.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = sort_array;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp_p4agmpt.cpp:2:\n/tmp/tmp_p4agmpt.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp_p4agmpt.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,"
  stdout: ''
