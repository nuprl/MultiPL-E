name: HumanEval_128_prod_signs
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr\
  \ of integers and you need to return\n// sum of magnitudes of integers multiplied\
  \ by product of all signs\n// of each number in the vector, represented by 1, -1\
  \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
  \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
  std::optional<long> prod_signs(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
completions: ["    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            sum += abs(i);\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "    if\
    \ (arr.size() == 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i == 0) continue;\n        if (i > 0) prod\
    \ *= 1;\n        else prod *= -1;\n        sum += abs(i);\n    }\n    return sum\
    \ * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n\
    \    long sum = 0;\n    long prod = 1;\n    for (auto i = arr.begin(); i != arr.end();\
    \ i++) {\n        sum += std::abs(*i);\n        if (*i != 0) {\n            prod\
    \ *= (*i / std::abs(*i));\n        }\n    }\n    return sum * prod;", "    if\
    \ (arr.size() == 0) return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) prod *= -1;\n\
    \        else if (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum\
    \ += abs(arr[i]);\n    }\n    return sum * prod;", "    if (arr.size() == 0) return\
    \ std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr)\
    \ {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            sum += -i;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n      continue;\n    }\n  \
    \  sum += std::abs(i);\n    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i == 0) continue;\n    sum += abs(i);\n    prod *=\
    \ i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n \
    \       return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n \
    \   for (auto i : arr) {\n        if (i == 0) {\n            continue;\n     \
    \   }\n        sum += abs(i);\n        prod *= (i > 0) ? 1 : -1;\n    }\n    return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum\
    \ = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum\
    \ += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n  \
    \          prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += abs(i);\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ == 0) continue;\n        if (i > 0) prod *= 1;\n        else prod *= -1;\n \
    \       sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n\
    \    }\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            sum += -i;\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n\
    \  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n\
    \      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += std::abs(i);\n        prod *= i < 0 ? -1 : 1;\n   \
    \ }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \ if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n      continue;\n    }\n  \
    \  sum += std::abs(i);\n    prod *= i < 0 ? -1 : 1;\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i == 0) continue;\n    sum += std::abs(i);\n    prod\
    \ *= i < 0 ? -1 : 1;\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += i;\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i ==\
    \ 0) {\n      continue;\n    }\n    sum += abs(i);\n    prod *= i > 0 ? 1 : -1;\n\
    \  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n        sum += abs(arr[i]);\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] < 0) {\n            prod *= -1;\n        }\n        else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        }\n        else {\n            prod\
    \ *= 0;\n        }\n        sum += abs(arr[i]);\n    }\n    return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n   \
    \ }\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += abs(i);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n \
    \           sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n \
    \           sum += i * -1;\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        if (arr[i] != 0) {\n            sum\
    \ += std::abs(arr[i]);\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n \
    \       } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n          \
    \  prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n \
    \   return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i == 0) {\n            continue;\n        }\n        sum += abs(i);\n\
    \        prod *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \ if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            sum += arr[i] * -1;\n            prod *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n        }\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0)\
    \ {\n      prod *= -1;\n      sum += std::abs(i);\n    } else {\n      prod *=\
    \ 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] < 0) {\n            prod *= -1;\n        }\n        else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        }\n        else {\n            prod\
    \ *= 0;\n        }\n        sum += std::abs(arr[i]);\n    }\n    return sum *\
    \ prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n\
    \  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n\
    \      prod *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  \
    \  if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] < 0) {\n            product *= -1;\n        }\n        if (arr[i]\
    \ != 0) {\n            sum += std::abs(arr[i]);\n        }\n    }\n    return\
    \ sum * product;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i < 0) {\n            prod *= -1;\n        }\n        if (i != 0) {\n\
    \            sum += std::abs(i);\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i != 0) {\n\
    \            sum += std::abs(i);\n            prod *= i / std::abs(i);\n     \
    \   }\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long product = 1;\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i < 0) {\n            product *= -1;\n        } else\
    \ if (i > 0) {\n            sum += i;\n        }\n    }\n    return product *\
    \ sum;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n\
    \  long sum = 0;\n  for (auto i : arr) {\n    if (i < 0) {\n      prod *= -1;\n\
    \    } else if (i > 0) {\n      sum += i;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n\
    \      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += abs(i);\n\
    \      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum *\
    \ prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            sum += abs(i);\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "  if\
    \ (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod\
    \ = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n  \
    \  } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (long i : arr) {\n        if (i > 0) {\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n        } else {\n    \
    \        prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n      \
    \  if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n       \
    \     prod *= -1;\n        } else {\n            prod *= 0;\n        }\n     \
    \   sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr)\
    \ {\n    if (i < 0) prod *= -1;\n    sum += std::abs(i);\n  }\n  return sum *\
    \ prod;", "  if (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum\
    \ += i;\n    } else if (i < 0) {\n      prod *= -1;\n      sum += abs(i);\n  \
    \  } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i == 0) continue;\n        sum += abs(i);\n        prod\
    \ *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size() == 0)\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) sum += i;\n        else if (i < 0) {\n        \
    \    sum += -i;\n            prod *= -1;\n        }\n    }\n    return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum\
    \ = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n   \
    \ sum += std::abs(i);\n  }\n  return sum * prod;", "    if (arr.size() == 0) return\
    \ std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr)\
    \ {\n        if (i < 0) prod *= -1;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n\
    \        prod *= (i == 0 ? 1 : i / std::abs(i));\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n\
    \        if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n        sum += std::abs(arr[i]);\n    }\n    return sum *\
    \ prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long sum = 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i == 0) {\n            continue;\n        }\n        sum += std::abs(i);\n\
    \        prod *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n\
    \            continue;\n        }\n        sum += abs(i);\n        prod *= (i\
    \ > 0) ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n  \
    \    sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long product\
    \ = 1;\n  for (auto i : arr) {\n    if (i < 0) {\n      product *= -1;\n    }\
    \ else if (i > 0) {\n      product *= 1;\n    } else {\n      product *= 0;\n\
    \    }\n    sum += std::abs(i);\n  }\n  return sum * product;", "  if (arr.empty())\
    \ return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i == 0) continue;\n    sum += std::abs(i);\n    prod *= (i > 0) ?\
    \ 1 : -1;\n  }\n  return sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ < 0) {\n            prod *= -1;\n        } else if (i == 0) {\n            prod\
    \ = 0;\n            sum = 0;\n            break;\n        }\n        sum += std::abs(i);\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n   \
    \         sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n   \
    \         sum += i * -1;\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        }\n        else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        }\n        else {\n            prod *= 0;\n        }\n\
    \        sum += abs(arr[i]);\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        }\n    \
    \    if (arr[i] != 0) {\n            sum += std::abs(arr[i]);\n        }\n   \
    \ }\n    return prod * sum;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            prod *= 1;\n            sum += i;\n        } else if (i\
    \ < 0) {\n            prod *= -1;\n            sum += -i;\n        } else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += abs(i);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] == 0) {\n            continue;\n        }\n        if (arr[i] <\
    \ 0) {\n            prod *= -1;\n        }\n        sum += std::abs(arr[i]);\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n     \
    \       prod *= -1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += abs(i);\n    }\n    return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for (auto\
    \ num : arr) {\n    if (num > 0) {\n      sum += num;\n    } else if (num < 0)\
    \ {\n      sum += -num;\n      product *= -1;\n    } else {\n      product = 0;\n\
    \    }\n  }\n  return sum * product;", "    if (arr.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            sum += -i;\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long sum = 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) prod *= 1;\n\
    \    else if (i < 0) prod *= -1;\n    else prod *= 0;\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \ if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n \
    \ for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n\
    \    } else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ x : arr) {\n        if (x > 0) {\n            sum += x;\n            prod *=\
    \ 1;\n        } else if (x < 0) {\n            sum += -x;\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n      \
    \  if (i < 0) {\n            prod *= -1;\n        }\n        if (i != 0) {\n \
    \           sum += abs(i);\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += -i;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n  \
    \          return 0;\n        }\n        sum += std::abs(i);\n        prod *=\
    \ i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    sum += std::abs(i);\n\
    \    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n           \
    \ sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n \
    \           sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n \
    \           prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) return std::nullopt;\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i == 0) continue;\n        if (i\
    \ < 0) prod *= -1;\n        sum += std::abs(i);\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long product = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n\
    \            sum += i;\n            product *= 1;\n        } else if (i < 0) {\n\
    \            sum += i * -1;\n            product *= -1;\n        } else {\n  \
    \          product *= 0;\n        }\n    }\n    return sum * product;", "  if\
    \ (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n \
    \   return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n           \
    \ sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0) {\n \
    \           sum += arr[i] * -1;\n            prod *= -1;\n        } else {\n \
    \           prod *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        sum += abs(i);\n        if (i < 0) {\n\
    \            prod *= -1;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) return std::nullopt;\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i == 0) {\n            prod = 0;\n\
    \            break;\n        }\n        if (i < 0) prod *= -1;\n        sum +=\
    \ std::abs(i);\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n\
    \        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += std::abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i < 0) {\n            prod *= -1;\n        } else if (i > 0) {\n    \
    \        sum += i;\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += abs(i);\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        if\
    \ (i > 0) {\n            sum += i;\n            product *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            product *= -1;\n     \
    \   } else {\n            product *= 0;\n        }\n    }\n    return sum * product;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    }\
    \ else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n \
    \   return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ el : arr) {\n    if (el > 0) {\n      sum += el;\n      prod *= 1;\n    } else\
    \ if (el < 0) {\n      sum += -el;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n\
    \  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i == 0) {\n\
    \      continue;\n    }\n    sum += std::abs(i);\n    prod *= i > 0 ? 1 : -1;\n\
    \  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i != 0) {\n            sum += abs(i);\n            prod *= i > 0 ? 1\
    \ : -1;\n        }\n    }\n    return sum * prod;", "  if (arr.empty()) {\n  \
    \  return std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n    } else if (i < 0) {\n   \
    \   sum += -i;\n      product *= -1;\n    } else {\n      product = 0;\n    }\n\
    \  }\n  return sum * product;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto &i : arr) {\n    if (i >\
    \ 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum\
    \ += i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n\
    \  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long sum =\
    \ 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum +=\
    \ i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += abs(i);\n      prod\
    \ *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] < 0) {\n            prod *= -1;\n        }\n        if (arr[i]\
    \ != 0) {\n            sum += abs(arr[i]);\n        }\n    }\n    return sum *\
    \ prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n \
    \   long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            sum += std::abs(i);\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            prod *= -1;\n        } else {\n            prod *= 0;\n     \
    \   }\n        sum += std::abs(arr[i]);\n    }\n    return sum * prod;", "   \
    \ if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] < 0) {\n            product *= -1;\n        }\n        else if\
    \ (arr[i] > 0) {\n            product *= 1;\n        }\n        else {\n     \
    \       product *= 0;\n        }\n        sum += std::abs(arr[i]);\n    }\n  \
    \  return sum * product;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long product = 1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        }\n \
    \       if (arr[i] != 0) {\n            sum += std::abs(arr[i]);\n        }\n\
    \    }\n    return sum * product;", "    if (arr.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            prod *= -1;\n        } else {\n            prod *= 0;\n\
    \        }\n        sum += std::abs(i);\n    }\n    return sum * prod;", "   \
    \ if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long product = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n\
    \            sum += i;\n            product *= 1;\n        } else if (i < 0) {\n\
    \            sum += i * -1;\n            product *= -1;\n        } else {\n  \
    \          product *= 0;\n        }\n    }\n    return sum * product;", "    if\
    \ (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] < 0) {\n            prod *= -1;\n        }\n        else if (arr[i]\
    \ > 0) {\n            prod *= 1;\n        }\n        else {\n            prod\
    \ *= 0;\n        }\n        sum += std::abs(arr[i]);\n    }\n    return sum *\
    \ prod;", "    // your code here\n    if(arr.size() == 0)\n        return std::nullopt;\n\
    \    long sum = 0;\n    long prod = 1;\n    for(auto i : arr){\n        if(i >\
    \ 0)\n            sum += i;\n        else if(i < 0)\n            sum -= i;\n \
    \       if(i != 0)\n            prod *= i/abs(i);\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n   \
    \     } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long sum\
    \ = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum\
    \ += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n  \
    \          continue;\n        }\n        sum += std::abs(i);\n        prod *=\
    \ (i > 0) ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n   \
    \     }\n        if (i != 0) {\n            sum += std::abs(i);\n        }\n \
    \   }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i == 0) {\n            continue;\n        }\n        sum += std::abs(i);\n\
    \        prod *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto\
    \ i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *=\
    \ 1;\n        } else if (i < 0) {\n            sum += i * -1;\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n      \
    \  if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n\
    \            sum += i;\n            product *= 1;\n        } else if (i < 0) {\n\
    \            sum += abs(i);\n            product *= -1;\n        } else {\n  \
    \          product *= 0;\n        }\n    }\n    return sum * product;", "    if\
    \ (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n        \
    \    sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n        \
    \    sum += abs(i);\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n    }\n    return sum * prod;", "    if (arr.size() == 0)\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += i *\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n  }\n  long prod\
    \ = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n      prod\
    \ *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        sum += std::abs(i);\n        prod *= i > 0 ? 1 : -1;\n   \
    \ }\n    return sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ == 0) continue;\n        sum += std::abs(i);\n        prod *= i / std::abs(i);\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long prod = 1;\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == 0) {\n            continue;\n        }\n     \
    \   if (arr[i] < 0) {\n            prod *= -1;\n        }\n        sum += abs(arr[i]);\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    sum += abs(i);\n        if (i != 0) {\n            prod *= i / abs(i);\n\
    \        }\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n    \
    \    return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n           \
    \ prod *= -1;\n        }\n        if (arr[i] != 0) {\n            sum += std::abs(arr[i]);\n\
    \        }\n    }\n    return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0)\
    \ {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n\
    \    }\n  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return\
    \ std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i < 0) {\n            prod *= -1;\n        }\n       \
    \ sum += std::abs(i);\n    }\n    return sum * prod;", "  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n \
    \     sum += i;\n    }\n  }\n  return sum * prod;", "    if (arr.size() == 0)\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n   \
    \     }\n        if (i != 0) {\n            sum += std::abs(i);\n        }\n \
    \   }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            prod *= -1;\n        }\n    \
    \    if (arr[i] != 0) {\n            sum += std::abs(arr[i]);\n        }\n   \
    \ }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long product = 1;\n  for (auto i : arr) {\n    if (i\
    \ > 0) {\n      sum += i;\n      product *= 1;\n    } else if (i < 0) {\n    \
    \  sum += i * -1;\n      product *= -1;\n    } else {\n      product *= 0;\n \
    \   }\n  }\n  return sum * product;", "    if (arr.size() == 0) return std::nullopt;\n\
    \    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            sum += i;\n            prod *= 1;\n        } else if (i\
    \ < 0) {\n            sum += i * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "  if\
    \ (arr.empty()) return std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for\
    \ (auto i : arr) {\n    if (i > 0) {\n      prod *= 1;\n      sum += i;\n    }\
    \ else if (i < 0) {\n      prod *= -1;\n      sum += -i;\n    } else {\n     \
    \ prod *= 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n\
    \  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0) sum\
    \ += i;\n    else if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    }\n \
    \ }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "\t\
    if (arr.size() == 0) {\n\t\treturn std::nullopt;\n\t}\n\tlong product = 1;\n\t\
    long sum = 0;\n\tfor (auto i : arr) {\n\t\tif (i > 0) {\n\t\t\tproduct *= 1;\n\
    \t\t\tsum += i;\n\t\t}\n\t\telse if (i < 0) {\n\t\t\tproduct *= -1;\n\t\t\tsum\
    \ += i;\n\t\t}\n\t\telse {\n\t\t\tproduct *= 0;\n\t\t}\n\t}\n\treturn sum * product;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i < 0) {\n   \
    \         prod *= -1;\n        } else if (i > 0) {\n            sum += i;\n  \
    \      }\n    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *= -1;\n    } else\
    \ {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) return std::nullopt;\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto& i : arr) {\n        if (i > 0) {\n            prod *= 1;\n\
    \            sum += i;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \            sum += -i;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += i * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", " \
    \   if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n  \
    \          prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += std::abs(i);\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n    if (i > 0) {\n     \
    \ prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n      prod *= -1;\n  \
    \    sum += -i;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "  if (arr.empty()) return std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for\
    \ (auto el : arr) {\n    if (el > 0) {\n      sum += el;\n      prod *= 1;\n \
    \   } else if (el < 0) {\n      sum += std::abs(el);\n      prod *= -1;\n    }\
    \ else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        if (i > 0) {\n            sum += i;\n        } else {\n  \
    \          sum -= i;\n            prod *= -1;\n        }\n    }\n    return sum\
    \ * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n\
    \    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i\
    \ > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n        sum +=\
    \ abs(i);\n    }\n    return sum * prod;", "    if (arr.size() == 0) {\n     \
    \   return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n    for\
    \ (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n            prod\
    \ *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n           \
    \ prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += -i;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;", "    if\
    \ (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n        \
    \    sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n        \
    \    sum += i * -1;\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n    }\n    return sum * prod;", "  if (arr.empty()) {\n  \
    \  return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i\
    \ : arr) {\n    sum += std::abs(i);\n    prod *= i < 0 ? -1 : i > 0 ? 1 : 0;\n\
    \  }\n  return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i > 0) {\n            sum += i;\n            prod *= 1;\n        } else\
    \ if (i < 0) {\n            sum += (-1 * i);\n            prod *= -1;\n      \
    \  } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > 0) {\n            prod *= 1;\n        } else if (arr[i] < 0) {\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \        sum += abs(arr[i]);\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0)\
    \ {\n            continue;\n        }\n        sum += std::abs(arr[i]);\n    \
    \    prod *= arr[i] > 0 ? 1 : -1;\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            prod *=\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n        sum += std::abs(arr[i]);\n\
    \    }\n    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i);\n        prod *= (i == 0) ? 1 : (i > 0) ? 1 : -1;\n \
    \   }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n      \
    \  if (i == 0) {\n            continue;\n        }\n        sum += std::abs(i);\n\
    \        prod *= i > 0 ? 1 : -1;\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long product = 1;\n  for (auto i : arr) {\n    if (i\
    \ > 0) {\n      sum += i;\n    } else if (i < 0) {\n      sum += -i;\n      product\
    \ *= -1;\n    } else {\n      product = 0;\n    }\n  }\n  return sum * product;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long prod\
    \ = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n  \
    \          prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += std::abs(i);\n\
    \    }\n    return prod * sum;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    sum += abs(i);\n        if (i != 0) {\n            prod *= i / abs(i);\n\
    \        }\n    }\n    return sum * prod;", "  if (arr.empty()) {\n    return\
    \ std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr)\
    \ {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n      prod *=\
    \ -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n  }\n \
    \ return sum * prod;", "    if (arr.size() == 0) return std::nullopt;\n    long\
    \ prod = 1;\n    long sum = 0;\n    for (auto& i : arr) {\n        if (i > 0)\
    \ {\n            prod *= 1;\n            sum += i;\n        } else if (i < 0)\
    \ {\n            prod *= -1;\n            sum += -i;\n        } else {\n     \
    \       prod *= 0;\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += abs(i);\n\
    \  }\n  return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto x : arr) {\n    if (x > 0) {\n     \
    \ sum += x;\n      prod *= 1;\n    } else if (x < 0) {\n      sum += -x;\n   \
    \   prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n   \
    \         sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n   \
    \         sum += i * -1;\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n    }\n    return sum * prod;", "  if (arr.empty())\
    \ {\n    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i;\n      prod *= -1;\n    } else {\n      prod *=\
    \ 0;\n    }\n  }\n  return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long product = 1;\n  for (auto i : arr) {\n    if (i\
    \ == 0) {\n      continue;\n    }\n    sum += std::abs(i);\n    product *= i >\
    \ 0 ? 1 : -1;\n  }\n  return sum * product;", "    if (arr.size() == 0) {\n  \
    \      return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n  \
    \  for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n       \
    \     prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n      \
    \      prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n    \
    \    if (i < 0) {\n            prod *= -1;\n        } else if (i > 0) {\n    \
    \        prod *= 1;\n        } else {\n            prod *= 0;\n        }\n   \
    \     sum += std::abs(i);\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n\
    \        } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long prod = 1;\n    long sum = 0;\n    for (auto i : arr) {\n      \
    \  if (i > 0) {\n            prod *= 1;\n        } else if (i < 0) {\n       \
    \     prod *= -1;\n        } else {\n            prod *= 0;\n        }\n     \
    \   sum += std::abs(i);\n    }\n    return sum * prod;", "    if (arr.size() ==\
    \ 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long sum = 0;\n    long prod = 1;\n    for (auto i : arr) {\n      \
    \  if (i < 0) {\n            prod *= -1;\n        } else if (i > 0) {\n      \
    \      sum += i;\n        }\n    }\n    return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long prod = 1;\n    long sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n        sum += abs(arr[i]);\n    }\n    return sum * prod;",
  "  // your code here\n  if(arr.size() == 0) return std::nullopt;\n  long sum = 0;\n\
    \  long prod = 1;\n  for(auto i: arr){\n    if(i == 0) continue;\n    sum += abs(i);\n\
    \    prod *= i > 0 ? 1 : -1;\n  }\n  return sum * prod;", "    if (arr.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) {\n    return std::nullopt;\n\
    \  }\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i > 0)\
    \ {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n      sum +=\
    \ i * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod;", "    if (arr.size() == 0) {\n        return std::nullopt;\n  \
    \  }\n    long sum = 0;\n    long prod = 1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod\
    \ *= 1;\n        } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n \
    \           prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;", "  if (arr.empty()) return std::nullopt;\n  long\
    \ sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n    if (i == 0) continue;\n\
    \    sum += std::abs(i);\n    prod *= i < 0 ? -1 : 1;\n  }\n  return sum * prod;",
  "    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    long sum =\
    \ 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n    \
    \    } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;"]
stop_tokens:
- "\n}"
