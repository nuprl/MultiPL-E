language: cpp
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find('1'));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvitjjz1k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpvitjjz1k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpvitjjz1k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpvitjjz1k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpvitjjz1k.cpp: In function 'int main()':\n\
    /tmp/tmpvitjjz1k.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvitjjz1k.cpp:2:\n/tmp/tmpvitjjz1k.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = std::bitset<32>(avg).to_string();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpsdo9qo5d.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpsdo9qo5d.cpp: In function 'int main()':\n\
    /tmp/tmpsdo9qo5d.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsdo9qo5d.cpp:2:\n/tmp/tmpsdo9qo5d.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long avg = (n\
    \ + m) / 2;\n    std::string binary = std::bitset<32>(avg).to_string();\n    binary\
    \ = binary.substr(binary.find(\"1\"));\n    binary = \"0b\" + binary;\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7avc84u.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpv7avc84u.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpv7avc84u.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpv7avc84u.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpv7avc84u.cpp: In function 'int main()':\n\
    /tmp/tmpv7avc84u.cpp:38:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv7avc84u.cpp:2:\n/tmp/tmpv7avc84u.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg != 0) {\n    \
    \    bin += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmhy6t6f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpsmhy6t6f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpsmhy6t6f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpsmhy6t6f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpsmhy6t6f.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmpsmhy6t6f.cpp:38:16: error: 'to_string'\
    \ is not a member of 'std'\n         bin += std::to_string(avg % 2);\n       \
    \         ^\n/tmp/tmpsmhy6t6f.cpp: In function 'int main()':\n/tmp/tmpsmhy6t6f.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmhy6t6f.cpp:2:\n/tmp/tmpsmhy6t6f.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvk1r3u5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpgvk1r3u5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpgvk1r3u5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpgvk1r3u5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpgvk1r3u5.cpp: In function 'int main()':\n\
    /tmp/tmpgvk1r3u5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgvk1r3u5.cpp:2:\n/tmp/tmpgvk1r3u5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    std::string result = \"0b\";\n    for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n        if (s[i] == '1') {\n           \
    \ result += s.substr(i);\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkwl2ybp_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkwl2ybp_.cpp: In function 'int main()':\n\
    /tmp/tmpkwl2ybp_.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwl2ybp_.cpp:2:\n/tmp/tmpkwl2ybp_.cpp:50:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = std::bitset<32>(avg).to_string();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpsdo9qo5d.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpsdo9qo5d.cpp: In function 'int main()':\n\
    /tmp/tmpsdo9qo5d.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsdo9qo5d.cpp:2:\n/tmp/tmpsdo9qo5d.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0hljh5mp.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp0hljh5mp.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp0hljh5mp.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp0hljh5mp.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp0hljh5mp.cpp: In function 'int main()':\n\
    /tmp/tmp0hljh5mp.cpp:38:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0hljh5mp.cpp:2:\n/tmp/tmp0hljh5mp.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvk1r3u5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpgvk1r3u5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpgvk1r3u5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpgvk1r3u5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpgvk1r3u5.cpp: In function 'int main()':\n\
    /tmp/tmpgvk1r3u5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgvk1r3u5.cpp:2:\n/tmp/tmpgvk1r3u5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    std::string result = \"0b\" + binary;\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dsbjw2q.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2dsbjw2q.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2dsbjw2q.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2dsbjw2q.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2dsbjw2q.cpp: In function 'int main()':\n\
    /tmp/tmp2dsbjw2q.cpp:43:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2dsbjw2q.cpp:2:\n/tmp/tmp2dsbjw2q.cpp:44:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) (sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5ber2nz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpc5ber2nz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpc5ber2nz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpc5ber2nz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpc5ber2nz.cpp: In function 'int main()':\n\
    /tmp/tmpc5ber2nz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc5ber2nz.cpp:2:\n/tmp/tmpc5ber2nz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    std::string str = ss.str();\n    return \"0b\" + str;\n}\nint main() {\n\
    \    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgs2sphf.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpxgs2sphf.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpxgs2sphf.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpxgs2sphf.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpxgs2sphf.cpp: In function 'int main()':\n\
    /tmp/tmpxgs2sphf.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxgs2sphf.cpp:2:\n/tmp/tmpxgs2sphf.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = (sum\
    \ + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kn2wd97.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp3kn2wd97.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp3kn2wd97.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp3kn2wd97.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp3kn2wd97.cpp: In function 'int main()':\n\
    /tmp/tmp3kn2wd97.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3kn2wd97.cpp:2:\n/tmp/tmp3kn2wd97.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfpwf0jsn.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpfpwf0jsn.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpfpwf0jsn.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpfpwf0jsn.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpfpwf0jsn.cpp: In function 'int main()':\n\
    /tmp/tmpfpwf0jsn.cpp:39:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfpwf0jsn.cpp:2:\n/tmp/tmpfpwf0jsn.cpp:40:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<64>(avg).to_string();\n\
    \    std::string result = \"0b\" + binary.substr(binary.find(\"1\"));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hzlyo6j.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp3hzlyo6j.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp3hzlyo6j.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp3hzlyo6j.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp3hzlyo6j.cpp: In function 'int main()':\n\
    /tmp/tmp3hzlyo6j.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3hzlyo6j.cpp:2:\n/tmp/tmp3hzlyo6j.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp1jglzt6n.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp1jglzt6n.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp1jglzt6n.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmp1jglzt6n.cpp:38:18: error: 'to_string'\
    \ is not a member of 'std'\n         binary = std::to_string(avg % 2) + binary;\n\
    \                  ^\n/tmp/tmp1jglzt6n.cpp: In function 'int main()':\n/tmp/tmp1jglzt6n.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jglzt6n.cpp:2:\n/tmp/tmp1jglzt6n.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string s = \"0b\";\n    while (avg > 0) {\n   \
    \     s += (avg % 2 == 0) ? \"0\" : \"1\";\n        avg /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu820unf7.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpu820unf7.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpu820unf7.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpu820unf7.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpu820unf7.cpp: In function 'int main()':\n\
    /tmp/tmpu820unf7.cpp:45:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu820unf7.cpp:2:\n/tmp/tmpu820unf7.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp1jglzt6n.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp1jglzt6n.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp1jglzt6n.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmp1jglzt6n.cpp:38:18: error: 'to_string'\
    \ is not a member of 'std'\n         binary = std::to_string(avg % 2) + binary;\n\
    \                  ^\n/tmp/tmp1jglzt6n.cpp: In function 'int main()':\n/tmp/tmp1jglzt6n.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jglzt6n.cpp:2:\n/tmp/tmp1jglzt6n.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = (avg % 2 == 0 ? \"0\" : \"1\") + binary;\n\
    \        avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4m7rd84c.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp4m7rd84c.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp4m7rd84c.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp4m7rd84c.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp4m7rd84c.cpp: In function 'int main()':\n\
    /tmp/tmp4m7rd84c.cpp:44:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4m7rd84c.cpp:2:\n/tmp/tmp4m7rd84c.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss <<\
    \ std::bitset<32>(avg);\n    return \"0b\" + ss.str();\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpo1bi6e.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmptpo1bi6e.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmptpo1bi6e.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmptpo1bi6e.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmptpo1bi6e.cpp: In function 'int main()':\n\
    /tmp/tmptpo1bi6e.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptpo1bi6e.cpp:2:\n/tmp/tmptpo1bi6e.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<8>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10f34ad2.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp10f34ad2.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp10f34ad2.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp10f34ad2.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp10f34ad2.cpp: In function 'int main()':\n\
    /tmp/tmp10f34ad2.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp10f34ad2.cpp:2:\n/tmp/tmp10f34ad2.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2benmac.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpw2benmac.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpw2benmac.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpw2benmac.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpw2benmac.cpp: In function 'int main()':\n\
    /tmp/tmpw2benmac.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw2benmac.cpp:2:\n/tmp/tmpw2benmac.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmph0p9958w.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmph0p9958w.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmph0p9958w.cpp: In function 'int main()':\n\
    /tmp/tmph0p9958w.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0p9958w.cpp:2:\n/tmp/tmph0p9958w.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkahcst9g.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkahcst9g.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkahcst9g.cpp: In function 'int main()':\n\
    /tmp/tmpkahcst9g.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkahcst9g.cpp:2:\n/tmp/tmpkahcst9g.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<64>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_r_pgdr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpl_r_pgdr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpl_r_pgdr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpl_r_pgdr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpl_r_pgdr.cpp: In function 'int main()':\n\
    /tmp/tmpl_r_pgdr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_r_pgdr.cpp:2:\n/tmp/tmpl_r_pgdr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string result = \"0b\";\n    while (avg > 0) {\n\
    \        result = std::to_string(avg % 2) + result;\n        avg /= 2;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp79rkngt8.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp79rkngt8.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp79rkngt8.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp79rkngt8.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp79rkngt8.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmp79rkngt8.cpp:38:18: error: 'to_string'\
    \ is not a member of 'std'\n         result = std::to_string(avg % 2) + result;\n\
    \                  ^\n/tmp/tmp79rkngt8.cpp: In function 'int main()':\n/tmp/tmp79rkngt8.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp79rkngt8.cpp:2:\n/tmp/tmp79rkngt8.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    std::string result = \"0b\";\n    for\
    \ (int i = binary.size() - 1; i >= 0; i--) {\n        if (binary[i] == '1') {\n\
    \            result += binary.substr(i);\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqurt8or.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpwqurt8or.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpwqurt8or.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpwqurt8or.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpwqurt8or.cpp: In function 'int main()':\n\
    /tmp/tmpwqurt8or.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwqurt8or.cpp:2:\n/tmp/tmpwqurt8or.cpp:50:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    std::string result = \"0b\" + binary;\n\
    \    return result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dsbjw2q.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2dsbjw2q.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2dsbjw2q.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2dsbjw2q.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2dsbjw2q.cpp: In function 'int main()':\n\
    /tmp/tmp2dsbjw2q.cpp:43:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2dsbjw2q.cpp:2:\n/tmp/tmp2dsbjw2q.cpp:44:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpfx0ory4_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpfx0ory4_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpfx0ory4_.cpp: In function 'int main()':\n\
    /tmp/tmpfx0ory4_.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfx0ory4_.cpp:2:\n/tmp/tmpfx0ory4_.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + bin.substr(bin.find(\"1\"));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpxe1uzh51.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpxe1uzh51.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpxe1uzh51.cpp: In function 'int main()':\n\
    /tmp/tmpxe1uzh51.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxe1uzh51.cpp:2:\n/tmp/tmpxe1uzh51.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkahcst9g.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkahcst9g.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkahcst9g.cpp: In function 'int main()':\n\
    /tmp/tmpkahcst9g.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkahcst9g.cpp:2:\n/tmp/tmpkahcst9g.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + bin.substr(bin.find(\"1\"));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpxe1uzh51.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpxe1uzh51.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpxe1uzh51.cpp: In function 'int main()':\n\
    /tmp/tmpxe1uzh51.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxe1uzh51.cpp:2:\n/tmp/tmpxe1uzh51.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string s = \"0b\";\n    while (avg > 0) {\n   \
    \     s += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplt31s1ct.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmplt31s1ct.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmplt31s1ct.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmplt31s1ct.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmplt31s1ct.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmplt31s1ct.cpp:38:14: error: 'to_string'\
    \ is not a member of 'std'\n         s += std::to_string(avg % 2);\n         \
    \     ^\n/tmp/tmplt31s1ct.cpp: In function 'int main()':\n/tmp/tmplt31s1ct.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplt31s1ct.cpp:2:\n/tmp/tmplt31s1ct.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0hljh5mp.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp0hljh5mp.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp0hljh5mp.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp0hljh5mp.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp0hljh5mp.cpp: In function 'int main()':\n\
    /tmp/tmp0hljh5mp.cpp:38:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0hljh5mp.cpp:2:\n/tmp/tmp0hljh5mp.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n>m) return -1;\n    int sum = 0;\n    for (int i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = std::bitset<32>(avg).to_string();\n    return \"0b\"\
    \ + binary.substr(binary.find(\"1\"));\n}\nint main() {\n    auto candidate =\
    \ rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqnoxhjps.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpqnoxhjps.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpqnoxhjps.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpqnoxhjps.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpqnoxhjps.cpp: In function 'int main()':\n\
    /tmp/tmpqnoxhjps.cpp:38:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqnoxhjps.cpp:2:\n/tmp/tmpqnoxhjps.cpp:39:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp1jglzt6n.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp1jglzt6n.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp1jglzt6n.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmp1jglzt6n.cpp:38:18: error: 'to_string'\
    \ is not a member of 'std'\n         binary = std::to_string(avg % 2) + binary;\n\
    \                  ^\n/tmp/tmp1jglzt6n.cpp: In function 'int main()':\n/tmp/tmp1jglzt6n.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jglzt6n.cpp:2:\n/tmp/tmp1jglzt6n.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekbs2ne8.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekbs2ne8.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekbs2ne8.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekbs2ne8.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekbs2ne8.cpp: In function 'int main()':\n\
    /tmp/tmpekbs2ne8.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekbs2ne8.cpp:2:\n/tmp/tmpekbs2ne8.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"\";\n   \
    \ while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n    \
    \    avg /= 2;\n    }\n    return \"0b\" + binary;\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp1jglzt6n.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp1jglzt6n.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp1jglzt6n.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp1jglzt6n.cpp: In function 'Union_std_string_long\
    \ rounded_avg(long int, long int)':\n/tmp/tmp1jglzt6n.cpp:38:18: error: 'to_string'\
    \ is not a member of 'std'\n         binary = std::to_string(avg % 2) + binary;\n\
    \                  ^\n/tmp/tmp1jglzt6n.cpp: In function 'int main()':\n/tmp/tmp1jglzt6n.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rounded_avg;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1jglzt6n.cpp:2:\n/tmp/tmp1jglzt6n.cpp:45:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n\
    \        count++;\n    }\n    long avg = sum / count;\n    std::string binary\
    \ = std::bitset<32>(avg).to_string();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpsdo9qo5d.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpsdo9qo5d.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpsdo9qo5d.cpp: In function 'int main()':\n\
    /tmp/tmpsdo9qo5d.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsdo9qo5d.cpp:2:\n/tmp/tmpsdo9qo5d.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp182d4ksk.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp182d4ksk.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp182d4ksk.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp182d4ksk.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp182d4ksk.cpp: In function 'int main()':\n\
    /tmp/tmp182d4ksk.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp182d4ksk.cpp:2:\n/tmp/tmp182d4ksk.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string str = ss.str();\n    std::string result = \"0b\";\n    for (int\
    \ i = str.length() - 1; i >= 0; i--) {\n        if (str[i] == '1') {\n       \
    \     result += str.substr(i);\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo20xytkh.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpo20xytkh.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpo20xytkh.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpo20xytkh.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpo20xytkh.cpp: In function 'int main()':\n\
    /tmp/tmpo20xytkh.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo20xytkh.cpp:2:\n/tmp/tmpo20xytkh.cpp:50:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return \"0b\" + ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2benmac.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpw2benmac.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpw2benmac.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpw2benmac.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpw2benmac.cpp: In function 'int main()':\n\
    /tmp/tmpw2benmac.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw2benmac.cpp:2:\n/tmp/tmpw2benmac.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average\
    \ = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(average).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdghet60l.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpdghet60l.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpdghet60l.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpdghet60l.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpdghet60l.cpp: In function 'int main()':\n\
    /tmp/tmpdghet60l.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdghet60l.cpp:2:\n/tmp/tmpdghet60l.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find('1'));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg464yv27.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpg464yv27.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpg464yv27.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpg464yv27.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpg464yv27.cpp: In function 'int main()':\n\
    /tmp/tmpg464yv27.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg464yv27.cpp:2:\n/tmp/tmpg464yv27.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = (int)\
    \ round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4a4_7cy.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpy4a4_7cy.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpy4a4_7cy.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpy4a4_7cy.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpy4a4_7cy.cpp: In function 'int main()':\n\
    /tmp/tmpy4a4_7cy.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4a4_7cy.cpp:2:\n/tmp/tmpy4a4_7cy.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    int i = 0;\n    while (s[i] == '0') {\n  \
    \      i++;\n    }\n    s = s.substr(i);\n    return \"0b\" + s;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbw6h7alf.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpbw6h7alf.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpbw6h7alf.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpbw6h7alf.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpbw6h7alf.cpp: In function 'int main()':\n\
    /tmp/tmpbw6h7alf.cpp:47:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbw6h7alf.cpp:2:\n/tmp/tmpbw6h7alf.cpp:48:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    std::string result = \"0b\" + binary.substr(binary.find(\"1\"));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg2zghf05.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpg2zghf05.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpg2zghf05.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpg2zghf05.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpg2zghf05.cpp: In function 'int main()':\n\
    /tmp/tmpg2zghf05.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg2zghf05.cpp:2:\n/tmp/tmpg2zghf05.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string binary =\
    \ std::bitset<8>(avg).to_string();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5bj43vl.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp_5bj43vl.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp_5bj43vl.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp_5bj43vl.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp_5bj43vl.cpp: In function 'int main()':\n\
    /tmp/tmp_5bj43vl.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5bj43vl.cpp:2:\n/tmp/tmp_5bj43vl.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    return std::bitset<32>(avg).to_string();\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfpwf0jsn.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpfpwf0jsn.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpfpwf0jsn.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpfpwf0jsn.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpfpwf0jsn.cpp: In function 'int main()':\n\
    /tmp/tmpfpwf0jsn.cpp:39:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfpwf0jsn.cpp:2:\n/tmp/tmpfpwf0jsn.cpp:40:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpfx0ory4_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpfx0ory4_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpfx0ory4_.cpp: In function 'int main()':\n\
    /tmp/tmpfx0ory4_.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfx0ory4_.cpp:2:\n/tmp/tmpfx0ory4_.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string binary = ss.str();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkahcst9g.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkahcst9g.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkahcst9g.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkahcst9g.cpp: In function 'int main()':\n\
    /tmp/tmpkahcst9g.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkahcst9g.cpp:2:\n/tmp/tmpkahcst9g.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + bin.substr(bin.find('1'));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphlnu_z_r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    int count = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n \
    \       count++;\n    }\n    int avg = sum / count;\n    std::string binary =\
    \ std::bitset<8>(avg).to_string();\n    return \"0b\" + binary;\n}\nint main()\
    \ {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\"\
    );\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5bj43vl.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp_5bj43vl.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp_5bj43vl.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp_5bj43vl.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp_5bj43vl.cpp: In function 'int main()':\n\
    /tmp/tmp_5bj43vl.cpp:42:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5bj43vl.cpp:2:\n/tmp/tmp_5bj43vl.cpp:43:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpawuvvpye.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpawuvvpye.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpawuvvpye.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpawuvvpye.cpp: In function 'int main()':\n\
    /tmp/tmpawuvvpye.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpawuvvpye.cpp:2:\n/tmp/tmpawuvvpye.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmph0p9958w.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmph0p9958w.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmph0p9958w.cpp: In function 'int main()':\n\
    /tmp/tmph0p9958w.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0p9958w.cpp:2:\n/tmp/tmph0p9958w.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    std::string result = \"0b\";\n    for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n        if (s[i] == '1') {\n           \
    \ result += s.substr(i);\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkwl2ybp_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkwl2ybp_.cpp: In function 'int main()':\n\
    /tmp/tmpkwl2ybp_.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwl2ybp_.cpp:2:\n/tmp/tmpkwl2ybp_.cpp:50:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    return std::bitset<32>(sum\
    \ / (m - n + 1)).to_string();\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpufjk08wr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbm1t3vss.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary_avg = \"0b\"\
    ;\n    while (avg > 0) {\n        binary_avg += std::to_string(avg % 2);\n   \
    \     avg /= 2;\n    }\n    std::reverse(binary_avg.begin() + 2, binary_avg.end());\n\
    \    return binary_avg;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9d3da662.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmph0p9958w.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmph0p9958w.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmph0p9958w.cpp: In function 'int main()':\n\
    /tmp/tmph0p9958w.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0p9958w.cpp:2:\n/tmp/tmph0p9958w.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    std::string res = \"0b\";\n    for (int i\
    \ = s.size() - 1; i >= 0; i--) {\n        if (s[i] == '1') {\n            res\
    \ = res + s.substr(i);\n            break;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu5dqgkd9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpfx0ory4_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpfx0ory4_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpfx0ory4_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpfx0ory4_.cpp: In function 'int main()':\n\
    /tmp/tmpfx0ory4_.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfx0ory4_.cpp:2:\n/tmp/tmpfx0ory4_.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    std::string result = \"0b\";\n    for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n        if (s[i] == '1') {\n           \
    \ result += s.substr(i);\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpkwl2ybp_.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpkwl2ybp_.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpkwl2ybp_.cpp: In function 'int main()':\n\
    /tmp/tmpkwl2ybp_.cpp:49:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkwl2ybp_.cpp:2:\n/tmp/tmpkwl2ybp_.cpp:50:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphcpx5w2k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphcpx5w2k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphcpx5w2k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphcpx5w2k.cpp: In function 'int main()':\n\
    /tmp/tmphcpx5w2k.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcpx5w2k.cpp:2:\n/tmp/tmphcpx5w2k.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2n9zk98f.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2n9zk98f.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2n9zk98f.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2n9zk98f.cpp: In function 'int main()':\n\
    /tmp/tmp2n9zk98f.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2n9zk98f.cpp:2:\n/tmp/tmp2n9zk98f.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = (int)\
    \ round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4a4_7cy.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpy4a4_7cy.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpy4a4_7cy.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpy4a4_7cy.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpy4a4_7cy.cpp: In function 'int main()':\n\
    /tmp/tmpy4a4_7cy.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4a4_7cy.cpp:2:\n/tmp/tmpy4a4_7cy.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string bin = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + bin.substr(bin.find(\"1\"));\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpxe1uzh51.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpxe1uzh51.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpxe1uzh51.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpxe1uzh51.cpp: In function 'int main()':\n\
    /tmp/tmpxe1uzh51.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxe1uzh51.cpp:2:\n/tmp/tmpxe1uzh51.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = (sum + (m - n\
    \ + 1) / 2) / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    return ss.str();\n}\nint main() {\n    auto candidate = rounded_avg;\n  \
    \  assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) ==\
    \ \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n   \
    \ assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprly1_n5l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmph0p9958w.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmph0p9958w.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmph0p9958w.cpp: In function 'int main()':\n\
    /tmp/tmph0p9958w.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0p9958w.cpp:2:\n/tmp/tmph0p9958w.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (sum + (m - n + 1) / 2) / (m - n + 1);\n    std::string binary = \"0b\";\n \
    \   while (avg > 0) {\n        binary = std::to_string(avg % 2) + binary;\n  \
    \      avg /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7),\
    \ (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\"\
    );\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprf1mies4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg);\n\
    \    std::string s = ss.str();\n    return \"0b\" + s.substr(s.find(\"1\"));\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpziueiyiv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmph0p9958w.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmph0p9958w.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmph0p9958w.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmph0p9958w.cpp: In function 'int main()':\n\
    /tmp/tmph0p9958w.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph0p9958w.cpp:2:\n/tmp/tmph0p9958w.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) return -1;\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    std::string binary = std::bitset<32>(avg).to_string();\n    return \"0b\"\
    \ + binary.substr(binary.find('1'));\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7l7qdf9o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpz59kxlx5.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpz59kxlx5.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpz59kxlx5.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpz59kxlx5.cpp: In function 'int main()':\n\
    /tmp/tmpz59kxlx5.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz59kxlx5.cpp:2:\n/tmp/tmpz59kxlx5.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find('1'));\n}\nint main() {\n    auto\
    \ candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n   \
    \ assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977))\
    \ == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpekujiacz.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpekujiacz.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpekujiacz.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpekujiacz.cpp: In function 'int main()':\n\
    /tmp/tmpekujiacz.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpekujiacz.cpp:2:\n/tmp/tmpekujiacz.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average\
    \ = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(average).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdghet60l.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpdghet60l.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpdghet60l.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpdghet60l.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpdghet60l.cpp: In function 'int main()':\n\
    /tmp/tmpdghet60l.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdghet60l.cpp:2:\n/tmp/tmpdghet60l.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find('1'));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvitjjz1k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmpvitjjz1k.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmpvitjjz1k.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmpvitjjz1k.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmpvitjjz1k.cpp: In function 'int main()':\n\
    /tmp/tmpvitjjz1k.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvitjjz1k.cpp:2:\n/tmp/tmpvitjjz1k.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ (long) round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary;\n}\nint main() {\n    auto candidate = rounded_avg;\n\
    \    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13))\
    \ == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n\
    \    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560),\
    \ (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\"\
    );\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350),\
    \ (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\"\
    );\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) ==\
    \ -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy_8k6djq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748302
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp7o7rzwpv.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp7o7rzwpv.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp7o7rzwpv.cpp: In function 'int main()':\n\
    /tmp/tmp7o7rzwpv.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7o7rzwpv.cpp:2:\n/tmp/tmp7o7rzwpv.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));\n}\nint main() {\n   \
    \ auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n\
    \    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmphaktmmyr.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmphaktmmyr.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmphaktmmyr.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmphaktmmyr.cpp: In function 'int main()':\n\
    /tmp/tmphaktmmyr.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphaktmmyr.cpp:2:\n/tmp/tmphaktmmyr.cpp:41:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
    \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) :\
    \ f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
    \ {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }  \
    \  bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are\
    \ given two positive integers n and m, and your task is to compute the\n// average\
    \ of the integers from n through m (including n and m). \n// Round the answer\
    \ to the nearest integer and convert that to binary.\n// If n is greater than\
    \ m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>>\
    \ rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n\
    // >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long\
    \ n, long m) {\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    binary = binary.substr(binary.find(\"1\"));\n    return \"0b\" + binary;\n\
    }\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
    \ (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964),\
    \ (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\"\
    );\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185),\
    \ (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\"\
    );\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197),\
    \ (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5),\
    \ (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with constructor not allowed in union\n     std::string f0;\n              \
    \   ^\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member 'std::string Union_std_string_long::f0'\
    \ with destructor not allowed in union\n/tmp/tmp2sfjkp8h.cpp:4:17: error: member\
    \ 'std::string Union_std_string_long::f0' with copy assignment operator not allowed\
    \ in union\n/tmp/tmp2sfjkp8h.cpp:4:17: note: unrestricted unions only available\
    \ with -std=c++11 or -std=gnu++11\n/tmp/tmp2sfjkp8h.cpp: In function 'int main()':\n\
    /tmp/tmp2sfjkp8h.cpp:41:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rounded_avg;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sfjkp8h.cpp:2:\n/tmp/tmp2sfjkp8h.cpp:42:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((1), (5))\
    \ == \"0b11\");\n                              ^\n"
  stdout: ''
