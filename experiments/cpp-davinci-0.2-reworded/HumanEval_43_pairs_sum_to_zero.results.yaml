language: cpp
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n  \
    \  for (int j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j] == 0) {\n \
    \       return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n         \
    \   return true;\n        }\n        else if(l[i] + l[j] < 0){\n            i++;\n\
    \        }\n        else{\n            j--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(long i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while\
    \ (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i]\
    \ + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(long i = 0; i < l.size(); i++){\n  \
    \      if(s.find(l[i]) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::unordered_set<long> s;\n\tfor (auto i : l) {\n\t\tif (s.find(-i) != s.end())\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\t}\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int i = 0;\
    \ i < n; i++) {\n        if(std::binary_search(l.begin() + i + 1, l.end(), -l[i]))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(long i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \t// std::cout << \"Hello World\" << std::endl;\n\tstd::unordered_set<long> s;\n\
    \tfor (long i = 0; i < l.size(); i++) {\n\t\tif (s.find(l[i]) != s.end()) {\n\t\
    \t\treturn true;\n\t\t}\n\t\ts.insert(-l[i]);\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\
    \ return true;\n        s.insert(i);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ myset;\n    for(int i=0;i<l.size();i++){\n        if(myset.find(l[i])!=myset.end()){\n\
    \            return true;\n        }\n        myset.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n         \
    \   return true;\n        }\n        else if(l[i] + l[j] < 0){\n            i++;\n\
    \        }\n        else{\n            j--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile\
    \ (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse\
    \ if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        else{\n            s.insert(-l[i]);\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        else{\n            s.insert(-l[i]);\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (l[i] == 0) {\n            if (i + 1 < l.size() && l[i + 1] == 0)\
    \ {\n                return true;\n            }\n        }\n        else {\n\
    \            if (std::binary_search(l.begin(), l.end(), -l[i])) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (l[i] == 0) {\n            if (i < l.size() - 1 && l[i + 1] == 0)\
    \ {\n                return true;\n            }\n        }\n        else {\n\
    \            int low = i + 1;\n            int high = l.size() - 1;\n        \
    \    while (low <= high) {\n                int mid = (low + high) / 2;\n    \
    \            if (l[i] + l[mid] == 0) {\n                    return true;\n   \
    \             }\n                else if (l[i] + l[mid] > 0) {\n             \
    \       high = mid - 1;\n                }\n                else {\n         \
    \           low = mid + 1;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\t\
    if (std::binary_search(l.begin(), l.end(), -l[i])) {\n\t\t\treturn true;\n\t\t\
    }\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9vwybdax: /tmp/tmp9vwybdax.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here.\n    // You may use the following function to sort the vector:\n    //\
    \ std::sort(l.begin(), l.end());\n    std::sort(l.begin(), l.end());\n    int\
    \ i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i] + l[j]\
    \ == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0) {\n \
    \           i++;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        else{\n            s.insert(-l[i]);\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\t\
    if (std::binary_search(l.begin(), l.end(), -l[i])) {\n\t\t\treturn true;\n\t\t\
    }\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9vwybdax: /tmp/tmp9vwybdax.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n         \
    \   return true;\n        }\n        else if(l[i] + l[j] < 0){\n            i++;\n\
    \        }\n        else{\n            j--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here.\n    // You can add additional functions to this file.\n    // You can\
    \ also add additional files to this project.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while\
    \ (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i]\
    \ + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int i = 0;\
    \ i < n; i++) {\n        if(l[i] > 0) {\n            return false;\n        }\n\
    \        for(int j = i + 1; j < n; j++) {\n            if(l[i] + l[j] == 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for(int i = 0;\
    \ i < n; i++) {\n        if(l[i] > 0) {\n            break;\n        }\n     \
    \   for(int j = i + 1; j < n; j++) {\n            if(l[i] + l[j] == 0) {\n   \
    \             return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(long i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto x : l) {\n        if (s.find(-x) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(x);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(long i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size() - 1;\n  while\
    \ (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n    } else if (l[i]\
    \ + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> set;\n    for(long i = 0; i < l.size(); i++){\n\
    \        if(set.find(l[i]) != set.end()){\n            return true;\n        }\n\
    \        set.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(long i = 0; i < l.size(); i++){\n  \
    \      if(s.find(l[i]) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile\
    \ (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse\
    \ if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        }\n        else if (l[i] + l[j] < 0) {\n     \
    \       i++;\n        }\n        else {\n            j--;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    int n = l.size();\n    if(n<2)\n        return false;\n    std::sort(l.begin(),l.end());\n\
    \    int i=0,j=n-1;\n    while(i<j){\n        if(l[i]+l[j]==0)\n            return\
    \ true;\n        else if(l[i]+l[j]<0)\n            i++;\n        else\n      \
    \      j--;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto it = l.begin(); it != l.end(); it++) {\n        if (s.find(-*it)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(*it);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto x : l) {\n        if (s.find(-x) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(x);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tint i = 0;\n\tint j = l.size() - 1;\n\twhile\
    \ (i < j) {\n\t\tif (l[i] + l[j] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse\
    \ if (l[i] + l[j] < 0) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj--;\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here.\n    // You can add helper functions if you want.\n    // You can also\
    \ modify the function signature if you want.\n    // You can also use other libraries\
    \ if you want.\n    // You can also modify the main function.\n    // But your\
    \ output should be as specified in the question.\n    std::sort(l.begin(), l.end());\n\
    \    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        if (l[i]\
    \ + l[j] == 0) {\n            return true;\n        } else if (l[i] + l[j] < 0)\
    \ {\n            i++;\n        } else {\n            j--;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(long i = 0; i < l.size(); i++){\n  \
    \      if(s.find(l[i]) != s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n - 1;\n    while (i < j) {\n        if (l[i] + l[j] == 0) {\n   \
    \         return true;\n        }\n        else if (l[i] + l[j] < 0) {\n     \
    \       i++;\n        }\n        else {\n            j--;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int i = 0;\n \
    \   int j = n-1;\n    while(i < j){\n        if(l[i] + l[j] == 0){\n         \
    \   return true;\n        }\n        else if(l[i] + l[j] < 0){\n            i++;\n\
    \        }\n        else{\n            j--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end())\n\
    \            return true;\n        s.insert(i);\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here.\n\
    \    std::unordered_set<long> s;\n    for(auto i:l){\n        if(s.find(-i)!=s.end()){\n\
    \            return true;\n        }\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i\
    \ + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n           \
    \     return true;\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n    if(s.find(l[i])!=s.end()){\n\
    \      return true;\n    }\n    s.insert(-l[i]);\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (std::binary_search(l.begin(), l.end(), -l[i])) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn7fns_l6: /tmp/tmpn7fns_l6.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n        if(s.find(l[i])!=s.end()){\n\
    \            return true;\n        }\n        s.insert(-l[i]);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::unordered_set<long> s;\n    for(auto i : l){\n        if(s.find(-i)\
    \ != s.end()){\n            return true;\n        }\n        s.insert(i);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// YOUR CODE HERE\n\
    \tstd::vector<long>::iterator it;\n\tfor(it = l.begin(); it != l.end(); it++)\n\
    \t{\n\t\tif(std::find(l.begin(), l.end(), -(*it)) != l.end())\n\t\t{\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmph6jwr0h3: /tmp/tmph6jwr0h3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660058574
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (long i = 0; i < l.size(); i++) {\n        if (s.find(l[i]) != s.end())\
    \ {\n            return true;\n        }\n        s.insert(-l[i]);\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058573
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] + l[j] == 0) {\n            return true;\n\
    \        } else if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n \
    \           j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n\
    \        if (l[i] + l[j] == 0) {\n            return true;\n        } else if\
    \ (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j--;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s;\n    for (auto i : l) {\n        if (s.find(-i) != s.end()) {\n         \
    \   return true;\n        }\n        s.insert(i);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660058572
