name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the vector\
  \ palindromic. A palindromic vector is a vector that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n \
  \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3,\
  \ (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n\
  }\n"
completions: ["    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int gap = 1; gap < n; gap++) {\n        for (int i = 0, j = gap; j <\
    \ n; i++, j++) {\n            if (arr[i] == arr[j]) {\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int len = 2; len <= n; len++) {\n        for (int i =\
    \ 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if\
    \ (arr[i] == arr[j] && len == 2) {\n                dp[i][j] = 2;\n          \
    \  } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1]\
    \ + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
  "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n  \
    \      dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0;\
    \ i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n            int j =\
    \ i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j] = dp[i\
    \ + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n       \
    \ dp[i][i] = 0;\n    for(int i = 0; i < n-1; i++)\n        dp[i][i+1] = arr[i]\
    \ == arr[i+1] ? 0 : 1;\n    for(int i = 2; i < n; i++)\n        for(int j = 0;\
    \ j < n-i; j++)\n            dp[j][j+i] = arr[j] == arr[j+i] ? dp[j+1][j+i-1]\
    \ : 1 + std::min(dp[j+1][j+i], dp[j][j+i-1]);\n    return dp[0][n-1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for\
    \ (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int len =\
    \ 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n   \
    \         int j = i + len - 1;\n            if (arr[i] == arr[j] && len == 2)\
    \ {\n                dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n    \
    \            dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n\
    \        }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n \
    \   int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n   \
    \ for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n\
    \        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]!=arr[i+1])\n\
    \        {\n            dp[i][i+1] = 1;\n        }\n        else\n        {\n\
    \            dp[i][i+1] = 0;\n        }\n    }\n    for(int i=3;i<=n;i++)\n  \
    \  {\n        for(int j=0;j<n-i+1;j++)\n        {\n            int k = j+i-1;\n\
    \            if(arr[j]==arr[k])\n            {\n                dp[j][k] = dp[j+1][k-1];\n\
    \            }\n            else\n            {\n                dp[j][k] = std::min(dp[j+1][k],dp[j][k-1])+1;\n\
    \            }\n        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int len = 2; len <= n; len++)\
    \ {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i +\
    \ len - 1;\n            if (arr[i] == arr[j] && len == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int i = 0, j = n - 1;\n    int ans = 0;\n\
    \    while (i < j) {\n        if (arr[i] != arr[j]) {\n            ans++;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return ans;", "    // your code\
    \ here\n    int n = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n\
    \    {\n        for(int j=0;j<n;j++)\n        {\n            dp[i][j] = 0;\n \
    \       }\n    }\n    for(int i=0;i<n;i++)\n    {\n        dp[i][i] = 0;\n   \
    \ }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i] == arr[i+1])\n     \
    \   {\n            dp[i][i+1] = 0;\n        }\n        else\n        {\n     \
    \       dp[i][i+1] = 1;\n        }\n    }\n    for(int i=3;i<=n;i++)\n    {\n\
    \        for(int j=0;j<n-i+1;j++)\n        {\n            int k = j+i-1;\n   \
    \         if(arr[j] == arr[k])\n            {\n                dp[j][k] = dp[j+1][k-1];\n\
    \            }\n            else\n            {\n                dp[j][k] = 1\
    \ + std::min(dp[j+1][k],dp[j][k-1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    long n = arr.size();\n    long dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (long i = 0; i < n; i++)\n        dp[i][i] = 1;\n \
    \   for (long cl = 2; cl <= n; cl++) {\n        for (long i = 0; i < n - cl +\
    \ 1; i++) {\n            long j = i + cl - 1;\n            if (arr[i] == arr[j]\
    \ && cl == 2)\n                dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n\
    \    return (n - dp[0][n - 1]);", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0; i <\
    \ n - l + 1; i++) {\n            int j = i + l - 1;\n            if (arr[i] ==\
    \ arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if (arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n            int j =\
    \ i + l - 1;\n            if(arr[i] == arr[j] && l == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if(arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i\
    \ < n; i++)\n        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n     \
    \   for(long i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n \
    \           if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i =\
    \ 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n    for(long i = 0; i < n -\
    \ 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            dp[i][i + 1] = 0;\n\
    \        } else {\n            dp[i][i + 1] = 1;\n        }\n    }\n    for(long\
    \ i = 2; i < n; i++) {\n        for(long j = 0; j < n - i; j++) {\n          \
    \  if(arr[j] == arr[j + i]) {\n                dp[j][j + i] = dp[j + 1][j + i\
    \ - 1];\n            } else {\n                dp[j][j + i] = 1 + std::min(dp[j\
    \ + 1][j + i], dp[j][j + i - 1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i =\
    \ 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n - 1; i++)\n\
    \        dp[i][i + 1] = (arr[i] == arr[i + 1]) ? 0 : 1;\n    for(int i = 2; i\
    \ < n; i++) {\n        for(int j = 0; j < n - i; j++) {\n            if(arr[j]\
    \ == arr[j + i])\n                dp[j][j + i] = dp[j + 1][j + i - 1];\n     \
    \       else\n                dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j\
    \ + i - 1]) + 1;\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(i == j)\
    \ {\n                dp[i][j] = 0;\n            } else if(j == i + 1) {\n    \
    \            dp[i][j] = abs(arr[i] - arr[j]);\n            } else {\n        \
    \        dp[i][j] = INT_MAX;\n                for(int k = i; k < j; k++) {\n \
    \                   dp[i][j] = std::min(dp[i][j], dp[i][k] + dp[k + 1][j] + abs(arr[i]\
    \ - arr[j]));\n                }\n            }\n        }\n    }\n    return\
    \ dp[0][n - 1];", "  // your code here\n  long n = arr.size();\n  long dp[n][n];\n\
    \  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++) {\n      dp[i][j]\
    \ = 0;\n    }\n  }\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n;\
    \ j++) {\n      if(i == j) {\n        dp[i][j] = 0;\n      }\n      else if(i\
    \ > j) {\n        dp[i][j] = 0;\n      }\n      else if(i + 1 == j) {\n      \
    \  dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n      }\n      else {\n        dp[i][j]\
    \ = arr[i] == arr[j] ? dp[i + 1][j - 1] : std::min(dp[i + 1][j], dp[i][j - 1])\
    \ + 1;\n      }\n    }\n  }\n  return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int l = 2; l <= n; l++) {\n \
    \       for (int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if (arr[i] == arr[j] && l == 2) {\n                dp[i][j] = 2;\n\
    \            } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i +\
    \ 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int\
    \ len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n\
    \            int j = i + len - 1;\n            if (arr[i] == arr[j] && len ==\
    \ 2) {\n                dp[i][j] = 2;\n            } else if (arr[i] == arr[j])\
    \ {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n\
    \                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n          \
    \  }\n        }\n    }\n    return n - dp[0][n - 1];", "  long n = arr.size();\n\
    \  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j <\
    \ n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    dp[i][i] = 1;\n  }\n  for (long i = 0; i < n - 1; i++) {\n    if (arr[i]\
    \ == arr[i + 1]) {\n      dp[i][i + 1] = 1;\n    } else {\n      dp[i][i + 1]\
    \ = 2;\n    }\n  }\n  for (long i = 3; i <= n; i++) {\n    for (long j = 0; j\
    \ < n - i + 1; j++) {\n      long k = j + i - 1;\n      if (arr[j] == arr[k])\
    \ {\n        dp[j][k] = dp[j + 1][k - 1];\n      } else {\n        dp[j][k] =\
    \ std::min(dp[j][k - 1], dp[j + 1][k]) + 1;\n      }\n    }\n  }\n  return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n - 1; i++)\n       \
    \ dp[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n    for(int i = 2; i < n; i++)\
    \ {\n        for(int j = 0; j < n - i; j++) {\n            if(arr[j] == arr[j\
    \ + i])\n                dp[j][j + i] = dp[j + 1][j + i - 1];\n            else\n\
    \                dp[j][j + i] = 1 + std::min(dp[j + 1][j + i], dp[j][j + i - 1]);\n\
    \        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++)\
    \ {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++)\
    \ {\n        for(int j = 0; j < n; j++) {\n            if(i == j) {\n        \
    \        dp[i][j] = 0;\n            } else if(i + 1 == j) {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j -\
    \ 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];", "    // your\
    \ code here\n    int n = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n\
    \    {\n        for(int j=0;j<n;j++)\n        {\n            dp[i][j] = 0;\n \
    \       }\n    }\n    for(int i=0;i<n;i++)\n    {\n        dp[i][i] = 0;\n   \
    \ }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i] == arr[i+1])\n     \
    \   {\n            dp[i][i+1] = 0;\n        }\n        else\n        {\n     \
    \       dp[i][i+1] = 1;\n        }\n    }\n    for(int l=3;l<=n;l++)\n    {\n\
    \        for(int i=0;i<n-l+1;i++)\n        {\n            int j = i+l-1;\n   \
    \         if(arr[i] == arr[j])\n            {\n                dp[i][j] = dp[i+1][j-1];\n\
    \            }\n            else\n            {\n                dp[i][j] = 1\
    \ + std::min(dp[i+1][j],dp[i][j-1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0;\
    \ i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n    \
    \    for(int i = 0; i < n-l+1; i++) {\n            int j = i+l-1;\n          \
    \  if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n          \
    \  else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n  \
    \      }\n    }\n    return dp[0][n-1];", "    long n = arr.size();\n    long\
    \ dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long\
    \ i = 0; i < n - 1; i++)\n        dp[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n\
    \    for(long i = 2; i < n; i++) {\n        for(long j = 0; j < n - i; j++) {\n\
    \            dp[j][j + i] = arr[j] == arr[j + i] ? dp[j + 1][j + i - 1] : 1 +\
    \ std::min(dp[j + 1][j + i], dp[j][j + i - 1]);\n        }\n    }\n    return\
    \ dp[0][n - 1];", "    int n = arr.size();\n    int i = 0, j = n - 1;\n    int\
    \ count = 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n         \
    \   count++;\n        }\n        i++;\n        j--;\n    }\n    return count;",
  "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n  \
    \  for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int len\
    \ = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n \
    \           int j = i + len - 1;\n            if (arr[i] == arr[j] && len == 2)\
    \ {\n                dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n    \
    \            dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n\
    \        }\n    }\n    return n - dp[0][n - 1];", "    // your code here\n   \
    \ int n = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n    {\n  \
    \      for(int j=0;j<n;j++)\n        {\n            dp[i][j] = 0;\n        }\n\
    \    }\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n      \
    \  {\n            if(i>=j)\n            {\n                dp[i][j] = 0;\n   \
    \         }\n            else\n            {\n                dp[i][j] = std::min(dp[i][j-1],dp[i+1][j])\
    \ + 1;\n                if(arr[i] == arr[j])\n                {\n            \
    \        dp[i][j] = std::min(dp[i][j],dp[i+1][j-1]);\n                }\n    \
    \        }\n        }\n    }\n    return dp[0][n-1];", "    // your code here\n\
    \    int n = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n      \
    \  dp[i][i] = 0;\n    for(int i=0;i<n-1;i++)\n        dp[i][i+1] = arr[i]==arr[i+1]?0:1;\n\
    \    for(int l=3;l<=n;l++){\n        for(int i=0;i<n-l+1;i++){\n            int\
    \ j = i+l-1;\n            if(arr[i]==arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1+std::min(dp[i+1][j],dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++)\
    \ {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++)\
    \ {\n        dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n; l++) {\n       \
    \ for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n     \
    \       if(arr[i] == arr[j] && l == 2) {\n                dp[i][j] = 2;\n    \
    \        } else if(arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j\
    \ - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i +\
    \ 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n\
    \        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]\
    \ == arr[i+1])\n        {\n            dp[i][i+1] = 0;\n        }\n        else\n\
    \        {\n            dp[i][i+1] = 1;\n        }\n    }\n    for(int l=3;l<=n;l++)\n\
    \    {\n        for(int i=0;i<n-l+1;i++)\n        {\n            int j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n            {\n                dp[i][j] = dp[i+1][j-1];\n\
    \            }\n            else\n            {\n                dp[i][j] = 1\
    \ + std::min(dp[i+1][j],dp[i][j-1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] =\
    \ 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j =\
    \ 0; j < n; j++) {\n            if(i == j) {\n                dp[i][j] = 0;\n\
    \            } else if(j == i + 1) {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? 0 : 1;\n            } else {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n           \
    \ }\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n \
    \   int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int len = 2; len <= n; len++)\
    \ {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i +\
    \ len - 1;\n            if (arr[i] == arr[j] && len == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for (int len = 2;\
    \ len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n      \
    \      int j = i + len - 1;\n            if (arr[i] == arr[j] && len == 2)\n \
    \               dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n      \
    \          dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n              \
    \  dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n    return\
    \ n - dp[0][n - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 0;\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = i\
    \ + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 1;\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i <\
    \ n - len + 1; i++) {\n            int j = i + len - 1;\n            if (arr[i]\
    \ == arr[j] && len == 2)\n                dp[i][j] = 2;\n            else if (arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n\
    \                dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n\
    \    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n            int j =\
    \ i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j] = dp[i\
    \ + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n     \
    \   for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\
    \    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int l\
    \ = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n        \
    \    int j = i + l - 1;\n            if(arr[i] == arr[j] && l == 2) {\n      \
    \          dp[i][j] = 2;\n            } else if(arr[i] == arr[j]) {\n        \
    \        dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n            \
    \    dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n       \
    \ }\n    }\n    return n - dp[0][n - 1];", "    long n = arr.size();\n    long\
    \ dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (long i = 0; i < n; i++)\n\
    \        dp[i][i] = 1;\n    for (long cl = 2; cl <= n; cl++) {\n        for (long\
    \ i = 0; i < n - cl + 1; i++) {\n            long j = i + cl - 1;\n          \
    \  if (arr[i] == arr[j] && cl == 2)\n                dp[i][j] = 2;\n         \
    \   else if (arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1] +\
    \ 2;\n            else\n                dp[i][j] = std::max(dp[i][j - 1], dp[i\
    \ + 1][j]);\n        }\n    }\n    return (n - dp[0][n - 1]);", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int i = 0; i < n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1] ? 0 :\
    \ 1;\n    for(int i = 3; i <= n; i++)\n        for(int j = 0; j <= n-i; j++)\n\
    \            dp[j][j+i-1] = arr[j] == arr[j+i-1] ? dp[j+1][j+i-2] : 1 + std::min(dp[j+1][j+i-1],\
    \ dp[j][j+i-2]);\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l +\
    \ 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    // your code here\n    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i=0;i<n;i++)\n        dp[i][i] = 0;\n    for(int\
    \ len=2;len<=n;len++){\n        for(int i=0;i<n-len+1;i++){\n            int j\
    \ = i+len-1;\n            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int gap = 1; gap < n; gap++)\
    \ {\n        for (int i = 0, j = gap; j < n; i++, j++) {\n            if (arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n            } else\
    \ {\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n  \
    \          }\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 1;\n    for (int len = 2; len <= n; len++) {\n    \
    \    for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n\
    \            if (arr[i] == arr[j] && len == 2)\n                dp[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j\
    \ - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j - 1],\
    \ dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "    int n\
    \ = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n       \
    \ for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        if(i >= j) {\n                dp[i][j] = 0;\n            } else {\n \
    \               if(arr[i] == arr[j]) {\n                    dp[i][j] = dp[i+1][j-1];\n\
    \                } else {\n                    dp[i][j] = 1 + std::min(dp[i+1][j],\
    \ dp[i][j-1]);\n                }\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0,\
    \ sizeof(dp));\n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for\
    \ (int len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++)\
    \ {\n            int j = i + len - 1;\n            if (arr[i] == arr[j] && len\
    \ == 2)\n                dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n\
    \    return n - dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 1;\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i <\
    \ n - len + 1; i++) {\n            int j = i + len - 1;\n            if (arr[i]\
    \ == arr[j] && len == 2)\n                dp[i][j] = 2;\n            else if (arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n\
    \                dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n\
    \    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n            int j =\
    \ i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j] = dp[i\
    \ + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long\
    \ n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n     \
    \   dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i = 0;\
    \ i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int len = 2; len <= n; len++) {\n      \
    \  for(int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n\
    \            if(arr[i] == arr[j] && len == 2) {\n                dp[i][j] = 2;\n\
    \            } else if(arr[i] == arr[j]) {\n                dp[i][j] = dp[i +\
    \ 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int\
    \ l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n     \
    \       int j = i + l - 1;\n            if (arr[i] == arr[j] && l == 2) {\n  \
    \              dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n   \
    \             dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n       \
    \         dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n  \
    \      }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n   \
    \ int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j <\
    \ n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i\
    \ < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int len = 2; len <= n; len++)\
    \ {\n        for(int i = 0; i < n - len + 1; i++) {\n            int j = i + len\
    \ - 1;\n            if(arr[i] == arr[j] && len == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if(arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 1;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l +\
    \ 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j] &&\
    \ l == 2)\n                dp[i][j] = 2;\n            else if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return n - dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    long n =\
    \ arr.size();\n    long ans = 0;\n    for (long i = 0; i < n / 2; i++) {\n   \
    \     ans += std::abs(arr[i] - arr[n - i - 1]);\n    }\n    return ans;", "  \
    \  // your code goes here\n    long n = arr.size();\n    long dp[n][n];\n    for(long\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++)\n\
    \    {\n        for(long i = 0; i < n - l + 1; i++)\n        {\n            long\
    \ j = i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j] =\
    \ dp[i + 1][j - 1];\n            else\n                dp[i][j] = std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n        }\n    }\n    return dp[0][n - 1];", " \
    \   int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n\
    \    }\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n\
    \            if(i == j) {\n                dp[i][j] = 0;\n            } else if(i\
    \ == j - 1) {\n                dp[i][j] = abs(arr[i] - arr[j]);\n            }\
    \ else {\n                dp[i][j] = std::min(dp[i + 1][j - 1] + abs(arr[i] -\
    \ arr[j]), dp[i + 1][j] + abs(arr[i] - arr[i + 1]));\n            }\n        }\n\
    \    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int i = n-2; i >= 0; i--) {\n        for(int\
    \ j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n               \
    \ dp[i][j] = dp[i+1][j-1] + 2;\n            } else {\n                dp[i][j]\
    \ = std::max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n    }\n    return\
    \ n - dp[0][n-1];", "  // your code here\n  int n = arr.size();\n  int dp[n][n];\n\
    \  for(int i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(int l = 2; l <= n; l++)\n\
    \  {\n    for(int i = 0; i < n - l + 1; i++)\n    {\n      int j = i + l - 1;\n\
    \      if(arr[i] == arr[j])\n        dp[i][j] = dp[i + 1][j - 1];\n      else\n\
    \        dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n    }\n  }\n  return\
    \ dp[0][n - 1];", "    // your code here\n    long n = arr.size();\n    long dp[n][n];\n\
    \    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(long i = 0; i\
    \ < n - 1; i++)\n        dp[i][i + 1] = arr[i] == arr[i + 1] ? 0 : 1;\n    for(long\
    \ i = 2; i < n; i++)\n    {\n        for(long j = 0; j < n - i; j++)\n       \
    \ {\n            if(arr[j] == arr[j + i])\n                dp[j][j + i] = dp[j\
    \ + 1][j + i - 1];\n            else\n                dp[j][j + i] = std::min(dp[j\
    \ + 1][j + i], dp[j][j + i - 1]) + 1;\n        }\n    }\n    return dp[0][n -\
    \ 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int l =\
    \ 0, r = n - 1;\n    int cnt = 0;\n    while (l < r) {\n        if (arr[l] !=\
    \ arr[r]) {\n            cnt++;\n        }\n        l++;\n        r--;\n    }\n\
    \    return cnt;", "    int n = arr.size();\n    int dp[n][n];\n    for(int i\
    \ = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n\
    \        for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    // your code here\n    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n\
    \        {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n\
    \    {\n        dp[i][i] = 0;\n    }\n    for(int l=2;l<=n;l++)\n    {\n     \
    \   for(int i=0;i<n-l+1;i++)\n        {\n            int j = i+l-1;\n        \
    \    if(arr[i] == arr[j])\n            {\n                dp[i][j] = dp[i+1][j-1];\n\
    \            }\n            else\n            {\n                dp[i][j] = 1\
    \ + std::min(dp[i+1][j],dp[i][j-1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] =\
    \ 0;\n        }\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int i =\
    \ 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(l ==\
    \ 2) {\n                dp[i][j] = (arr[i] == arr[j]) ? 0 : 1;\n            }\
    \ else {\n                if(arr[i] == arr[j]) {\n                    dp[i][j]\
    \ = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n                }\n           \
    \ }\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (long i = 0; i <\
    \ n; i++) {\n        dp[i][i] = 1;\n    }\n    for (long cl = 2; cl <= n; cl++)\
    \ {\n        for (long i = 0; i < n - cl + 1; i++) {\n            long j = i +\
    \ cl - 1;\n            if (arr[i] == arr[j] && cl == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i][j\
    \ - 1], dp[i + 1][j]);\n            }\n        }\n    }\n    return (n - dp[0][n\
    \ - 1]);", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0;\
    \ i < n; i++)\n        dp[i][i] = 0;\n    for(long i = 0; i < n - 1; i++)\n  \
    \      dp[i][i + 1] = (arr[i] == arr[i + 1]) ? 0 : 1;\n    for(long i = 2; i <\
    \ n; i++) {\n        for(long j = 0; j < n - i; j++) {\n            if(arr[j]\
    \ == arr[j + i])\n                dp[j][j + i] = dp[j + 1][j + i - 1];\n     \
    \       else\n                dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j\
    \ + i - 1]) + 1;\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int i = 0; i < n - 1; i++) {\n\
    \        if (arr[i] == arr[i + 1]) {\n            dp[i][i + 1] = 1;\n        }\
    \ else {\n            dp[i][i + 1] = 2;\n        }\n    }\n    for (int k = 3;\
    \ k <= n; k++) {\n        for (int i = 0; i < n - k + 1; i++) {\n            int\
    \ j = i + k - 1;\n            if (arr[i] == arr[j]) {\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    // your code here\n    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++)\n    {\n        for(int i = 0; i < n - l + 1; i++)\n\
    \        {\n            int j = i + l - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    // your code here\n    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n\
    \    for(long l = 2; l <= n; l++)\n    {\n        for(long i = 0; i < n - l +\
    \ 1; i++)\n        {\n            long j = i + l - 1;\n            if(arr[i] ==\
    \ arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n  \
    \              dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n\
    \    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "  long n = arr.size();\n\
    \  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j <\
    \ n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    dp[i][i] = 1;\n  }\n  for (long i = 0; i < n - 1; i++) {\n    if (arr[i]\
    \ == arr[i + 1]) {\n      dp[i][i + 1] = 1;\n    } else {\n      dp[i][i + 1]\
    \ = 2;\n    }\n  }\n  for (long k = 3; k <= n; k++) {\n    for (long i = 0; i\
    \ < n - k + 1; i++) {\n      long j = i + k - 1;\n      if (arr[i] == arr[j])\
    \ {\n        dp[i][j] = dp[i + 1][j - 1];\n      } else {\n        dp[i][j] =\
    \ std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n      }\n    }\n  }\n  return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n \
    \   }\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\
    \ {\n            dp[i][i + 1] = 1;\n        } else {\n            dp[i][i + 1]\
    \ = 2;\n        }\n    }\n    for(int i = 3; i <= n; i++) {\n        for(int j\
    \ = 0; j < n - i + 1; j++) {\n            int k = j + i - 1;\n            if(arr[j]\
    \ == arr[k]) {\n                dp[j][k] = dp[j + 1][k - 1];\n            } else\
    \ {\n                dp[j][k] = 1 + std::min(dp[j + 1][k], dp[j][k - 1]);\n  \
    \          }\n        }\n    }\n    return dp[0][n - 1];", "  long n = arr.size();\n\
    \  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j <\
    \ n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    dp[i][i] = 1;\n  }\n  for (long i = 1; i < n; i++) {\n    for (long j = 0;\
    \ j < n - i; j++) {\n      if (arr[j] == arr[j + i]) {\n        dp[j][j + i] =\
    \ dp[j + 1][j + i - 1];\n      } else {\n        dp[j][j + i] = std::min(dp[j\
    \ + 1][j + i], dp[j][j + i - 1]) + 1;\n      }\n    }\n  }\n  return dp[0][n -\
    \ 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    for(long i = 0; i < n; i++) {\n        dp[i][i] = 0;\n\
    \    }\n    for(long i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\
    \ {\n            dp[i][i + 1] = 0;\n        } else {\n            dp[i][i + 1]\
    \ = 1;\n        }\n    }\n    for(long i = 3; i <= n; i++) {\n        for(long\
    \ j = 0; j < n - i + 1; j++) {\n            long k = j + i - 1;\n            if(arr[j]\
    \ == arr[k]) {\n                dp[j][k] = dp[j + 1][k - 1];\n            } else\
    \ {\n                dp[j][k] = std::min(dp[j + 1][k], dp[j][k - 1]) + 1;\n  \
    \          }\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i =\
    \ 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i ==\
    \ j) {\n                dp[i][j] = 0;\n            } else if(j == i + 1) {\n \
    \               dp[i][j] = (arr[i] == arr[j]) ? 0 : 1;\n            } else {\n\
    \                if(arr[i] == arr[j]) {\n                    dp[i][j] = dp[i +\
    \ 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    // your code here\n    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for(int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 1;\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2)\n                dp[i][j] = 2;\n            else if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n\
    \                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n        }\n\
    \    }\n    return n - dp[0][n - 1];", "    long n = arr.size();\n    long dp[n][n];\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(long l = 2; l <= n; l++) {\n\
    \        for(long i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n\
    \            if(l == 2) {\n                dp[i][j] = (arr[i] == arr[j]) ? 0 :\
    \ 1;\n            } else {\n                if(arr[i] == arr[j]) {\n         \
    \           dp[i][j] = dp[i + 1][j - 1];\n                } else {\n         \
    \           dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n           \
    \     }\n            }\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n     \
    \   for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\
    \    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int len\
    \ = 2; len <= n; len++) {\n        for(int i = 0; i < n - len + 1; i++) {\n  \
    \          int j = i + len - 1;\n            if(arr[i] == arr[j] && len == 2)\
    \ {\n                dp[i][j] = 2;\n            } else if(arr[i] == arr[j]) {\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n    \
    \            dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n\
    \        }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n \
    \   int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 1;\n    for (int len = 2; len <= n; len++) {\n    \
    \    for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n\
    \            if (arr[i] == arr[j] && len == 2)\n                dp[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j\
    \ - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j - 1],\
    \ dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "    int n\
    \ = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int\
    \ gap = 1; gap < n; gap++) {\n        for (int i = 0, j = gap; j < n; i++, j++)\
    \ {\n            dp[i][j] = (arr[i] == arr[j]) ? dp[i + 1][j - 1] : (std::min(dp[i][j\
    \ - 1], dp[i + 1][j]) + 1);\n        }\n    }\n    return dp[0][n - 1];", "  \
    \  int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n\
    \    }\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n\
    \            if(i == j) {\n                dp[i][j] = 0;\n            } else if(i\
    \ == j - 1) {\n                dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n        \
    \    } else {\n                dp[i][j] = arr[i] == arr[j] ? dp[i + 1][j - 1]\
    \ : 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int gap = 1; gap < n; gap++) {\n        for (int i\
    \ = 0, j = gap; j < n; i++, j++) {\n            if (arr[i] == arr[j]) {\n    \
    \            dp[i][j] = dp[i + 1][j - 1];\n            } else {\n            \
    \    dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            }\n   \
    \     }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       for(int j = 0; j < n; j++) {\n            if(i == j) {\n             \
    \   dp[i][j] = 0;\n            } else if(i == j - 1) {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j -\
    \ 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];", "    long\
    \ n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n   \
    \     for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n  \
    \  }\n    for(long l = 2; l <= n; l++) {\n        for(long i = 0; i < n - l +\
    \ 1; i++) {\n            long j = i + l - 1;\n            if(l == 2) {\n     \
    \           dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n            } else {\n     \
    \           if(arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j\
    \ - 1];\n                } else {\n                    dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j\
    \ = 0; j < n; j++) {\n            if(i == j) {\n                dp[i][j] = 0;\n\
    \            } else if(i == j - 1) {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? 0 : 1;\n            } else {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n           \
    \ }\n        }\n    }\n    return dp[0][n - 1];", "    // your code here\n   \
    \ int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n   \
    \     dp[i][i] = 0;\n    for(int i = 0; i < n - 1; i++)\n        dp[i][i + 1]\
    \ = arr[i] == arr[i + 1] ? 0 : 1;\n    for(int i = 2; i < n; i++)\n    {\n   \
    \     for(int j = 0; j < n - i; j++)\n        {\n            if(arr[j] == arr[j\
    \ + i])\n                dp[j][j + i] = dp[j + 1][j + i - 1];\n            else\n\
    \                dp[j][j + i] = std::min(dp[j + 1][j + i], dp[j][j + i - 1]) +\
    \ 1;\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (int len = 2; len <= n; len++)\
    \ {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i +\
    \ len - 1;\n            if (arr[i] == arr[j] && len == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int l = 0, r = n - 1;\n    int ans = 0;\n\
    \    while (l < r) {\n        if (arr[l] != arr[r]) {\n            ans++;\n  \
    \      }\n        l++;\n        r--;\n    }\n    return ans;", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 1;\n    for (int len = 2; len <= n; len++) {\n    \
    \    for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n\
    \            if (arr[i] == arr[j] && len == 2)\n                dp[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j\
    \ - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j - 1],\
    \ dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "    int n\
    \ = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n-l+1; i++)\
    \ {\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] =\
    \ 1 + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "  long n = arr.size();\n  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n  \
    \  for (long j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long\
    \ i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n      if (i == j)\
    \ {\n        dp[i][j] = 0;\n      } else if (j == i + 1) {\n        dp[i][j] =\
    \ arr[i] == arr[j] ? 0 : 1;\n      } else {\n        dp[i][j] = arr[i] == arr[j]\
    \ ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      }\n  \
    \  }\n  }\n  return dp[0][n - 1];", "    long n = arr.size();\n    long dp[n][n];\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n\
    \        dp[i][i] = 0;\n    }\n    for(long i = 0; i < n - 1; i++) {\n       \
    \ if(arr[i] == arr[i + 1]) {\n            dp[i][i + 1] = 0;\n        } else {\n\
    \            dp[i][i + 1] = 1;\n        }\n    }\n    for(long l = 3; l <= n;\
    \ l++) {\n        for(long i = 0; i < n - l + 1; i++) {\n            long j =\
    \ i + l - 1;\n            if(arr[i] == arr[j]) {\n                dp[i][j] = dp[i\
    \ + 1][j - 1];\n            } else {\n                dp[i][j] = std::min(dp[i\
    \ + 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++)\n    {\n        for(int i = 0; i < n - l + 1; i++)\n        {\n    \
    \        int j = i + l - 1;\n            if(arr[i] == arr[j])\n              \
    \  dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j] =\
    \ 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n-1; i++)\n        dp[i][i+1]\
    \ = arr[i] == arr[i+1] ? 0 : 1;\n    for(int i = 2; i < n; i++)\n        for(int\
    \ j = 0; j < n-i; j++)\n            dp[j][j+i] = arr[j] == arr[j+i] ? dp[j+1][j+i-1]\
    \ : 1 + std::min(dp[j+1][j+i], dp[j][j+i-1]);\n    return dp[0][n-1];", "    long\
    \ n = arr.size();\n    long dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for\
    \ (long i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (long cl =\
    \ 2; cl <= n; cl++) {\n        for (long i = 0; i < n - cl + 1; i++) {\n     \
    \       long j = i + cl - 1;\n            if (arr[i] == arr[j] && cl == 2) {\n\
    \                dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n \
    \               dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n     \
    \           dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n            }\n\
    \        }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n \
    \   int l = 0, r = n - 1;\n    int ans = 0;\n    while (l < r) {\n        if (arr[l]\
    \ != arr[r]) {\n            ans++;\n        }\n        l++;\n        r--;\n  \
    \  }\n    return ans;", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n\
    \        for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int\
    \ l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n     \
    \       int j = i + l - 1;\n            if (arr[i] == arr[j] && l == 2) {\n  \
    \              dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n   \
    \             dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n       \
    \         dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n  \
    \      }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n   \
    \ int l = 0, r = n - 1;\n    int count = 0;\n    while (l < r) {\n        if (arr[l]\
    \ != arr[r]) {\n            count++;\n        }\n        l++;\n        r--;\n\
    \    }\n    return count;", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(int gap = 1; gap < n; gap++) {\n        for(int\
    \ i = 0, j = gap; j < n; i++, j++) {\n            if(arr[i] == arr[j]) {\n   \
    \             dp[i][j] = dp[i+1][j-1];\n            } else {\n               \
    \ dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n\
    \    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int len = 2; len <= n; len++) {\n        for (int i =\
    \ 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if\
    \ (arr[i] == arr[j] && len == 2) {\n                dp[i][j] = 2;\n          \
    \  } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1]\
    \ + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
  "  long n = arr.size();\n  long dp[n][n];\n  for (long i = 0; i < n; i++) {\n  \
    \  for (long j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (long\
    \ i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (long i = 0; i < n - 1;\
    \ i++) {\n    if (arr[i] == arr[i + 1]) {\n      dp[i][i + 1] = 1;\n    } else\
    \ {\n      dp[i][i + 1] = 2;\n    }\n  }\n  for (long i = 2; i < n; i++) {\n \
    \   for (long j = 0; j < n - i; j++) {\n      if (arr[j] == arr[j + i]) {\n  \
    \      dp[j][j + i] = dp[j + 1][j + i - 1];\n      } else {\n        dp[j][j +\
    \ i] = std::min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1;\n      }\n    }\n  }\n\
    \  return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n-1; i++)\n\
    \        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    for(int i = 2; i < n; i++)\n\
    \        for(int j = 0; j < n-i; j++)\n            dp[j][j+i] = arr[j] == arr[j+i]\
    \ ? dp[j+1][j+i-1] : (1 + std::min(dp[j+1][j+i], dp[j][j+i-1]));\n    return dp[0][n-1];",
  "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n  \
    \  for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for (int len = 2; len\
    \ <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n          \
    \  int j = i + len - 1;\n            if (arr[i] == arr[j] && len == 2)\n     \
    \           dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n                dp[i][j]\
    \ = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n\
    \        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]\
    \ == arr[i+1])\n        {\n            dp[i][i+1] = 0;\n        }\n        else\n\
    \        {\n            dp[i][i+1] = 1;\n        }\n    }\n    for(int i=2;i<n;i++)\n\
    \    {\n        for(int j=0;j<n-i;j++)\n        {\n            if(arr[j] == arr[j+i])\n\
    \            {\n                dp[j][j+i] = dp[j+1][j+i-1];\n            }\n\
    \            else\n            {\n                dp[j][j+i] = 1 + std::min(dp[j+1][j+i],dp[j][j+i-1]);\n\
    \            }\n        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0;\
    \ i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(i == j)\
    \ {\n                dp[i][j] = 0;\n            } else if(i + 1 == j) {\n    \
    \            dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n            } else {\n    \
    \            dp[i][j] = arr[i] == arr[j] ? dp[i + 1][j - 1] : 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i\
    \ < n; i++)\n        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n     \
    \   for(long i = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n \
    \           if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j -\
    \ 1]) + 1;\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int len = 2; len <= n; len++) {\n        for(int i = 0; i < n - len + 1;\
    \ i++) {\n            int j = i + len - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n\
    \    }\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i <\
    \ n - len + 1; i++) {\n            int j = i + len - 1;\n            if (arr[i]\
    \ == arr[j] && len == 2) {\n                dp[i][j] = 2;\n            } else\
    \ if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n\
    \            } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j\
    \ - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];", "  \
    \  int n = arr.size();\n    int dp[n][n];\n    int i, j, k, L;\n    for (i = 0;\
    \ i < n; i++)\n        dp[i][i] = 0;\n    for (L = 2; L < n; L++) {\n        for\
    \ (i = 0; i < n - L + 1; i++) {\n            j = i + L - 1;\n            if (arr[i]\
    \ == arr[j] && L == 2)\n                dp[i][j] = 0;\n            else if (arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i][j - 1], dp[i + 1][j]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    // your code here\n    long n = arr.size();\n\
    \    long ans = 0;\n    long i = 0;\n    long j = n-1;\n    while(i<j){\n    \
    \    if(arr[i] != arr[j]){\n            ans++;\n        }\n        i++;\n    \
    \    j--;\n    }\n    return ans;", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int k = 2; k <= n; k++) {\n        for(int\
    \ i = 0; i < n - k + 1; i++) {\n            int j = i + k - 1;\n            if(arr[i]\
    \ == arr[j] && k == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l +\
    \ 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n\
    \        for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n\
    \    for(long i = 0; i < n - 1; i++)\n        dp[i][i + 1] = arr[i] == arr[i +\
    \ 1] ? 0 : 1;\n    for(long i = 2; i < n; i++) {\n        for(long j = 0; j <\
    \ n - i; j++) {\n            if(arr[j] == arr[j + i])\n                dp[j][j\
    \ + i] = dp[j + 1][j + i - 1];\n            else\n                dp[j][j + i]\
    \ = 1 + std::min(dp[j + 1][j + i], dp[j][j + i - 1]);\n        }\n    }\n    return\
    \ dp[0][n - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 0;\n    }\n    for(long i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\
    \ {\n            dp[i][i+1] = 0;\n        } else {\n            dp[i][i+1] = 1;\n\
    \        }\n    }\n    for(long l = 3; l <= n; l++) {\n        for(long i = 0;\
    \ i < n-l+1; i++) {\n            long j = i+l-1;\n            if(arr[i] == arr[j])\
    \ {\n                dp[i][j] = dp[i+1][j-1];\n            } else {\n        \
    \        dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n            }\n   \
    \     }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       for(int j = 0; j < n; j++) {\n            if(i == j)\n               \
    \ dp[i][j] = 0;\n            else if(i + 1 == j)\n                dp[i][j] = arr[i]\
    \ == arr[j] ? 0 : 1;\n            else if(arr[i] == arr[j])\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "  int\
    \ n = arr.size();\n  int l = 0, r = n - 1;\n  int ans = 0;\n  while (l < r) {\n\
    \    if (arr[l] != arr[r]) {\n      ans++;\n    }\n    l++;\n    r--;\n  }\n \
    \ return ans;", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n\
    \        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n\
    \        {\n            dp[i][i+1] = 0;\n        }\n        else\n        {\n\
    \            dp[i][i+1] = 1;\n        }\n    }\n    for(int k=3;k<=n;k++)\n  \
    \  {\n        for(int i=0;i<n-k+1;i++)\n        {\n            int j = i+k-1;\n\
    \            if(arr[i]==arr[j])\n            {\n                dp[i][j] = dp[i+1][j-1];\n\
    \            }\n            else\n            {\n                dp[i][j] = 1\
    \ + std::min(dp[i+1][j],dp[i][j-1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0,\
    \ sizeof(dp));\n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for\
    \ (int len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++)\
    \ {\n            int j = i + len - 1;\n            if (arr[i] == arr[j] && len\
    \ == 2)\n                dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n\
    \    return n - dp[0][n - 1];", "    // your code here\n    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i =\
    \ 0; i < n; i++) {\n        dp[i][i] = 0;\n    }\n    for(long i = 0; i < n -\
    \ 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            dp[i][i + 1] = 0;\n\
    \        } else {\n            dp[i][i + 1] = 1;\n        }\n    }\n    for(long\
    \ i = 2; i < n; i++) {\n        for(long j = 0; j < n - i; j++) {\n          \
    \  if(arr[j] == arr[j + i]) {\n                dp[j][j + i] = dp[j + 1][j + i\
    \ - 1];\n            } else {\n                dp[j][j + i] = std::min(dp[j +\
    \ 1][j + i], dp[j][j + i - 1]) + 1;\n            }\n        }\n    }\n    return\
    \ dp[0][n - 1];", "    long n = arr.size();\n    long dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (long i = 0; i < n; i++) {\n        dp[i][i] = 1;\n\
    \    }\n    for (long cl = 2; cl <= n; cl++) {\n        for (long i = 0; i < n\
    \ - cl + 1; i++) {\n            long j = i + cl - 1;\n            if (arr[i] ==\
    \ arr[j] && cl == 2) {\n                dp[i][j] = 2;\n            } else if (arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l +\
    \ 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j\
    \ = 0; j < n; j++) {\n            if(i == j) {\n                dp[i][j] = 0;\n\
    \            } else if(i == j - 1) {\n                dp[i][j] = abs(arr[i] -\
    \ arr[j]);\n            } else {\n                dp[i][j] = dp[i + 1][j - 1]\
    \ + abs(arr[i] - arr[j]);\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int i = 0, j = n - 1;\n    int count =\
    \ 0;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n            count++;\n\
    \        }\n        i++;\n        j--;\n    }\n    return count;", "    long n\
    \ = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n       \
    \ dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i = 0; i\
    \ < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0; i <\
    \ n - l + 1; i++) {\n            int j = i + l - 1;\n            if (arr[i] ==\
    \ arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if (arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int\
    \ l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n      \
    \      int j = i + l - 1;\n            if(l == 2) {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                if(arr[i]\
    \ == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1];\n           \
    \     } else {\n                    dp[i][j] = std::min(dp[i + 1][j], dp[i][j\
    \ - 1]) + 1;\n                }\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i\
    \ < n; i++) {\n        for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i >= j) {\n                dp[i][j] = 0;\n   \
    \         } else {\n                dp[i][j] = std::min(dp[i-1][j], dp[i][j-1])\
    \ + 1;\n                if(arr[i] == arr[j]) {\n                    dp[i][j] =\
    \ std::min(dp[i][j], dp[i+1][j-1]);\n                }\n            }\n      \
    \  }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int gap = 1; gap < n; gap++) {\n   \
    \     for (int i = 0, j = gap; j < n; i++, j++) {\n            dp[i][j] = (arr[i]\
    \ == arr[j]) ? dp[i + 1][j - 1] : (std::min(dp[i][j - 1], dp[i + 1][j]) + 1);\n\
    \        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++)\
    \ {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++)\
    \ {\n        dp[i][i] = 1;\n    }\n    for(int len = 2; len <= n; len++) {\n \
    \       for(int i = 0; i < n - len + 1; i++) {\n            int j = i + len -\
    \ 1;\n            if(arr[i] == arr[j] && len == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if(arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int\
    \ l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n     \
    \       int j = i + l - 1;\n            if (arr[i] == arr[j] && l == 2) {\n  \
    \              dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n   \
    \             dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n       \
    \         dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n  \
    \      }\n    }\n    return n - dp[0][n - 1];", "    int n = arr.size();\n   \
    \ int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int gap = 1; gap < n;\
    \ gap++) {\n        for (int i = 0, j = gap; j < n; i++, j++) {\n            if\
    \ (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1];\n       \
    \     } else {\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n       \
    \ dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i <\
    \ n-l+1; i++) {\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i=0;i<n;i++)\n        dp[i][i] = 0;\n    for(int l=2;l<=n;l++){\n        for(int\
    \ i=0;i<n-l+1;i++){\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "    int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n  \
    \  for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int i\
    \ = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            dp[i][i\
    \ + 1] = 1;\n        } else {\n            dp[i][i + 1] = 2;\n        }\n    }\n\
    \    for (int i = 2; i < n; i++) {\n        for (int j = 0; j < n - i; j++) {\n\
    \            if (arr[j] == arr[j + i]) {\n                dp[j][j + i] = dp[j\
    \ + 1][j + i - 1];\n            } else {\n                dp[j][j + i] = 1 + std::min(dp[j\
    \ + 1][j + i], dp[j][j + i - 1]);\n            }\n        }\n    }\n    return\
    \ dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int gap = 1; gap < n; gap++) {\n        for (int i\
    \ = 0, j = gap; j < n; i++, j++) {\n            if (arr[i] == arr[j]) {\n    \
    \            dp[i][j] = dp[i + 1][j - 1];\n            } else {\n            \
    \    dp[i][j] = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n            }\n   \
    \     }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n    long\
    \ dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n;\
    \ j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i == j) {\n\
    \                dp[i][j] = 0;\n            } else if(j == i + 1) {\n        \
    \        dp[i][j] = abs(arr[i] - arr[j]);\n            } else {\n            \
    \    dp[i][j] = std::min(dp[i + 1][j] + abs(arr[i] - arr[i + 1]), dp[i][j - 1]\
    \ + abs(arr[j] - arr[j - 1]));\n            }\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n \
    \   }\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\
    \ {\n            dp[i][i + 1] = 1;\n        } else {\n            dp[i][i + 1]\
    \ = 2;\n        }\n    }\n    for(int i = 2; i < n; i++) {\n        for(int j\
    \ = 0; j < n - i; j++) {\n            if(arr[j] == arr[j + i]) {\n           \
    \     dp[j][j + i] = dp[j + 1][j + i - 1];\n            } else {\n           \
    \     dp[j][j + i] = 1 + std::min(dp[j + 1][j + i], dp[j][j + i - 1]);\n     \
    \       }\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n\
    \    for(long l = 2; l <= n; l++) {\n        for(long i = 0; i < n - l + 1; i++)\
    \ {\n            long j = i + l - 1;\n            if(arr[i] == arr[j])\n     \
    \           dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = std::min(dp[i + 1][j], dp[i][j - 1]) + 1;\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n        dp[i][i] = 0;\n    for(int l=2;l<=n;l++){\n\
    \        for(int i=0;i<n-l+1;i++){\n            int j = i+l-1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n            else\n   \
    \             dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n  \
    \  }\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n \
    \   for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n-l+1; i++) {\n            int j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    // your code here\n    int n\
    \ = arr.size();\n    int count = 0;\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n\
    \        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n\
    \        j--;\n    }\n    return count;", "    int n = arr.size();\n    int ans\
    \ = 0;\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (arr[i] !=\
    \ arr[j]) {\n            ans++;\n        }\n        i++;\n        j--;\n    }\n\
    \    return ans;", "    int n = arr.size();\n    int dp[n][n];\n    for(int i\
    \ = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j]\
    \ = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j\
    \ = 0; j < n; j++) {\n            if(i == j) {\n                dp[i][j] = 0;\n\
    \            } else if(j == i + 1) {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? 0 : 1;\n            } else {\n                dp[i][j] = arr[i] == arr[j]\
    \ ? dp[i + 1][j - 1] : 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n           \
    \ }\n        }\n    }\n    return dp[0][n - 1];", "    // your code here\n   \
    \ long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long i = 0; i < n-1; i++)\n        dp[i][i+1]\
    \ = arr[i] == arr[i+1] ? 0 : 1;\n    for(long l = 3; l <= n; l++)\n    {\n   \
    \     for(long i = 0; i < n-l+1; i++)\n        {\n            long j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    // your code here\n    int n\
    \ = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n    {\n        for(int\
    \ j=0;j<n;j++)\n        {\n            dp[i][j] = 0;\n        }\n    }\n    for(int\
    \ i=0;i<n;i++)\n    {\n        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n\
    \    {\n        if(arr[i] == arr[i+1])\n        {\n            dp[i][i+1] = 0;\n\
    \        }\n        else\n        {\n            dp[i][i+1] = 1;\n        }\n\
    \    }\n    for(int l=3;l<=n;l++)\n    {\n        for(int i=0;i<n-l+1;i++)\n \
    \       {\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n    \
    \        {\n                dp[i][j] = dp[i+1][j-1];\n            }\n        \
    \    else\n            {\n                dp[i][j] = 1 + std::min(dp[i+1][j],dp[i][j-1]);\n\
    \            }\n        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int i = 0; i < n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1] ? 0 :\
    \ 1;\n    for(int l = 3; l <= n; l++) {\n        for(int i = 0; i < n-l+1; i++)\
    \ {\n            int j = i+l-1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] =\
    \ 1 + std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n  \
    \      dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0;\
    \ i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i <\
    \ n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    for(int i =\
    \ 2; i < n; i++)\n        for(int j = 0; j < n-i; j++)\n            dp[j][j+i]\
    \ = arr[j] == arr[j+i] ? dp[j+1][j+i-1] : 1 + std::min(dp[j+1][j+i], dp[j][j+i-1]);\n\
    \    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n-1; i++)\n\
    \        dp[i][i+1] = arr[i] == arr[i+1] ? 0 : 1;\n    for(int l = 3; l <= n;\
    \ l++) {\n        for(int i = 0; i < n-l+1; i++) {\n            int j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++)\
    \ {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++)\
    \ {\n        for(int j = 0; j < n; j++) {\n            if(i == j) {\n        \
    \        dp[i][j] = 0;\n            } else if(i == j - 1) {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                dp[i][j]\
    \ = arr[i] == arr[j] ? dp[i + 1][j - 1] : (1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]));\n            }\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n       \
    \ dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i <\
    \ n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i] ==\
    \ arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n  \
    \              dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n\
    \    }\n    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n    \
    \        dp[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n \
    \       dp[i][i] = 1;\n    }\n    for(int l = 2; l <= n; l++) {\n        for(int\
    \ i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j] && l == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i]\
    \ == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n           \
    \ } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n\
    \            }\n        }\n    }\n    return n - dp[0][n - 1];", "    long n =\
    \ arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(long i = 0; i < n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1]\
    \ ? 0 : 1;\n    for(long i = 2; i < n; i++)\n        for(long j = 0; j < n-i;\
    \ j++)\n            dp[j][j+i] = arr[j] == arr[j+i] ? dp[j+1][j+i-1] : 1 + std::min(dp[j+1][j+i],\
    \ dp[j][j+i-1]);\n    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <=\
    \ n; l++) {\n        for(int i = 0; i < n-l+1; i++) {\n            int j = i+l-1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int\
    \ l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n      \
    \      int j = i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    //\
    \ your code here\n    int n = arr.size();\n    int dp[n][n];\n    for(int i=0;i<n;i++)\n\
    \        dp[i][i] = 0;\n    for(int l=2;l<=n;l++){\n        for(int i=0;i<n-l+1;i++){\n\
    \            int j = i+l-1;\n            if(arr[i] == arr[j])\n              \
    \  dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] = 1 +\
    \ std::min(dp[i+1][j], dp[i][j-1]);\n        }\n    }\n    return dp[0][n-1];",
  "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n  \
    \      dp[i][i] = 0;\n    for(int len = 2; len <= n; len++) {\n        for(int\
    \ i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n         \
    \   if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n     \
    \       else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j -\
    \ 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n;\
    \ i++)\n        dp[i][i] = 1;\n    for (int len = 2; len <= n; len++) {\n    \
    \    for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n\
    \            if (arr[i] == arr[j] && len == 2)\n                dp[i][j] = 2;\n\
    \            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j\
    \ - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j - 1],\
    \ dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "    int n\
    \ = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i]\
    \ = 0;\n    for(int i = 0; i < n - 1; i++)\n        dp[i][i + 1] = arr[i] == arr[i\
    \ + 1] ? 0 : 1;\n    for(int i = n - 3; i >= 0; i--) {\n        for(int j = i\
    \ + 2; j < n; j++) {\n            if(arr[i] == arr[j])\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int\
    \ n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for\
    \ (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    for (int l = 2; l <= n;\
    \ l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n            int j = i\
    \ + l - 1;\n            if (arr[i] == arr[j] && l == 2)\n                dp[i][j]\
    \ = 2;\n            else if (arr[i] == arr[j])\n                dp[i][j] = dp[i\
    \ + 1][j - 1] + 2;\n            else\n                dp[i][j] = std::max(dp[i][j\
    \ - 1], dp[i + 1][j]);\n        }\n    }\n    return n - dp[0][n - 1];", "   \
    \ int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n \
    \       for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n \
    \   }\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n\
    \            if(i >= j) {\n                dp[i][j] = 0;\n            } else {\n\
    \                dp[i][j] = std::min(dp[i][j - 1], dp[i + 1][j]) + 1;\n      \
    \          if(arr[i] == arr[j]) {\n                    dp[i][j] = std::min(dp[i][j],\
    \ dp[i + 1][j - 1]);\n                }\n            }\n        }\n    }\n   \
    \ return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n\
    \        for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i <\
    \ n; i++) {\n        for(int j = 0; j < n; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    for(int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n \
    \   }\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1;\
    \ i++) {\n            int j = i + l - 1;\n            if(arr[i] == arr[j] && l\
    \ == 2) {\n                dp[i][j] = 2;\n            } else if(arr[i] == arr[j])\
    \ {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n\
    \                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n          \
    \  }\n        }\n    }\n    return n - dp[0][n - 1];", "    // your code here\n\
    \    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++)\n    {\n        for(long\
    \ i = 0; i < n - l + 1; i++)\n        {\n            long j = i + l - 1;\n   \
    \         if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = std::min(dp[i + 1][j], dp[i][j -\
    \ 1]) + 1;\n        }\n    }\n    return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    int n = arr.size();\n    int count = 0;\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (arr[i] != arr[j]) {\n         \
    \   count++;\n        }\n        i++;\n        j--;\n    }\n    return count;",
  "    int n = arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++)\n  \
    \      dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n        for(int i = 0;\
    \ i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "    // your code here\n    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n\
    \        {\n            dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n\
    \    {\n        dp[i][i] = 0;\n    }\n    for(int i=0;i<n-1;i++)\n    {\n    \
    \    if(arr[i] == arr[i+1])\n        {\n            dp[i][i+1] = 0;\n        }\n\
    \        else\n        {\n            dp[i][i+1] = 1;\n        }\n    }\n    for(int\
    \ i=2;i<n;i++)\n    {\n        for(int j=0;j<n-i;j++)\n        {\n           \
    \ if(arr[j] == arr[j+i])\n            {\n                dp[j][j+i] = dp[j+1][j+i-1];\n\
    \            }\n            else\n            {\n                dp[j][j+i] =\
    \ 1 + std::min(dp[j+1][j+i],dp[j][j+i-1]);\n            }\n        }\n    }\n\
    \    return dp[0][n-1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int l = 2; l <= n; l++) {\n\
    \        for(int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n\
    \            if(arr[i] == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j\
    \ - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i =\
    \ 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i >=\
    \ j) {\n                dp[i][j] = 0;\n            } else {\n                dp[i][j]\
    \ = std::min(dp[i][j - 1], dp[i + 1][j]) + 1;\n                if(arr[i] == arr[j])\
    \ {\n                    dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1]);\n  \
    \              }\n            }\n        }\n    }\n    return dp[0][n - 1];",
  "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n\
    \        dp[i][i] = 0;\n    for(long l = 2; l <= n; l++) {\n        for(long i\
    \ = 0; i < n - l + 1; i++) {\n            long j = i + l - 1;\n            if(arr[i]\
    \ == arr[j])\n                dp[i][j] = dp[i + 1][j - 1];\n            else\n\
    \                dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n      \
    \  }\n    }\n    return dp[0][n - 1];", "  long n = arr.size();\n  long dp[n][n];\n\
    \  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n; j++) {\n      dp[i][j]\
    \ = 0;\n    }\n  }\n  for (long i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\
    \  for (long i = 0; i < n - 1; i++) {\n    if (arr[i] == arr[i + 1]) {\n     \
    \ dp[i][i + 1] = 1;\n    } else {\n      dp[i][i + 1] = 2;\n    }\n  }\n  for\
    \ (long i = 3; i <= n; i++) {\n    for (long j = 0; j < n - i + 1; j++) {\n  \
    \    long k = j + i - 1;\n      if (arr[j] == arr[k]) {\n        dp[j][k] = dp[j\
    \ + 1][k - 1];\n      } else {\n        dp[j][k] = std::min(dp[j][k - 1], dp[j\
    \ + 1][k]) + 1;\n      }\n    }\n  }\n  return dp[0][n - 1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n\
    \            int j = i + l - 1;\n            if(arr[i] == arr[j])\n          \
    \      dp[i][j] = dp[i + 1][j - 1];\n            else\n                dp[i][j]\
    \ = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n\
    \ - 1];", "    // your code here\n    int n = arr.size();\n    int dp[n][n];\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n  \
    \          dp[i][j] = 0;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n\
    \        dp[i][i] = 0;\n    }\n    for(int l=2;l<=n;l++)\n    {\n        for(int\
    \ i=0;i<n-l+1;i++)\n        {\n            int j = i+l-1;\n            if(arr[i]\
    \ == arr[j])\n            {\n                dp[i][j] = dp[i+1][j-1];\n      \
    \      }\n            else\n            {\n                dp[i][j] = 1 + std::min(dp[i+1][j],dp[i][j-1]);\n\
    \            }\n        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int len = 2; len <= n; len++) {\n        for(int i = 0; i < n - len + 1;\
    \ i++) {\n            int j = i + len - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    // your code here\n    long n = arr.size();\n\
    \    long dp[n][n];\n    for(long i = 0; i < n; i++)\n        dp[i][i] = 0;\n\
    \    for(long i = 0; i < n-1; i++)\n        dp[i][i+1] = arr[i] == arr[i+1] ?\
    \ 0 : 1;\n    for(long i = 2; i < n; i++)\n    {\n        for(long j = 0; j <\
    \ n-i; j++)\n        {\n            if(arr[j] == arr[j+i])\n                dp[j][j+i]\
    \ = dp[j+1][j+i-1];\n            else\n                dp[j][j+i] = std::min(dp[j+1][j+i],\
    \ dp[j][j+i-1]) + 1;\n        }\n    }\n    return dp[0][n-1];", "    int n =\
    \ arr.size();\n    int dp[n][n];\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for(int i = 0; i < n-1;\
    \ i++) {\n        if(arr[i] == arr[i+1]) {\n            dp[i][i+1] = 1;\n    \
    \    } else {\n            dp[i][i+1] = 2;\n        }\n    }\n    for(int i =\
    \ 2; i < n; i++) {\n        for(int j = 0; j < n-i; j++) {\n            if(arr[j]\
    \ == arr[j+i]) {\n                dp[j][j+i] = dp[j+1][j+i-1];\n            }\
    \ else {\n                dp[j][j+i] = std::min(dp[j+1][j+i], dp[j][j+i-1]) +\
    \ 1;\n            }\n        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n\
    \    int dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n  \
    \  for(int len = 2; len <= n; len++) {\n        for(int i = 0; i < n - len + 1;\
    \ i++) {\n            int j = i + len - 1;\n            if(arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1];\n            else\n            \
    \    dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    memset(dp,\
    \ 0, sizeof(dp));\n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n  \
    \  for (int l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++)\
    \ {\n            int j = i + l - 1;\n            if (arr[i] == arr[j] && l ==\
    \ 2)\n                dp[i][j] = 2;\n            else if (arr[i] == arr[j])\n\
    \                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n        \
    \        dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n\
    \    return n - dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n\
    \    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i]\
    \ = 1;\n    }\n    for (int len = 2; len <= n; len++) {\n        for (int i =\
    \ 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if\
    \ (arr[i] == arr[j] && len == 2) {\n                dp[i][j] = 2;\n          \
    \  } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1]\
    \ + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j],\
    \ dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
  "    long n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++) {\n\
    \        for(long j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n\
    \    }\n    for(long l = 2; l <= n; l++) {\n        for(long i = 0; i < n - l\
    \ + 1; i++) {\n            long j = i + l - 1;\n            if(l == 2) {\n   \
    \             dp[i][j] = (arr[i] == arr[j]) ? 0 : 1;\n            } else {\n \
    \               if(arr[i] == arr[j]) {\n                    dp[i][j] = dp[i +\
    \ 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n\
    \    return dp[0][n - 1];", "    int n = arr.size();\n    int dp[n][n];\n    for(int\
    \ i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int i = 0; i < n-1; i++)\n\
    \        dp[i][i+1] = (arr[i] == arr[i+1]) ? 0 : 1;\n    for(int len = 3; len\
    \ <= n; len++) {\n        for(int i = 0; i < n-len+1; i++) {\n            int\
    \ j = i+len-1;\n            if(arr[i] == arr[j])\n                dp[i][j] = dp[i+1][j-1];\n\
    \            else\n                dp[i][j] = 1 + std::min(dp[i+1][j], dp[i][j-1]);\n\
    \        }\n    }\n    return dp[0][n-1];", "    int n = arr.size();\n    int\
    \ dp[n][n];\n    for(int i = 0; i < n; i++)\n        dp[i][i] = 0;\n    for(int\
    \ l = 2; l <= n; l++) {\n        for(int i = 0; i < n - l + 1; i++) {\n      \
    \      int j = i + l - 1;\n            if(arr[i] == arr[j])\n                dp[i][j]\
    \ = dp[i + 1][j - 1];\n            else\n                dp[i][j] = 1 + std::min(dp[i\
    \ + 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[0][n - 1];", "    long\
    \ n = arr.size();\n    long dp[n][n];\n    for(long i = 0; i < n; i++)\n     \
    \   dp[i][i] = 0;\n    for(long i = 0; i < n - 1; i++)\n        dp[i][i + 1] =\
    \ arr[i] == arr[i + 1] ? 0 : 1;\n    for(long i = 3; i <= n; i++)\n        for(long\
    \ j = 0; j < n - i + 1; j++)\n            dp[j][j + i - 1] = arr[j] == arr[j +\
    \ i - 1] ? dp[j + 1][j + i - 2] : 1 + std::min(dp[j + 1][j + i - 1], dp[j][j +\
    \ i - 2]);\n    return dp[0][n - 1];", "  int n = arr.size();\n  int dp[n][n];\n\
    \  for(int i = 0; i < n; i++)\n    dp[i][i] = 0;\n  for(int l = 2; l <= n; l++)\
    \ {\n    for(int i = 0; i < n - l + 1; i++) {\n      int j = i + l - 1;\n    \
    \  if(arr[i] == arr[j])\n        dp[i][j] = dp[i + 1][j - 1];\n      else\n  \
    \      dp[i][j] = 1 + std::min(dp[i + 1][j], dp[i][j - 1]);\n    }\n  }\n  return\
    \ dp[0][n - 1];", "  int n = arr.size();\n  int dp[n][n];\n  for(int i = 0; i\
    \ < n; i++) {\n    for(int j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n\
    \  }\n  for(int i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for(int l = 2;\
    \ l <= n; l++) {\n    for(int i = 0; i < n - l + 1; i++) {\n      int j = i +\
    \ l - 1;\n      if(arr[i] == arr[j] && l == 2) {\n        dp[i][j] = 2;\n    \
    \  } else if(arr[i] == arr[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n \
    \     } else {\n        dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n   \
    \   }\n    }\n  }\n  return n - dp[0][n - 1];", "    long n = arr.size();\n  \
    \  long dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (long i = 0; i < n;\
    \ i++) {\n        dp[i][i] = 1;\n    }\n    for (long l = 2; l <= n; l++) {\n\
    \        for (long i = 0; i < n - l + 1; i++) {\n            long j = i + l -\
    \ 1;\n            if (arr[i] == arr[j] && l == 2) {\n                dp[i][j]\
    \ = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] =\
    \ dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i\
    \ + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n\
    \ - 1];"]
stop_tokens:
- "\n}"
