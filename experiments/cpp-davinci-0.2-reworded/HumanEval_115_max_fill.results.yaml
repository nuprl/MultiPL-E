language: cpp
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum/capacity);\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwztao888.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwztao888.cpp:\
    \ In function 'int main()':\n/tmp/tmpwztao888.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwztao888.cpp:2:\n/tmp/tmpwztao888.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwztao888.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwztao888.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwztao888.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    int n = grid.size();\n  \
    \  int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        int sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9nluyap_.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp9nluyap_.cpp:\
    \ In function 'int main()':\n/tmp/tmp9nluyap_.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9nluyap_.cpp:2:\n/tmp/tmp9nluyap_.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp9nluyap_.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp9nluyap_.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp9nluyap_.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3u_hin9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp_3u_hin9.cpp:\
    \ In function 'int main()':\n/tmp/tmp_3u_hin9.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_3u_hin9.cpp:2:\n/tmp/tmp_3u_hin9.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp_3u_hin9.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp_3u_hin9.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp_3u_hin9.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m,\
    \ 0));\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            if(grid[i][j] == 1) {\n                dp[i][j] = 1;\n      \
    \      }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            if(dp[i][j] == 1) {\n                if(i\
    \ > 0) {\n                    dp[i][j] += dp[i-1][j];\n                }\n   \
    \             if(j > 0) {\n                    dp[i][j] += dp[i][j-1];\n     \
    \           }\n                if(i > 0 && j > 0) {\n                    dp[i][j]\
    \ -= dp[i-1][j-1];\n                }\n            }\n        }\n    }\n    long\
    \ ans = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m;\
    \ j++) {\n            for(long k = i; k < n; k++) {\n                for(long\
    \ l = j; l < m; l++) {\n                    long sum = dp[k][l];\n           \
    \         if(i > 0) {\n                        sum -= dp[i-1][l];\n          \
    \          }\n                    if(j > 0) {\n                        sum -=\
    \ dp[k][j-1];\n                    }\n                    if(i > 0 && j > 0) {\n\
    \                        sum += dp[i-1][j-1];\n                    }\n       \
    \             if(sum <= capacity) {\n                        ans = std::max(ans,\
    \ sum);\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jv4dwlg.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp_jv4dwlg.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmp_jv4dwlg.cpp:28:33: error: '>>' should be '> >' within a nested template\
    \ argument list\n     std::vector<std::vector<long>> dp(n, std::vector<long>(m,\
    \ 0));\n                                 ^\n/tmp/tmp_jv4dwlg.cpp: In function\
    \ 'int main()':\n/tmp/tmp_jv4dwlg.cpp:76:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = max_fill;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_jv4dwlg.cpp:2:\n/tmp/tmp_jv4dwlg.cpp:77:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp_jv4dwlg.cpp:77:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp_jv4dwlg.cpp:77:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (lon"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ku7zt2r.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6ku7zt2r.cpp:\
    \ In function 'int main()':\n/tmp/tmp6ku7zt2r.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ku7zt2r.cpp:2:\n/tmp/tmp6ku7zt2r.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6ku7zt2r.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6ku7zt2r.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6ku7zt2r.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i; k < n; k++) {\n                \
    \    for (long l = j; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            grid[k][l] = 0;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpttoeiyyl.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpttoeiyyl.cpp:\
    \ In function 'int main()':\n/tmp/tmpttoeiyyl.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpttoeiyyl.cpp:2:\n/tmp/tmpttoeiyyl.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpttoeiyyl.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpttoeiyyl.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpttoeiyyl.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ytk92fu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0ytk92fu.cpp:\
    \ In function 'int main()':\n/tmp/tmp0ytk92fu.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ytk92fu.cpp:2:\n/tmp/tmp0ytk92fu.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0ytk92fu.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0ytk92fu.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0ytk92fu.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long row = grid.size();\n    long col = grid[0].size();\n\
    \    long max_fill = 0;\n    for (long i = 0; i < row; i++) {\n        for (long\
    \ j = 0; j < col; j++) {\n            if (grid[i][j] == 1) {\n               \
    \ max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpms1necmx.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpms1necmx.cpp:\
    \ In function 'int main()':\n/tmp/tmpms1necmx.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpms1necmx.cpp:2:\n/tmp/tmpms1necmx.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpms1necmx.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpms1necmx.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpms1necmx.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7w2yomq.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpv7w2yomq.cpp:\
    \ In function 'int main()':\n/tmp/tmpv7w2yomq.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv7w2yomq.cpp:2:\n/tmp/tmpv7w2yomq.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpv7w2yomq.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpv7w2yomq.cpp:37:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpv7w2yomq.cpp:37:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long max_fill = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdr066my3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpdr066my3.cpp:\
    \ In function 'int main()':\n/tmp/tmpdr066my3.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdr066my3.cpp:2:\n/tmp/tmpdr066my3.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpdr066my3.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpdr066my3.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpdr066my3.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i + 1; k < n; k++) {\n            \
    \        if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n   \
    \                 } else {\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm9lqsym7.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpm9lqsym7.cpp:\
    \ In function 'int main()':\n/tmp/tmpm9lqsym7.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm9lqsym7.cpp:2:\n/tmp/tmpm9lqsym7.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpm9lqsym7.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpm9lqsym7.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpm9lqsym7.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans++;\n                grid[i][j] = 0;\n                if(i > 0\
    \ && grid[i-1][j] == 1){\n                    grid[i-1][j] = 0;\n            \
    \    }\n                if(j > 0 && grid[i][j-1] == 1){\n                    grid[i][j-1]\
    \ = 0;\n                }\n                if(i < n-1 && grid[i+1][j] == 1){\n\
    \                    grid[i+1][j] = 0;\n                }\n                if(j\
    \ < m-1 && grid[i][j+1] == 1){\n                    grid[i][j+1] = 0;\n      \
    \          }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58n2_854.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp58n2_854.cpp:\
    \ In function 'int main()':\n/tmp/tmp58n2_854.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp58n2_854.cpp:2:\n/tmp/tmp58n2_854.cpp:53:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp58n2_854.cpp:53:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp58n2_854.cpp:53:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp58n2_854.cpp:53:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long total_water = 0;\n    for (long i = 0; i < rows; i++) {\n        for\
    \ (long j = 0; j < cols; j++) {\n            total_water += grid[i][j];\n    \
    \    }\n    }\n    long water_per_bucket = total_water / capacity;\n    if (total_water\
    \ % capacity != 0) {\n        water_per_bucket++;\n    }\n    return water_per_bucket;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapktxag3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpapktxag3.cpp:\
    \ In function 'int main()':\n/tmp/tmpapktxag3.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpapktxag3.cpp:2:\n/tmp/tmpapktxag3.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpapktxag3.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpapktxag3.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpapktxag3.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0L, capacity - sum);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpby8_n67t.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpby8_n67t.cpp:\
    \ In function 'int main()':\n/tmp/tmpby8_n67t.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpby8_n67t.cpp:2:\n/tmp/tmpby8_n67t.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpby8_n67t.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpby8_n67t.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpby8_n67t.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i0ma3ca.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp5i0ma3ca.cpp:\
    \ In function 'int main()':\n/tmp/tmp5i0ma3ca.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i0ma3ca.cpp:2:\n/tmp/tmp5i0ma3ca.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp5i0ma3ca.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp5i0ma3ca.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp5i0ma3ca.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans++;\n\
    \                long cur = capacity;\n                for (long k = i; k < n\
    \ && cur > 0; k++) {\n                    for (long l = j; l < m && cur > 0; l++)\
    \ {\n                        if (grid[k][l] == 1) {\n                        \
    \    grid[k][l] = 0;\n                            cur--;\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposuel5gz.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmposuel5gz.cpp:\
    \ In function 'int main()':\n/tmp/tmposuel5gz.cpp:47:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmposuel5gz.cpp:2:\n/tmp/tmposuel5gz.cpp:48:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmposuel5gz.cpp:48:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmposuel5gz.cpp:48:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmposuel5gz.cpp:48:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto cell : row) {\n            if (cell == 1) {\n             \
    \   max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw90tmm6l.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpw90tmm6l.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmpw90tmm6l.cpp:26:15: error: 'row' does not name a type\n     for (auto\
    \ row : grid) {\n               ^\n/tmp/tmpw90tmm6l.cpp:33:5: error: expected\
    \ ';' before 'return'\n     return max_fill;\n     ^\n/tmp/tmpw90tmm6l.cpp:33:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpw90tmm6l.cpp:33:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpw90tmm6l.cpp:33:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpw90tmm6l.cpp:33:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpw90tmm6l.cpp: In function 'int main()':\n/tmp/tmpw90tmm6l.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = max_fill;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw90tmm6l.cpp:2:\n/tmp/tmpw90tmm6l.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpw90tmm6l.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum %\
    \ capacity != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5x4o71g.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpg5x4o71g.cpp:\
    \ In function 'int main()':\n/tmp/tmpg5x4o71g.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg5x4o71g.cpp:2:\n/tmp/tmpg5x4o71g.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpg5x4o71g.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpg5x4o71g.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpg5x4o71g.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzm4e1nb.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpuzm4e1nb.cpp:\
    \ In function 'int main()':\n/tmp/tmpuzm4e1nb.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzm4e1nb.cpp:2:\n/tmp/tmpuzm4e1nb.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpuzm4e1nb.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpuzm4e1nb.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpuzm4e1nb.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long rows = grid.size();\n\
    \    long cols = grid[0].size();\n    long count = 0;\n    for(long i = 0; i <\
    \ rows; i++){\n        for(long j = 0; j < cols; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i+1 < rows && grid[i+1][j] == 1){\n                    grid[i+1][j]\
    \ = 0;\n                }\n                if(j+1 < cols && grid[i][j+1] == 1){\n\
    \                    grid[i][j+1] = 0;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dekxctw.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp4dekxctw.cpp:\
    \ In function 'int main()':\n/tmp/tmp4dekxctw.cpp:46:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4dekxctw.cpp:2:\n/tmp/tmp4dekxctw.cpp:47:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp4dekxctw.cpp:47:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp4dekxctw.cpp:47:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp4dekxctw.cpp:47:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3u_hin9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp_3u_hin9.cpp:\
    \ In function 'int main()':\n/tmp/tmp_3u_hin9.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_3u_hin9.cpp:2:\n/tmp/tmp_3u_hin9.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp_3u_hin9.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp_3u_hin9.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp_3u_hin9.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n    }\n    return\
    \ count/capacity;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyw6_vi_o.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpyw6_vi_o.cpp:\
    \ In function 'int main()':\n/tmp/tmpyw6_vi_o.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyw6_vi_o.cpp:2:\n/tmp/tmpyw6_vi_o.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpyw6_vi_o.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpyw6_vi_o.cpp:37:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpyw6_vi_o.cpp:37:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long total = 0;\n    for (int i = 0; i < grid.size();\
    \ i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                total += capacity;\n            }\n        }\n    }\n\
    \    return total;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw6ng1qt.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpuw6ng1qt.cpp:\
    \ In function 'int main()':\n/tmp/tmpuw6ng1qt.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuw6ng1qt.cpp:2:\n/tmp/tmpuw6ng1qt.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpuw6ng1qt.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpuw6ng1qt.cpp:37:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpuw6ng1qt.cpp:37:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill_count = 0;\n    for (long i = 0; i\
    \ < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n\
    \            if (grid[i][j] == 1) {\n                max_fill_count++;\n     \
    \           if (capacity > 1) {\n                    for (long k = i + 1; k <\
    \ grid.size(); k++) {\n                        if (grid[k][j] == 1) {\n      \
    \                      max_fill_count++;\n                            capacity--;\n\
    \                        }\n                        else {\n                 \
    \           break;\n                        }\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return max_fill_count;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmggayhpi.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmggayhpi.cpp:\
    \ In function 'int main()':\n/tmp/tmpmggayhpi.cpp:47:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmggayhpi.cpp:2:\n/tmp/tmpmggayhpi.cpp:48:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmggayhpi.cpp:48:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmggayhpi.cpp:48:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmggayhpi.cpp:48:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n\t// Your code here\n\tlong n = grid.size();\n\tlong\
    \ m = grid[0].size();\n\tlong ans = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\t\
    long sum = 0;\n\t\tfor (long j = 0; j < m; j++) {\n\t\t\tsum += grid[i][j];\n\t\
    \t}\n\t\tans += (sum / capacity);\n\t\tif (sum % capacity != 0) {\n\t\t\tans++;\n\
    \t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = max_fill;\n \
    \   assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0_bhnl47.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0_bhnl47.cpp:\
    \ In function 'int main()':\n/tmp/tmp0_bhnl47.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0_bhnl47.cpp:2:\n/tmp/tmp0_bhnl47.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0_bhnl47.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0_bhnl47.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0_bhnl47.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum/capacity);\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfojg6wdo.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpfojg6wdo.cpp:\
    \ In function 'int main()':\n/tmp/tmpfojg6wdo.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfojg6wdo.cpp:2:\n/tmp/tmpfojg6wdo.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpfojg6wdo.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpfojg6wdo.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpfojg6wdo.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                grid[i][j] = 0;\n                if (i + 1 < rows\
    \ && grid[i + 1][j] == 1) {\n                    grid[i + 1][j] = 0;\n       \
    \         }\n                if (j + 1 < cols && grid[i][j + 1] == 1) {\n    \
    \                grid[i][j + 1] = 0;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm97r1mm.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpzm97r1mm.cpp:\
    \ In function 'int main()':\n/tmp/tmpzm97r1mm.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzm97r1mm.cpp:2:\n/tmp/tmpzm97r1mm.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpzm97r1mm.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpzm97r1mm.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpzm97r1mm.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long max_fill = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ul5fjf9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp2ul5fjf9.cpp:\
    \ In function 'int main()':\n/tmp/tmp2ul5fjf9.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ul5fjf9.cpp:2:\n/tmp/tmp2ul5fjf9.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp2ul5fjf9.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp2ul5fjf9.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp2ul5fjf9.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = 0; k < n; k++) {\n                \
    \    for (long l = 0; l < m; l++) {\n                        if (grid[k][l] ==\
    \ 1) {\n                            ans += std::abs(i - k) + std::abs(j - l);\n\
    \                        }\n                    }\n                }\n       \
    \         return ans;\n            }\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0fs4x6_.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpz0fs4x6_.cpp:\
    \ In function 'int main()':\n/tmp/tmpz0fs4x6_.cpp:46:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz0fs4x6_.cpp:2:\n/tmp/tmpz0fs4x6_.cpp:47:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpz0fs4x6_.cpp:47:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpz0fs4x6_.cpp:47:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpz0fs4x6_.cpp:47:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                if (i > 0) {\n                    grid[i-1][j] =\
    \ 1;\n                }\n                if (j > 0) {\n                    grid[i][j-1]\
    \ = 1;\n                }\n                if (i < rows-1) {\n               \
    \     grid[i+1][j] = 1;\n                }\n                if (j < cols-1) {\n\
    \                    grid[i][j+1] = 1;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvzk5jnl_.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpvzk5jnl_.cpp:\
    \ In function 'int main()':\n/tmp/tmpvzk5jnl_.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvzk5jnl_.cpp:2:\n/tmp/tmpvzk5jnl_.cpp:51:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpvzk5jnl_.cpp:51:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpvzk5jnl_.cpp:51:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpvzk5jnl_.cpp:51:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                if (i > 0) {\n                    ans -= std::min(capacity,\
    \ grid[i - 1][j]);\n                }\n                if (j > 0) {\n        \
    \            ans -= std::min(capacity, grid[i][j - 1]);\n                }\n \
    \           }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5twx0g5.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmps5twx0g5.cpp:\
    \ In function 'int main()':\n/tmp/tmps5twx0g5.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5twx0g5.cpp:2:\n/tmp/tmps5twx0g5.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmps5twx0g5.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmps5twx0g5.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmps5twx0g5.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i + 1; k < n; k++) {\n            \
    \        if (grid[k][j] == 1) {\n                        ans--;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddts0myt.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpddts0myt.cpp:\
    \ In function 'int main()':\n/tmp/tmpddts0myt.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpddts0myt.cpp:2:\n/tmp/tmpddts0myt.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpddts0myt.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpddts0myt.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpddts0myt.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long row_fill = 0;\n        for (auto well : row) {\n            if (well\
    \ == 1) {\n                row_fill += capacity;\n            }\n        }\n \
    \       max_fill = std::max(max_fill, row_fill);\n    }\n    return max_fill;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovk49k9j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpovk49k9j.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmpovk49k9j.cpp:26:15: error: 'row' does not name a type\n     for (auto\
    \ row : grid) {\n               ^\n/tmp/tmpovk49k9j.cpp:35:5: error: expected\
    \ ';' before 'return'\n     return max_fill;\n     ^\n/tmp/tmpovk49k9j.cpp:35:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpovk49k9j.cpp:35:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpovk49k9j.cpp:35:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpovk49k9j.cpp:35:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpovk49k9j.cpp: In function 'int main()':\n/tmp/tmpovk49k9j.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = max_fill;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpovk49k9j.cpp:2:\n/tmp/tmpovk49k9j.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpovk49k9j.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        if (sum > 0) {\n            ans += sum / capacity;\n         \
    \   if (sum % capacity > 0) {\n                ans++;\n            }\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx0oer58.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprx0oer58.cpp:\
    \ In function 'int main()':\n/tmp/tmprx0oer58.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprx0oer58.cpp:2:\n/tmp/tmprx0oer58.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprx0oer58.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprx0oer58.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprx0oer58.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code goes here\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum %\
    \ capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57n4ep6d.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp57n4ep6d.cpp:\
    \ In function 'int main()':\n/tmp/tmp57n4ep6d.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57n4ep6d.cpp:2:\n/tmp/tmp57n4ep6d.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp57n4ep6d.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp57n4ep6d.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp57n4ep6d.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long result = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                result += capacity;\n     \
    \       }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcq1vlari.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpcq1vlari.cpp:\
    \ In function 'int main()':\n/tmp/tmpcq1vlari.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcq1vlari.cpp:2:\n/tmp/tmpcq1vlari.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpcq1vlari.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpcq1vlari.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpcq1vlari.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyabpetou.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpyabpetou.cpp:\
    \ In function 'int main()':\n/tmp/tmpyabpetou.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyabpetou.cpp:2:\n/tmp/tmpyabpetou.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpyabpetou.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpyabpetou.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpyabpetou.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, capacity - sum);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmx776gj3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmx776gj3.cpp:\
    \ In function 'int main()':\n/tmp/tmpmx776gj3.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmx776gj3.cpp:2:\n/tmp/tmpmx776gj3.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmx776gj3.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmx776gj3.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmx776gj3.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        if(sum > 0){\n            count += sum/capacity;\n\
    \            if(sum%capacity != 0){\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4v4ww9hr.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp4v4ww9hr.cpp:\
    \ In function 'int main()':\n/tmp/tmp4v4ww9hr.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4v4ww9hr.cpp:2:\n/tmp/tmp4v4ww9hr.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp4v4ww9hr.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp4v4ww9hr.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp4v4ww9hr.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, (sum - capacity));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwmakfyw.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpfwmakfyw.cpp:\
    \ In function 'int main()':\n/tmp/tmpfwmakfyw.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfwmakfyw.cpp:2:\n/tmp/tmpfwmakfyw.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpfwmakfyw.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpfwmakfyw.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpfwmakfyw.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ 1;\n                grid[i][j] = 0;\n                std::queue<std::pair<long,\
    \ long>> q;\n                q.push({i, j});\n                while (!q.empty())\
    \ {\n                    auto [x, y] = q.front();\n                    q.pop();\n\
    \                    if (x > 0 && grid[x - 1][y] == 1) {\n                   \
    \     grid[x - 1][y] = 0;\n                        q.push({x - 1, y});\n     \
    \               }\n                    if (x < n - 1 && grid[x + 1][y] == 1) {\n\
    \                        grid[x + 1][y] = 0;\n                        q.push({x\
    \ + 1, y});\n                    }\n                    if (y > 0 && grid[x][y\
    \ - 1] == 1) {\n                        grid[x][y - 1] = 0;\n                \
    \        q.push({x, y - 1});\n                    }\n                    if (y\
    \ < m - 1 && grid[x][y + 1] == 1) {\n                        grid[x][y + 1] =\
    \ 0;\n                        q.push({x, y + 1});\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzaf5giz1.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpzaf5giz1.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmpzaf5giz1.cpp:33:48: error: '>>' should be '> >' within a nested template\
    \ argument list\n                 std::queue<std::pair<long, long>> q;\n     \
    \                                           ^\n/tmp/tmpzaf5giz1.cpp:34:23: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n                 q.push({i, j});\n                       ^\n/tmp/tmpzaf5giz1.cpp:34:30:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n                 q.push({i, j});\n                   \
    \           ^\n/tmp/tmpzaf5giz1.cpp:36:26: error: expected unqualified-id before\
    \ '[' token\n                     auto [x, y] = q.front();\n                 \
    \         ^\n/tmp/tmpzaf5giz1.cpp:38:25: error: 'x' was not declared in this scope\n\
    \                     if (x > 0 && grid[x - 1][y] == 1) {\n                  \
    \       ^\n/tmp/tmpzaf5giz1.cpp:38:46: error: 'y' was not declared in this scope\n\
    \                     if (x > 0 && grid[x - 1][y] == 1) {\n                  \
    \                            ^\n/tmp/tmpzaf5giz1.cpp:40:31: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n                         q.push({x - 1, y});\n                   \
    \            ^\n/tmp/tmpzaf5giz1.cpp:40:42: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n      \
    \                   q.push({x - 1, y});\n                                    \
    \      ^\n/tmp/tmpzaf5giz1.cpp:40:42: error: no matching function for call to\
    \ 'std::queue<std::pair<long int, long int> >::push(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzaf5giz1.cpp:40:42: note: candidate is:\nIn file included from\
    \ /usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzm4e1nb.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpuzm4e1nb.cpp:\
    \ In function 'int main()':\n/tmp/tmpuzm4e1nb.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzm4e1nb.cpp:2:\n/tmp/tmpuzm4e1nb.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpuzm4e1nb.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpuzm4e1nb.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpuzm4e1nb.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum % capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2t3t03lu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp2t3t03lu.cpp:\
    \ In function 'int main()':\n/tmp/tmp2t3t03lu.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2t3t03lu.cpp:2:\n/tmp/tmp2t3t03lu.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp2t3t03lu.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp2t3t03lu.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp2t3t03lu.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                grid[i][j] = 0;\n                long k = i + 1;\n\
    \                while (k < rows && capacity > 0) {\n                    if (grid[k][j]\
    \ == 1) {\n                        grid[k][j] = 0;\n                        capacity--;\n\
    \                    }\n                    k++;\n                }\n        \
    \        k = i - 1;\n                while (k >= 0 && capacity > 0) {\n      \
    \              if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n\
    \                        capacity--;\n                    }\n                \
    \    k--;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjtjr4lmp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpjtjr4lmp.cpp:\
    \ In function 'int main()':\n/tmp/tmpjtjr4lmp.cpp:55:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjtjr4lmp.cpp:2:\n/tmp/tmpjtjr4lmp.cpp:56:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpjtjr4lmp.cpp:56:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpjtjr4lmp.cpp:56:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpjtjr4lmp.cpp:56:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    int n = grid.size();\n  \
    \  int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        int sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum % capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpievoc9hj.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpievoc9hj.cpp:\
    \ In function 'int main()':\n/tmp/tmpievoc9hj.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpievoc9hj.cpp:2:\n/tmp/tmpievoc9hj.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpievoc9hj.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpievoc9hj.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpievoc9hj.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyabpetou.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpyabpetou.cpp:\
    \ In function 'int main()':\n/tmp/tmpyabpetou.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyabpetou.cpp:2:\n/tmp/tmpyabpetou.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpyabpetou.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpyabpetou.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpyabpetou.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum/capacity);\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfojg6wdo.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpfojg6wdo.cpp:\
    \ In function 'int main()':\n/tmp/tmpfojg6wdo.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfojg6wdo.cpp:2:\n/tmp/tmpfojg6wdo.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpfojg6wdo.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpfojg6wdo.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpfojg6wdo.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35wojbxm.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp35wojbxm.cpp:\
    \ In function 'int main()':\n/tmp/tmp35wojbxm.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp35wojbxm.cpp:2:\n/tmp/tmp35wojbxm.cpp:30:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp35wojbxm.cpp:30:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp35wojbxm.cpp:30:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp35wojbxm.cpp:30:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    int n = grid.size();\n  \
    \  int m = grid[0].size();\n    int ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp480lit0a.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp480lit0a.cpp:\
    \ In function 'int main()':\n/tmp/tmp480lit0a.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp480lit0a.cpp:2:\n/tmp/tmp480lit0a.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp480lit0a.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp480lit0a.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp480lit0a.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans += capacity;\n\
    \                if (i > 0) {\n                    ans -= std::min(capacity, grid[i\
    \ - 1][j]);\n                }\n                if (j > 0) {\n               \
    \     ans -= std::min(capacity, grid[i][j - 1]);\n                }\n        \
    \    }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmqng6iqb.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmqng6iqb.cpp:\
    \ In function 'int main()':\n/tmp/tmpmqng6iqb.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmqng6iqb.cpp:2:\n/tmp/tmpmqng6iqb.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmqng6iqb.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmqng6iqb.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmqng6iqb.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long ans = 0;\n    for(int i = 0; i < grid.size();\
    \ i++) {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                for(int k = i - 1;\
    \ k >= 0; k--) {\n                    if(grid[k][j] == 1) {\n                \
    \        ans -= capacity;\n                        break;\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoewl_7yh.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpoewl_7yh.cpp:\
    \ In function 'int main()':\n/tmp/tmpoewl_7yh.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoewl_7yh.cpp:2:\n/tmp/tmpoewl_7yh.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpoewl_7yh.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpoewl_7yh.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpoewl_7yh.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        if(sum == 0) continue;\n        if(sum <=\
    \ capacity){\n            ans += sum;\n        }else{\n            ans += capacity;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjbsqz92.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmjbsqz92.cpp:\
    \ In function 'int main()':\n/tmp/tmpmjbsqz92.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmjbsqz92.cpp:2:\n/tmp/tmpmjbsqz92.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmjbsqz92.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmjbsqz92.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmjbsqz92.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuzm4e1nb.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpuzm4e1nb.cpp:\
    \ In function 'int main()':\n/tmp/tmpuzm4e1nb.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuzm4e1nb.cpp:2:\n/tmp/tmpuzm4e1nb.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpuzm4e1nb.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpuzm4e1nb.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpuzm4e1nb.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            if(i == 0){\n                    ans += capacity;\n             \
    \   }\n                else{\n                    long temp = capacity;\n    \
    \                for(long k = i - 1; k >= 0; k--){\n                        if(grid[k][j]\
    \ == 1){\n                            temp--;\n                        }\n   \
    \                     else{\n                            break;\n            \
    \            }\n                    }\n                    ans += temp;\n    \
    \            }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbotff7e.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpdbotff7e.cpp:\
    \ In function 'int main()':\n/tmp/tmpdbotff7e.cpp:53:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdbotff7e.cpp:2:\n/tmp/tmpdbotff7e.cpp:54:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpdbotff7e.cpp:54:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpdbotff7e.cpp:54:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpdbotff7e.cpp:54:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        if(sum > 0){\n            if(sum <= capacity){\n\
    \                ans += 1;\n            }\n            else{\n               \
    \ ans += (sum / capacity);\n                if(sum % capacity != 0){\n       \
    \             ans += 1;\n                }\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznqpfror.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpznqpfror.cpp:\
    \ In function 'int main()':\n/tmp/tmpznqpfror.cpp:49:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpznqpfror.cpp:2:\n/tmp/tmpznqpfror.cpp:50:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpznqpfror.cpp:50:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpznqpfror.cpp:50:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpznqpfror.cpp:50:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxpo5tnt.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpaxpo5tnt.cpp:\
    \ In function 'int main()':\n/tmp/tmpaxpo5tnt.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxpo5tnt.cpp:2:\n/tmp/tmpaxpo5tnt.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpaxpo5tnt.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpaxpo5tnt.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpaxpo5tnt.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (int i = 0; i < grid.size();\
    \ i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8dqy673.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpd8dqy673.cpp:\
    \ In function 'int main()':\n/tmp/tmpd8dqy673.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd8dqy673.cpp:2:\n/tmp/tmpd8dqy673.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpd8dqy673.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpd8dqy673.cpp:37:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpd8dqy673.cpp:37:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count=0;\n    for(int\
    \ i=0;i<grid.size();i++){\n        for(int j=0;j<grid[i].size();j++){\n      \
    \      if(grid[i][j]==1){\n                count++;\n            }\n        }\n\
    \    }\n    return count/capacity;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprr7vqr7t.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprr7vqr7t.cpp:\
    \ In function 'int main()':\n/tmp/tmprr7vqr7t.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprr7vqr7t.cpp:2:\n/tmp/tmprr7vqr7t.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprr7vqr7t.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprr7vqr7t.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprr7vqr7t.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    int n = grid.size();\n  \
    \  int m = grid[0].size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           count++;\n            }\n        }\n    }\n    return count * capacity;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_tfhybe.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp1_tfhybe.cpp:\
    \ In function 'int main()':\n/tmp/tmp1_tfhybe.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1_tfhybe.cpp:2:\n/tmp/tmp1_tfhybe.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp1_tfhybe.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp1_tfhybe.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp1_tfhybe.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ytk92fu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0ytk92fu.cpp:\
    \ In function 'int main()':\n/tmp/tmp0ytk92fu.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ytk92fu.cpp:2:\n/tmp/tmp0ytk92fu.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0ytk92fu.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0ytk92fu.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0ytk92fu.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i0ma3ca.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp5i0ma3ca.cpp:\
    \ In function 'int main()':\n/tmp/tmp5i0ma3ca.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i0ma3ca.cpp:2:\n/tmp/tmp5i0ma3ca.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp5i0ma3ca.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp5i0ma3ca.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp5i0ma3ca.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for (auto row : grid) {\n\
    \        long count = 0;\n        for (auto cell : row) {\n            if (cell\
    \ == 1) {\n                count++;\n            }\n        }\n        result\
    \ += count / capacity;\n        if (count % capacity != 0) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpua0midkw.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpua0midkw.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmpua0midkw.cpp:26:15: error: 'row' does not name a type\n     for (auto\
    \ row : grid) {\n               ^\n/tmp/tmpua0midkw.cpp:38:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpua0midkw.cpp:38:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpua0midkw.cpp:38:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpua0midkw.cpp:38:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpua0midkw.cpp:38:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpua0midkw.cpp: In function 'int main()':\n/tmp/tmpua0midkw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = max_fill;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpua0midkw.cpp:2:\n/tmp/tmpua0midkw.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpua0midkw.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i0ma3ca.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp5i0ma3ca.cpp:\
    \ In function 'int main()':\n/tmp/tmp5i0ma3ca.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i0ma3ca.cpp:2:\n/tmp/tmp5i0ma3ca.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp5i0ma3ca.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp5i0ma3ca.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp5i0ma3ca.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count += capacity;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh6cy109.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprh6cy109.cpp:\
    \ In function 'int main()':\n/tmp/tmprh6cy109.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprh6cy109.cpp:2:\n/tmp/tmprh6cy109.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprh6cy109.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprh6cy109.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprh6cy109.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i0ma3ca.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp5i0ma3ca.cpp:\
    \ In function 'int main()':\n/tmp/tmp5i0ma3ca.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i0ma3ca.cpp:2:\n/tmp/tmp5i0ma3ca.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp5i0ma3ca.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp5i0ma3ca.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp5i0ma3ca.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ytk92fu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0ytk92fu.cpp:\
    \ In function 'int main()':\n/tmp/tmp0ytk92fu.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ytk92fu.cpp:2:\n/tmp/tmp0ytk92fu.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0ytk92fu.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0ytk92fu.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0ytk92fu.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long ans = 0;\n    for(int i = 0; i < grid.size();\
    \ i++) {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                for(int k = i; k\
    \ >= 0; k--) {\n                    if(grid[k][j] == 1) {\n                  \
    \      grid[k][j] = 0;\n                    } else {\n                       \
    \ break;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapjjwutx.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpapjjwutx.cpp:\
    \ In function 'int main()':\n/tmp/tmpapjjwutx.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpapjjwutx.cpp:2:\n/tmp/tmpapjjwutx.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpapjjwutx.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpapjjwutx.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpapjjwutx.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    int n = grid.size();\n    int m = grid[0].size();\n\
    \    int ans = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j\
    \ < m; j++) {\n            if(grid[i][j] == 1) {\n                ans += capacity;\n\
    \                for(int k = i; k < n; k++) {\n                    for(int l =\
    \ j; l < m; l++) {\n                        if(grid[k][l] == 1) {\n          \
    \                  grid[k][l] = 0;\n                        }\n              \
    \      }\n                }\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccvz37c2.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpccvz37c2.cpp:\
    \ In function 'int main()':\n/tmp/tmpccvz37c2.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpccvz37c2.cpp:2:\n/tmp/tmpccvz37c2.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpccvz37c2.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpccvz37c2.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpccvz37c2.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans += capacity;\n\
    \                for (int k = i; k < n; k++) {\n                    if (grid[k][j]\
    \ == 1) {\n                        grid[k][j] = 0;\n                    } else\
    \ {\n                        break;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9iusjo2.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpz9iusjo2.cpp:\
    \ In function 'int main()':\n/tmp/tmpz9iusjo2.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz9iusjo2.cpp:2:\n/tmp/tmpz9iusjo2.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpz9iusjo2.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpz9iusjo2.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpz9iusjo2.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35wojbxm.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp35wojbxm.cpp:\
    \ In function 'int main()':\n/tmp/tmp35wojbxm.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp35wojbxm.cpp:2:\n/tmp/tmp35wojbxm.cpp:30:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp35wojbxm.cpp:30:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp35wojbxm.cpp:30:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp35wojbxm.cpp:30:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3u_hin9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp_3u_hin9.cpp:\
    \ In function 'int main()':\n/tmp/tmp_3u_hin9.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_3u_hin9.cpp:2:\n/tmp/tmp_3u_hin9.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp_3u_hin9.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp_3u_hin9.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp_3u_hin9.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, sum - capacity);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxj_1wzqo.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpxj_1wzqo.cpp:\
    \ In function 'int main()':\n/tmp/tmpxj_1wzqo.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxj_1wzqo.cpp:2:\n/tmp/tmpxj_1wzqo.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpxj_1wzqo.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpxj_1wzqo.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpxj_1wzqo.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            if (well\
    \ == 1) {\n                fill++;\n            } else {\n                max_fill\
    \ += fill / capacity;\n                fill = 0;\n            }\n        }\n \
    \       max_fill += fill / capacity;\n    }\n    return max_fill;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxlfmj2e.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmptxlfmj2e.cpp:\
    \ In function 'long int max_fill(std::vector<std::vector<long int> >, long int)':\n\
    /tmp/tmptxlfmj2e.cpp:26:15: error: 'row' does not name a type\n     for (auto\
    \ row : grid) {\n               ^\n/tmp/tmptxlfmj2e.cpp:38:5: error: expected\
    \ ';' before 'return'\n     return max_fill;\n     ^\n/tmp/tmptxlfmj2e.cpp:38:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmptxlfmj2e.cpp:38:5:\
    \ error: expected ';' before 'return'\n/tmp/tmptxlfmj2e.cpp:38:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmptxlfmj2e.cpp:38:5: error: expected\
    \ ')' before 'return'\n/tmp/tmptxlfmj2e.cpp: In function 'int main()':\n/tmp/tmptxlfmj2e.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = max_fill;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxlfmj2e.cpp:2:\n/tmp/tmptxlfmj2e.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmptxlfmj2e.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsr2d3vxr.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpsr2d3vxr.cpp:\
    \ In function 'int main()':\n/tmp/tmpsr2d3vxr.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsr2d3vxr.cpp:2:\n/tmp/tmpsr2d3vxr.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpsr2d3vxr.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpsr2d3vxr.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpsr2d3vxr.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfn2p3mg.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpgfn2p3mg.cpp:\
    \ In function 'int main()':\n/tmp/tmpgfn2p3mg.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgfn2p3mg.cpp:2:\n/tmp/tmpgfn2p3mg.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpgfn2p3mg.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpgfn2p3mg.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpgfn2p3mg.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt\
    \ / capacity);\n        if(cnt % capacity != 0){\n            ans++;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36uuadtz.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp36uuadtz.cpp:\
    \ In function 'int main()':\n/tmp/tmp36uuadtz.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp36uuadtz.cpp:2:\n/tmp/tmp36uuadtz.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp36uuadtz.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp36uuadtz.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp36uuadtz.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt\
    \ / capacity;\n        if(cnt % capacity != 0){\n            ans++;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkbscgc9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpvkbscgc9.cpp:\
    \ In function 'int main()':\n/tmp/tmpvkbscgc9.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvkbscgc9.cpp:2:\n/tmp/tmpvkbscgc9.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpvkbscgc9.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpvkbscgc9.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpvkbscgc9.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += sum / capacity;\n        if(sum %\
    \ capacity != 0) ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5x4o71g.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpg5x4o71g.cpp:\
    \ In function 'int main()':\n/tmp/tmpg5x4o71g.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg5x4o71g.cpp:2:\n/tmp/tmpg5x4o71g.cpp:41:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpg5x4o71g.cpp:41:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpg5x4o71g.cpp:41:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpg5x4o71g.cpp:41:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity) {\n    \
    \        ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt/capacity);\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ku7zt2r.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6ku7zt2r.cpp:\
    \ In function 'int main()':\n/tmp/tmp6ku7zt2r.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ku7zt2r.cpp:2:\n/tmp/tmp6ku7zt2r.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6ku7zt2r.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6ku7zt2r.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6ku7zt2r.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0L, capacity - sum);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpby8_n67t.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpby8_n67t.cpp:\
    \ In function 'int main()':\n/tmp/tmpby8_n67t.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpby8_n67t.cpp:2:\n/tmp/tmpby8_n67t.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpby8_n67t.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpby8_n67t.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpby8_n67t.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count += capacity;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh6cy109.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprh6cy109.cpp:\
    \ In function 'int main()':\n/tmp/tmprh6cy109.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprh6cy109.cpp:2:\n/tmp/tmprh6cy109.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprh6cy109.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprh6cy109.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprh6cy109.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long count = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        ans += count/capacity;\n\
    \        if(count%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    long\
    \ row = grid.size();\n    long col = grid[0].size();\n    for(long i = 0; i <\
    \ row; i++){\n        for(long j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n                if(i-1 >= 0){\n\
    \                    grid[i-1][j] = 1;\n                }\n                if(i+1\
    \ < row){\n                    grid[i+1][j] = 1;\n                }\n        \
    \        if(j-1 >= 0){\n                    grid[i][j-1] = 1;\n              \
    \  }\n                if(j+1 < col){\n                    grid[i][j+1] = 1;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpvo76wcg_: /tmp/tmpvo76wcg_.cpp:52: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7w2yomq.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpv7w2yomq.cpp:\
    \ In function 'int main()':\n/tmp/tmpv7w2yomq.cpp:36:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv7w2yomq.cpp:2:\n/tmp/tmpv7w2yomq.cpp:37:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpv7w2yomq.cpp:37:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpv7w2yomq.cpp:37:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpv7w2yomq.cpp:37:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long ans = 0;\n    for(int i = 0; i < grid.size();\
    \ i++) {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                for(int k = i + 1;\
    \ k < grid.size(); k++) {\n                    if(grid[k][j] == 1) {\n       \
    \                 ans--;\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp8fk6dmfz: /tmp/tmp8fk6dmfz.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt\
    \ / capacity);\n        if(cnt % capacity != 0){\n            ans++;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    // return 0;\n    long n\
    \ = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    for(long\
    \ i = 0; i < n; i++){\n        long cnt = 0;\n        for(long j = 0; j < m; j++){\n\
    \            if(grid[i][j] == 1){\n                cnt++;\n            }\n   \
    \     }\n        ans += (cnt/capacity);\n        if(cnt%capacity != 0){\n    \
    \        ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ytk92fu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0ytk92fu.cpp:\
    \ In function 'int main()':\n/tmp/tmp0ytk92fu.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ytk92fu.cpp:2:\n/tmp/tmp0ytk92fu.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0ytk92fu.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0ytk92fu.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0ytk92fu.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                grid[i][j] = 0;\n                if (i - 1 >= 0 &&\
    \ grid[i - 1][j] == 1) {\n                    grid[i - 1][j] = 0;\n          \
    \      }\n                if (i + 1 < rows && grid[i + 1][j] == 1) {\n       \
    \             grid[i + 1][j] = 0;\n                }\n                if (j -\
    \ 1 >= 0 && grid[i][j - 1] == 1) {\n                    grid[i][j - 1] = 0;\n\
    \                }\n                if (j + 1 < cols && grid[i][j + 1] == 1) {\n\
    \                    grid[i][j + 1] = 0;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp3ud3dmtw: /tmp/tmp3ud3dmtw.cpp:52: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt/capacity);\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long ans = 0;\n    for(long i = 0; i < rows; i++) {\n        for(long j =\
    \ 0; j < cols; j++) {\n            if(grid[i][j] == 1) {\n                ans\
    \ += capacity;\n                if(i > 0) {\n                    ans -= std::min(capacity,\
    \ grid[i-1][j]);\n                }\n                if(j > 0) {\n           \
    \         ans -= std::min(capacity, grid[i][j-1]);\n                }\n      \
    \      }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp_rb37uyp: /tmp/tmp_rb37uyp.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long ans = 0;\n    for(int i = 0; i < grid.size();\
    \ i++) {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                if(i-1 >= 0) {\n\
    \                    ans -= capacity - grid[i-1][j];\n                }\n    \
    \            if(j-1 >= 0) {\n                    ans -= capacity - grid[i][j-1];\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpo13fvfcz: /tmp/tmpo13fvfcz.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            if (well\
    \ == 1) {\n                fill++;\n            } else {\n                if (fill\
    \ > 0) {\n                    max_fill += fill / capacity;\n                 \
    \   fill = 0;\n                }\n            }\n        }\n        if (fill >\
    \ 0) {\n            max_fill += fill / capacity;\n        }\n    }\n    return\
    \ max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp3qfspnoz: /tmp/tmp3qfspnoz.cpp:47: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i > 0 && grid[i-1][j] == 1){\n                    grid[i-1][j] = 0;\n\
    \                }\n                if(j > 0 && grid[i][j-1] == 1){\n        \
    \            grid[i][j-1] = 0;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n \
    \   assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpgubv2n7i: /tmp/tmpgubv2n7i.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    long i = 0;\n    while(i\
    \ < n) {\n        long j = 0;\n        while(j < m) {\n            if(grid[i][j]\
    \ == 1) {\n                grid[i][j] = 0;\n                ans++;\n         \
    \       for(long k = i; k < i + capacity && k < n; k++) {\n                  \
    \  for(long l = j; l < j + capacity && l < m; l++) {\n                       \
    \ grid[k][l] = 0;\n                    }\n                }\n            }\n \
    \           j++;\n        }\n        i++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp45877axj: /tmp/tmp45877axj.cpp:51: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity + (count%capacity != 0);\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpquk2ne8q: /tmp/tmpquk2ne8q.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,
    (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,
    (long)1, (long)1})})), (9)) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count / capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsr2d3vxr.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpsr2d3vxr.cpp:\
    \ In function 'int main()':\n/tmp/tmpsr2d3vxr.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsr2d3vxr.cpp:2:\n/tmp/tmpsr2d3vxr.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpsr2d3vxr.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpsr2d3vxr.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpsr2d3vxr.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                if(j+1 < grid[i].size() &&\
    \ grid[i][j+1] == 1){\n                    count--;\n                }\n     \
    \       }\n        }\n    }\n    return count * capacity;\n}\nint main() {\n \
    \   auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpzpb___q9: /tmp/tmpzpb___q9.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for (int i = 0; i < grid.size();\
    \ i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                result += capacity;\n                if (i > 0) {\n\
    \                    result -= grid[i - 1][j];\n                }\n          \
    \      if (j > 0) {\n                    result -= grid[i][j - 1];\n         \
    \       }\n                if (i > 0 && j > 0) {\n                    result +=\
    \ grid[i - 1][j - 1];\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp_tgl859m: /tmp/tmp_tgl859m.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_3u_hin9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp_3u_hin9.cpp:\
    \ In function 'int main()':\n/tmp/tmp_3u_hin9.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_3u_hin9.cpp:2:\n/tmp/tmp_3u_hin9.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp_3u_hin9.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp_3u_hin9.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp_3u_hin9.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count/capacity;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i0ma3ca.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp5i0ma3ca.cpp:\
    \ In function 'int main()':\n/tmp/tmp5i0ma3ca.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i0ma3ca.cpp:2:\n/tmp/tmp5i0ma3ca.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp5i0ma3ca.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp5i0ma3ca.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp5i0ma3ca.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cur = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cur++;\n            }\n        }\n        ans += (cur / capacity);\n\
    \        if (cur % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long max_fill_count = 0;\n\
    \    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size();\
    \ j++){\n            if(grid[i][j] == 1){\n                max_fill_count += capacity;\n\
    \            }\n        }\n    }\n    return max_fill_count;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpflievdrt: /tmp/tmpflievdrt.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long ans = 0;\n    for(int i = 0; i < grid.size();\
    \ i++) {\n        for(int j = 0; j < grid[i].size(); j++) {\n            if(grid[i][j]\
    \ == 1) {\n                ans += capacity;\n                for(int k = i; k\
    \ < grid.size(); k++) {\n                    if(grid[k][j] == 1) {\n         \
    \               grid[k][j] = 0;\n                    } else {\n              \
    \          break;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp2e_25he6: /tmp/tmp2e_25he6.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long max_fill = 0;\n    long\
    \ rows = grid.size();\n    long cols = grid[0].size();\n    for(long i = 0; i\
    \ < rows; i++){\n        for(long j = 0; j < cols; j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmplt0dfl_h: /tmp/tmplt0dfl_h.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylebu1ch.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpylebu1ch.cpp:\
    \ In function 'int main()':\n/tmp/tmpylebu1ch.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpylebu1ch.cpp:2:\n/tmp/tmpylebu1ch.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpylebu1ch.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpylebu1ch.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpylebu1ch.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long max_fill = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ul5fjf9.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp2ul5fjf9.cpp:\
    \ In function 'int main()':\n/tmp/tmp2ul5fjf9.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ul5fjf9.cpp:2:\n/tmp/tmp2ul5fjf9.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp2ul5fjf9.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp2ul5fjf9.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp2ul5fjf9.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long max_fill = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdr066my3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpdr066my3.cpp:\
    \ In function 'int main()':\n/tmp/tmpdr066my3.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdr066my3.cpp:2:\n/tmp/tmpdr066my3.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpdr066my3.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpdr066my3.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpdr066my3.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans++;\n\
    \                grid[i][j] = 0;\n                long cur = capacity;\n     \
    \           while (cur > 0) {\n                    if (i - 1 >= 0 && grid[i -\
    \ 1][j] == 1) {\n                        grid[i - 1][j] = 0;\n               \
    \         cur--;\n                    }\n                    if (i + 1 < n &&\
    \ grid[i + 1][j] == 1) {\n                        grid[i + 1][j] = 0;\n      \
    \                  cur--;\n                    }\n                    if (j -\
    \ 1 >= 0 && grid[i][j - 1] == 1) {\n                        grid[i][j - 1] = 0;\n\
    \                        cur--;\n                    }\n                    if\
    \ (j + 1 < m && grid[i][j + 1] == 1) {\n                        grid[i][j + 1]\
    \ = 0;\n                        cur--;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659747074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = 0; k < n; k++) {\n                \
    \    if (grid[k][j] == 1) {\n                        grid[k][j] = 0;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpk19n5y2l: /tmp/tmpk19n5y2l.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i + 1 < grid.size()){\n                    grid[i+1][j] = 1;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpw9i_xhm1: /tmp/tmpw9i_xhm1.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum + capacity - 1) / capacity;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyabpetou.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpyabpetou.cpp:\
    \ In function 'int main()':\n/tmp/tmpyabpetou.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyabpetou.cpp:2:\n/tmp/tmpyabpetou.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpyabpetou.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpyabpetou.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpyabpetou.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long count = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        ans += (count\
    \ / capacity);\n        if(count % capacity != 0){\n            ans++;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                for (long k = i + 1; k < n; k++) {\n            \
    \        if (grid[k][j] == 1) {\n                        ans--;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddts0myt.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpddts0myt.cpp:\
    \ In function 'int main()':\n/tmp/tmpddts0myt.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpddts0myt.cpp:2:\n/tmp/tmpddts0myt.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpddts0myt.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpddts0myt.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpddts0myt.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long num_rows = grid.size();\n\
    \    long num_cols = grid[0].size();\n    long num_buckets = 0;\n    for (long\
    \ i = 0; i < num_rows; i++) {\n        for (long j = 0; j < num_cols; j++) {\n\
    \            if (grid[i][j] == 1) {\n                num_buckets++;\n        \
    \    }\n        }\n    }\n    return num_buckets * capacity;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpntcct3kz: /tmp/tmpntcct3kz.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += (sum / capacity);\n        if (sum % capacity != 0) {\n\
    \            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ku7zt2r.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6ku7zt2r.cpp:\
    \ In function 'int main()':\n/tmp/tmp6ku7zt2r.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ku7zt2r.cpp:2:\n/tmp/tmp6ku7zt2r.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6ku7zt2r.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6ku7zt2r.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6ku7zt2r.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ytk92fu.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp0ytk92fu.cpp:\
    \ In function 'int main()':\n/tmp/tmp0ytk92fu.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0ytk92fu.cpp:2:\n/tmp/tmp0ytk92fu.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp0ytk92fu.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp0ytk92fu.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp0ytk92fu.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmppf2ldmwe: /tmp/tmppf2ldmwe.cpp:30: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp8hfuwmsb: /tmp/tmp8hfuwmsb.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            if(i == 0){\n                    ans += capacity;\n             \
    \   }\n                else{\n                    ans += capacity - grid[i-1][j];\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpkak5xe7s: /tmp/tmpkak5xe7s.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += cnt/capacity;\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbyodejp.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpwbyodejp.cpp:\
    \ In function 'int main()':\n/tmp/tmpwbyodejp.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwbyodejp.cpp:2:\n/tmp/tmpwbyodejp.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpwbyodejp.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpwbyodejp.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpwbyodejp.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count += capacity;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh6cy109.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprh6cy109.cpp:\
    \ In function 'int main()':\n/tmp/tmprh6cy109.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprh6cy109.cpp:2:\n/tmp/tmprh6cy109.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprh6cy109.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprh6cy109.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprh6cy109.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i+1 < grid.size()){\n                    grid[i+1][j] = 1;\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpqqvty826: /tmp/tmpqqvty826.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    int n = grid.size();\n    int m = grid[0].size();\n\
    \    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if\
    \ (grid[i][j] == 1) {\n                dp[i][j] = 1;\n            }\n        }\n\
    \    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < m; j++)\
    \ {\n            if (dp[i][j] == 1) {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n \
    \       std::sort(dp[i].begin(), dp[i].end());\n    }\n    long ans = 0;\n   \
    \ for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n     \
    \       ans += dp[i][j] / capacity;\n            if (dp[i][j] % capacity != 0)\
    \ {\n                ans++;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp2rd2up34: /tmp/tmp2rd2up34.cpp:58: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                for (long k = i; k < rows; k++) {\n             \
    \       for (long l = j; l < cols; l++) {\n                        if (grid[k][l]\
    \ == 1) {\n                            grid[k][l] = 0;\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp18mxkk3x: /tmp/tmp18mxkk3x.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += cnt / capacity;\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5neuxst.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpa5neuxst.cpp:\
    \ In function 'int main()':\n/tmp/tmpa5neuxst.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa5neuxst.cpp:2:\n/tmp/tmpa5neuxst.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpa5neuxst.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpa5neuxst.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpa5neuxst.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                ans +=\
    \ capacity;\n                if (i > 0) {\n                    ans -= std::min(capacity,\
    \ grid[i - 1][j]);\n                }\n                if (j > 0) {\n        \
    \            ans -= std::min(capacity, grid[i][j - 1]);\n                }\n \
    \           }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5twx0g5.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmps5twx0g5.cpp:\
    \ In function 'int main()':\n/tmp/tmps5twx0g5.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps5twx0g5.cpp:2:\n/tmp/tmps5twx0g5.cpp:45:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmps5twx0g5.cpp:45:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmps5twx0g5.cpp:45:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmps5twx0g5.cpp:45:128:\
    \ wa"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity) {\n      \
    \      ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           ans++;\n                grid[i][j] = 0;\n                for(int k\
    \ = i; k < n; k++){\n                    for(int l = j; l < m; l++){\n       \
    \                 if(grid[k][l] == 1){\n                            grid[k][l]\
    \ = 0;\n                            ans++;\n                        }\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmppm1vb_mw: /tmp/tmppm1vb_mw.cpp:50: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n \
    \               cnt++;\n            }\n        }\n        ans += (cnt + capacity\
    \ - 1) / capacity;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans++;\n                long k = i;\n                while(k < n\
    \ && grid[k][j] == 1){\n                    grid[k][j] = 0;\n                \
    \    k++;\n                }\n                k = i - 1;\n                while(k\
    \ >= 0 && grid[k][j] == 1){\n                    grid[k][j] = 0;\n           \
    \         k--;\n                }\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmphtcu4ebb: /tmp/tmphtcu4ebb.cpp:50: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long result = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  result += capacity;\n                for (long k = i + 1; k < rows; k++) {\n\
    \                    if (grid[k][j] == 1) {\n                        grid[k][j]\
    \ = 0;\n                    } else {\n                        break;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp995o_usv: /tmp/tmp995o_usv.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, capacity - sum);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmx776gj3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmx776gj3.cpp:\
    \ In function 'int main()':\n/tmp/tmpmx776gj3.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmx776gj3.cpp:2:\n/tmp/tmpmx776gj3.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmx776gj3.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmx776gj3.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmx776gj3.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long rows = grid.size();\n    long cols = grid[0].size();\n\
    \    long count = 0;\n    for (long i = 0; i < rows; i++) {\n        for (long\
    \ j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n              \
    \  count++;\n                grid[i][j] = 0;\n                if (i + 1 < rows\
    \ && grid[i + 1][j] == 1) {\n                    grid[i + 1][j] = 0;\n       \
    \         }\n                if (j + 1 < cols && grid[i][j + 1] == 1) {\n    \
    \                grid[i][j + 1] = 0;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = max_fill;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm97r1mm.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpzm97r1mm.cpp:\
    \ In function 'int main()':\n/tmp/tmpzm97r1mm.cpp:45:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzm97r1mm.cpp:2:\n/tmp/tmpzm97r1mm.cpp:46:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpzm97r1mm.cpp:46:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpzm97r1mm.cpp:46:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpzm97r1mm.cpp:46:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        long fill = 0;\n        for (auto well : row) {\n            if (well\
    \ == 1) {\n                fill++;\n            } else {\n                if (fill\
    \ > 0) {\n                    max_fill += fill / capacity;\n                 \
    \   fill = fill % capacity;\n                }\n            }\n        }\n   \
    \     if (fill > 0) {\n            max_fill += fill / capacity;\n            fill\
    \ = fill % capacity;\n        }\n    }\n    return max_fill;\n}\nint main() {\n\
    \    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpcgfee181: /tmp/tmpcgfee181.cpp:48: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long count = 0;\n    for(int i = 0; i < n; i++){\n\
    \        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n     \
    \           count++;\n                grid[i][j] = 0;\n            }\n       \
    \ }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < m; j++){\n            if(grid[i][j] == 0){\n                ans++;\n\
    \                for(int k = 0; k < capacity; k++){\n                    if(i-k\
    \ >= 0 && grid[i-k][j] == 0){\n                        grid[i-k][j] = 1;\n   \
    \                     count--;\n                    }\n                    if(i+k\
    \ < n && grid[i+k][j] == 0){\n                        grid[i+k][j] = 1;\n    \
    \                    count--;\n                    }\n                    if(j-k\
    \ >= 0 && grid[i][j-k] == 0){\n                        grid[i][j-k] = 1;\n   \
    \                     count--;\n                    }\n                    if(j+k\
    \ < m && grid[i][j+k] == 0){\n                        grid[i][j+k] = 1;\n    \
    \                    count--;\n                    }\n                }\n    \
    \        }\n            if(count == 0){\n                return ans;\n       \
    \     }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpx0mbugdf: /tmp/tmpx0mbugdf.cpp:71: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(int j = 0; j < m; j++){\n            sum +=\
    \ grid[i][j];\n        }\n        ans += sum/capacity;\n        if(sum%capacity\
    \ != 0)\n            ans++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        if (cnt > 0) {\n  \
    \          ans += (cnt - 1) / capacity + 1;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35wojbxm.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp35wojbxm.cpp:\
    \ In function 'int main()':\n/tmp/tmp35wojbxm.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp35wojbxm.cpp:2:\n/tmp/tmp35wojbxm.cpp:30:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp35wojbxm.cpp:30:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp35wojbxm.cpp:30:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp35wojbxm.cpp:30:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        for(long j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n    \
    \            ans += capacity;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lvwai7i.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp6lvwai7i.cpp:\
    \ In function 'int main()':\n/tmp/tmp6lvwai7i.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6lvwai7i.cpp:2:\n/tmp/tmp6lvwai7i.cpp:40:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp6lvwai7i.cpp:40:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp6lvwai7i.cpp:40:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp6lvwai7i.cpp:40:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i + 1 < grid.size()){\n                    grid[i+1][j] = 1;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpw9i_xhm1: /tmp/tmpw9i_xhm1.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += sum / capacity;\n        if (sum % capacity != 0) {\n \
    \           ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxtdq8hv.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpkxtdq8hv.cpp:\
    \ In function 'int main()':\n/tmp/tmpkxtdq8hv.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkxtdq8hv.cpp:2:\n/tmp/tmpkxtdq8hv.cpp:42:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpkxtdq8hv.cpp:42:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpkxtdq8hv.cpp:42:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpkxtdq8hv.cpp:42:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        ans += (sum / capacity);\n        if(sum\
    \ % capacity != 0){\n            ans++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxpo5tnt.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpaxpo5tnt.cpp:\
    \ In function 'int main()':\n/tmp/tmpaxpo5tnt.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxpo5tnt.cpp:2:\n/tmp/tmpaxpo5tnt.cpp:43:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpaxpo5tnt.cpp:43:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpaxpo5tnt.cpp:43:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpaxpo5tnt.cpp:43:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long row = grid.size();\n\
    \    long col = grid[0].size();\n    long count = 0;\n    for(int i = 0; i < row;\
    \ i++){\n        for(int j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n\
    \                count++;\n                grid[i][j] = 0;\n                if(i+1\
    \ < row && grid[i+1][j] == 1){\n                    count++;\n               \
    \     grid[i+1][j] = 0;\n                }\n                if(j+1 < col && grid[i][j+1]\
    \ == 1){\n                    count++;\n                    grid[i][j+1] = 0;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpenpab0xb: /tmp/tmpenpab0xb.cpp:50: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    long n = grid.size();\n   \
    \ long m = grid[0].size();\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j]\
    \ = 0;\n                count++;\n                if(i + 1 < n) {\n          \
    \          grid[i + 1][j] = 0;\n                }\n                if(j + 1 <\
    \ m) {\n                    grid[i][j + 1] = 0;\n                }\n         \
    \   }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmp3lzgxztn: /tmp/tmp3lzgxztn.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // Your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long cnt = 0;\n        for(long j = 0; j < m; j++){\n            if(grid[i][j]\
    \ == 1){\n                cnt++;\n            }\n        }\n        ans += (cnt/capacity);\n\
    \        if(cnt%capacity != 0){\n            ans++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n\
    \                cnt++;\n            }\n        }\n        ans += (cnt / capacity);\n\
    \        if (cnt % capacity != 0) {\n            ans++;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ccpe4j.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmp69ccpe4j.cpp:\
    \ In function 'int main()':\n/tmp/tmp69ccpe4j.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp69ccpe4j.cpp:2:\n/tmp/tmp69ccpe4j.cpp:44:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmp69ccpe4j.cpp:44:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmp69ccpe4j.cpp:44:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmp69ccpe4j.cpp:44:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long result = 0;\n    for (int i = 0; i < grid.size();\
    \ i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j]\
    \ == 1) {\n                result += capacity;\n                for (int k = i\
    \ - 1; k >= 0; k--) {\n                    if (grid[k][j] == 1) {\n          \
    \              break;\n                    }\n                    grid[k][j] =\
    \ 1;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpp5zhj8as: /tmp/tmpp5zhj8as.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),
    (2)) == (5)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long count = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n                grid[i][j] = 0;\n        \
    \        if(i+1 < grid.size()){\n                    grid[i+1][j] = 1;\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpqqvty826: /tmp/tmpqqvty826.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long count = 0;\n    for(int\
    \ i = 0; i < grid.size(); i++){\n        for(int j = 0; j < grid[i].size(); j++){\n\
    \            if(grid[i][j] == 1){\n                count += capacity;\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh6cy109.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmprh6cy109.cpp:\
    \ In function 'int main()':\n/tmp/tmprh6cy109.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprh6cy109.cpp:2:\n/tmp/tmprh6cy109.cpp:38:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmprh6cy109.cpp:38:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmprh6cy109.cpp:38:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmprh6cy109.cpp:38:128:\
    \ wa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            sum += grid[i][j];\n    \
    \    }\n        ans += std::max(0l, capacity - sum);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmx776gj3.cpp:24:43: error: '>>' should be '> >' within a nested\
    \ template argument list\n long max_fill(std::vector<std::vector<long>> grid,\
    \ long capacity) {\n                                           ^\n/tmp/tmpmx776gj3.cpp:\
    \ In function 'int main()':\n/tmp/tmpmx776gj3.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = max_fill;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmx776gj3.cpp:2:\n/tmp/tmpmx776gj3.cpp:39:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                       ^\n/tmp/tmpmx776gj3.cpp:39:53: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                         ^\n/tmp/tmpmx776gj3.cpp:39:91: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n                            \
    \                                                               ^\n/tmp/tmpmx776gj3.cpp:39:128:\
    \ wa"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
    \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
    \ a single unit of water.\n// Each well has a corresponding bucket that can be\
    \ used to extract water from it, \n// and all buckets have the same capacity.\n\
    // Your task is to use the buckets to empty the wells.\n// Output the number of\
    \ times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n\
    // * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j]\
    \ -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
    \ grid, long capacity) {\n    // your code here\n    long n = grid.size();\n \
    \   long m = grid[0].size();\n    long ans = 0;\n    for(long i = 0; i < n; i++){\n\
    \        long sum = 0;\n        for(long j = 0; j < m; j++){\n            sum\
    \ += grid[i][j];\n        }\n        if(sum > capacity){\n            ans += sum\
    \ - capacity;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0,\
    \ (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
    \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
    \ (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n"
  status: Exception
  stderr: 'tmpsswb3fww: /tmp/tmpsswb3fww.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,
    (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,
    (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,
    (long)1})})), (1)) == (6)'' failed.

    '
  stdout: ''
  timestamp: 1659747069
