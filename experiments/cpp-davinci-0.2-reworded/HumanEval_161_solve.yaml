name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string result = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            flag\
    \ = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!flag)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            is_letter\
    \ = true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    bool flag = true;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n         \
    \   if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n            }\
    \ else {\n                s[i] = tolower(s[i]);\n            }\n        }\n  \
    \  }\n    return s;", "    if (s.length() == 0) return \"\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += s[i] - 32;\n        } else if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i] + 32;\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    return result;",
  "    if(s.size() == 0) return s;\n    std::string res = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            flag = true;\n            res += toupper(s[i]);\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n            res\
    \ += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n \
    \   }\n    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;", "    std::string res = \"\";\n    bool isLetter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            isLetter = true;\n            res += toupper(s[i]);\n  \
    \      } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            isLetter = true;\n\
    \            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (!isLetter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    std::string result;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    bool isLetter = false;\n    for (char c : s) {\n        if (isalpha(c))\
    \ {\n            isLetter = true;\n            if (isupper(c)) {\n           \
    \     result += tolower(c);\n            } else {\n                result += toupper(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n \
    \   }\n    return result;", "    std::string result = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (islower(s[i])) {\n      \
    \          result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    bool\
    \ hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            hasLetter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    bool flag = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ true;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.size(); i++) {\n            if(isalpha(s[i])) {\n             \
    \   if(isupper(s[i])) {\n                    s[i] = tolower(s[i]);\n         \
    \       } else {\n                    s[i] = toupper(s[i]);\n                }\n\
    \            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int n = s.size();\n    bool flag = false;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n\
    \            break;\n        }\n    }\n    if(!flag) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < n; i++) {\n    \
    \    if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            }\n            else {\n                s[i] =\
    \ tolower(s[i]);\n            }\n        }\n    }\n    return s;", "    int i\
    \ = 0;\n    while(i < s.size() && !isalpha(s[i])){\n        i++;\n    }\n    if(i\
    \ == s.size()){\n        reverse(s.begin(), s.end());\n        return s;\n   \
    \ }\n    for(int j = 0; j < s.size(); j++){\n        if(isalpha(s[j])){\n    \
    \        if(islower(s[j])){\n                s[j] = toupper(s[j]);\n         \
    \   }\n            else{\n                s[j] = tolower(s[j]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string res = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            has_letter = true;\n            res += s[i] -\
    \ 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            has_letter\
    \ = true;\n            res += s[i] + 32;\n        } else {\n            res +=\
    \ s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string res = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n            flag =\
    \ true;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res +=\
    \ tolower(s[i]);\n            flag = true;\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (flag) {\n        return res;\n    } else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    std::string result;\n    if(s.size() == 0) return result;\n    for(int i =\
    \ 0; i < s.size(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n          \
    \  result += toupper(s[i]);\n        }else if(s[i] >= 'A' && s[i] <= 'Z'){\n \
    \           result += tolower(s[i]);\n        }else{\n            result += s[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    bool\
    \ hasLetters = false;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            hasLetters = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!hasLetters) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n    \
    \        } else {\n                s[i] = tolower(s[i]);\n            }\n    \
    \    }\n    }\n    if(count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int len = s.length();\n    if(len == 0) return s;\n\
    \    for(int i = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;",
  "    std::string result;\n    if (s.size() == 0) {\n        return result;\n   \
    \ }\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n            result += toupper(s[i]);\n        } else if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n        } else\
    \ {\n            result += s[i];\n        }\n    }\n    return result;", "  std::string\
    \ result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n      result += toupper(s[i]);\n    } else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      result += tolower(s[i]);\n    } else {\n      result\
    \ += s[i];\n    }\n  }\n  if (result == s) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;", "    std::string result;\n    int len\
    \ = s.length();\n    if(len == 0) return result;\n    for(int i = 0; i < len;\
    \ i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n        \
    \        result += toupper(s[i]);\n            }\n            else{\n        \
    \        result += tolower(s[i]);\n            }\n        }\n        else{\n \
    \           result += s[i];\n        }\n    }\n    if(result.length() == 0){\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    return\
    \ result;", "    std::string res = \"\";\n    bool is_letter = false;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ is_letter = true;\n            if (islower(s[i])) {\n                res +=\
    \ toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (!is_letter) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;", "    int n = s.size();\n    if(n == 0) return \"\";\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n            else s[i] = toupper(s[i]);\n        }\n \
    \   }\n    return s;", "    std::string result = \"\";\n    bool is_letter = false;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          is_letter = true;\n            if (islower(s[i])) {\n             \
    \   result += toupper(s[i]);\n            } else {\n                result +=\
    \ tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') s[i] = s[i] - 32;\n        else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') s[i] = s[i] + 32;\n    }\n    return s;", "    std::string result;\n\
    \    bool hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            hasLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool is_letter = false;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] >= 'a' && s[i] <= 'z') {\n            is_letter = true;\n     \
    \       result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            is_letter = true;\n            result += tolower(s[i]);\n   \
    \     } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            count++;\n            if(islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            } else {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    if(count == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "  bool flag = false;\n  for (int i = 0; i\
    \ < s.size(); i++) {\n    if (isalpha(s[i])) {\n      flag = true;\n      break;\n\
    \    }\n  }\n  if (flag) {\n    for (int i = 0; i < s.size(); i++) {\n      if\
    \ (isalpha(s[i])) {\n        if (isupper(s[i])) {\n          s[i] = tolower(s[i]);\n\
    \        } else {\n          s[i] = toupper(s[i]);\n        }\n      }\n    }\n\
    \  } else {\n    reverse(s.begin(), s.end());\n  }\n  return s;", "    std::string\
    \ result = \"\";\n    if (s.length() == 0) return result;\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (isupper(s[i])) {\n      \
    \          result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   bool flag = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            flag = true;\n            if (isupper(s[i])) {\n            \
    \    res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    if (s.empty()) return s;\n    std::string res;\n    for (auto c\
    \ : s) {\n        if (isalpha(c)) {\n            res += isupper(c) ? tolower(c)\
    \ : toupper(c);\n        } else {\n            res += c;\n        }\n    }\n \
    \   return res;", "    std::string result = \"\";\n    bool has_letter = false;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          has_letter = true;\n            if (isupper(s[i])) {\n            \
    \    result += tolower(s[i]);\n            } else {\n                result +=\
    \ toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ if(len == 0) return s;\n    bool hasLetter = false;\n    for(int i = 0; i <\
    \ len; i++)\n        if(isalpha(s[i])) {\n            hasLetter = true;\n    \
    \        break;\n        }\n    if(!hasLetter) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < len; i++) {\n  \
    \      if(isalpha(s[i])) {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n\
    \            else s[i] = tolower(s[i]);\n        }\n    }\n    return s;", " \
    \   std::string res;\n    if(s.size() == 0) return res;\n    for(int i = 0; i\
    \ < s.size(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            res\
    \ += toupper(s[i]);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n\
    \            res += tolower(s[i]);\n        }\n        else{\n            res\
    \ += s[i];\n        }\n    }\n    if(res.size() == s.size()){\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string result = \"\";\n    bool\
    \ isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            isLetter = true;\n            if (isupper(s[i])) {\n        \
    \        result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n        std::reverse(s.begin(), s.end());\n       \
    \ return s;\n    }\n    for (auto i : s) {\n        if (i >= 'a' && i <= 'z')\
    \ {\n            result += toupper(i);\n        } else if (i >= 'A' && i <= 'Z')\
    \ {\n            result += tolower(i);\n        } else {\n            result +=\
    \ i;\n        }\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool has_letter = false;\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            has_letter = true;\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string result;\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    bool is_letter = false;\n \
    \   for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n     \
    \       is_letter = true;\n            break;\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n       \
    \     if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n          \
    \  } else {\n                s[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    return s;", "    int n = s.size();\n    if(n == 0) return \"\";\n\
    \    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(isalpha(s[0]))\
    \ {\n        reverse(s.begin(), s.end());\n    }\n    return s;", "    bool flag\
    \ = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < s.size(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                if(islower(s[i])) {\n                    s[i] = toupper(s[i]);\n\
    \                } else {\n                    s[i] = tolower(s[i]);\n       \
    \         }\n            }\n        }\n    } else {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;", "    int i = 0;\n    for (i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            break;\n        }\n    }\n\
    \    if (i == s.length()) {\n        std::reverse(s.begin(), s.end());\n     \
    \   return s;\n    }\n    for (i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (islower(s[i])) {\n                s[i] = toupper(s[i]);\n\
    \            } else {\n                s[i] = tolower(s[i]);\n            }\n\
    \        }\n    }\n    return s;", "  std::string res = \"\";\n  for (int i =\
    \ 0; i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      res +=\
    \ toupper(s[i]);\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      res += tolower(s[i]);\n\
    \    } else {\n      res += s[i];\n    }\n  }\n  if (res == s) {\n    std::reverse(res.begin(),\
    \ res.end());\n  }\n  return res;", "    std::string result = \"\";\n    bool\
    \ is_letter = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   bool flag = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            flag = true;\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n\
    \            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (!flag) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "  std::string result = \"\";\n  bool isLetter = false;\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (isalpha(s[i])) {\n      isLetter\
    \ = true;\n      if (isupper(s[i])) {\n        result += tolower(s[i]);\n    \
    \  } else {\n        result += toupper(s[i]);\n      }\n    } else {\n      result\
    \ += s[i];\n    }\n  }\n  if (!isLetter) {\n    std::reverse(result.begin(), result.end());\n\
    \  }\n  return result;", "    std::string result = \"\";\n    bool isLetter =\
    \ false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            isLetter = true;\n            if (islower(s[i])) {\n        \
    \        result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool hasLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            hasLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int len = s.length();\n   \
    \ bool flag = false;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        for(int i = 0; i < len; i++) {\n            if(isalpha(s[i])) {\n\
    \                if(isupper(s[i])) {\n                    s[i] = tolower(s[i]);\n\
    \                }\n                else {\n                    s[i] = toupper(s[i]);\n\
    \                }\n            }\n        }\n    }\n    else {\n        for(int\
    \ i = 0; i < len/2; i++) {\n            std::swap(s[i], s[len-i-1]);\n       \
    \ }\n    }\n    return s;", "    std::string result = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          flag = true;\n            if (isupper(s[i])) {\n                result\
    \ += tolower(s[i]);\n            } else {\n                result += toupper(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!flag) {\n        std::reverse(result.begin(), result.end());\n \
    \   }\n    return result;", "    std::string result;\n    bool has_letter = false;\n\
    \    for (auto c : s) {\n        if (isalpha(c)) {\n            has_letter = true;\n\
    \            result += isupper(c) ? tolower(c) : toupper(c);\n        } else {\n\
    \            result += c;\n        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n    \
    \        } else {\n                s[i] = tolower(s[i]);\n            }\n    \
    \    }\n    }\n    if(count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            count++;\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(count ==\
    \ 0) {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", "  \
    \  int len = s.length();\n    if(len == 0) return s;\n    for(int i = 0; i < len;\
    \ i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n\
    \            else s[i] = tolower(s[i]);\n        }\n    }\n    return s;", " \
    \ std::string result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n      result += toupper(s[i]);\n    } else if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n      result += tolower(s[i]);\n    } else {\n\
    \      result += s[i];\n    }\n  }\n  if (result == s) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;", "    std::string result;\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string res = \"\";\n \
    \   bool flag = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            flag = true;\n            if (isupper(s[i])) {\n            \
    \    res += tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    std::string res = \"\";\n    bool has_letter = false;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            has_letter\
    \ = true;\n            if (isupper(s[i])) {\n                res += tolower(s[i]);\n\
    \            } else {\n                res += toupper(s[i]);\n            }\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (!has_letter)\
    \ {\n        std::reverse(res.begin(), res.end());\n    }\n    return res;", "\t\
    if (s.size() == 0) return s;\n\tstd::string result;\n\tbool hasLetter = false;\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\
    \t\t\thasLetter = true;\n\t\t\tresult += s[i] - 32;\n\t\t}\n\t\telse if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\thasLetter = true;\n\t\t\tresult += s[i] + 32;\n\
    \t\t}\n\t\telse {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (!hasLetter) {\n\t\t\
    std::reverse(result.begin(), result.end());\n\t}\n\treturn result;", "    std::string\
    \ result;\n    if(s.size() == 0) return result;\n    for(int i = 0; i < s.size();\
    \ i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n        \
    \        result += toupper(s[i]);\n            }\n            else{\n        \
    \        result += tolower(s[i]);\n            }\n        }\n        else{\n \
    \           result += s[i];\n        }\n    }\n    if(result.size() == 0) return\
    \ s;\n    return result;", "    std::string result = \"\";\n    bool has_letter\
    \ = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            has_letter\
    \ = true;\n            if (isupper(c)) {\n                result += tolower(c);\n\
    \            } else {\n                result += toupper(c);\n            }\n\
    \        } else {\n            result += c;\n        }\n    }\n    if (!has_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n  \
    \      } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    std::string result;\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    bool\
    \ hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            hasLetter = true;\n            if (isupper(s[i])) {\n       \
    \         result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool is_letter = false;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            is_letter = true;\n            if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            } else {\n        \
    \        result += toupper(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            count++;\n            result += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            count++;\n    \
    \        result += tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (count == 0) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "\tstd::string result = \"\";\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\
    \t\t\tresult += toupper(s[i]);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n\t\t\tresult += tolower(s[i]);\n\t\t}\n\t\telse {\n\t\t\tresult += s[i];\n\
    \t\t}\n\t}\n\tif (result == s) {\n\t\tstd::reverse(result.begin(), result.end());\n\
    \t}\n\treturn result;", "    std::string res = \"\";\n    bool flag = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        flag = true;\n            if (isupper(s[i])) {\n                res +=\
    \ tolower(s[i]);\n            } else {\n                res += toupper(s[i]);\n\
    \            }\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    if (!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    if(s.empty())\n        return s;\n    std::string result;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n\
    \                result += toupper(s[i]);\n            else\n                result\
    \ += tolower(s[i]);\n        }\n        else\n            result += s[i];\n  \
    \  }\n    return result;", "    int n = s.size();\n    if(n == 0) return \"\"\
    ;\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            ans += toupper(s[i]);\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            ans += tolower(s[i]);\n      \
    \  } else {\n            ans += s[i];\n        }\n    }\n    if(ans == s) {\n\
    \        std::reverse(ans.begin(), ans.end());\n    }\n    return ans;", "   \
    \ std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n  \
    \      } else {\n            result += s[i];\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return s;\n    }\n    return result;", "    std::string res;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            res += toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            res += tolower(s[i]);\n        } else {\n      \
    \      res += s[i];\n        }\n    }\n    if (res.size() == s.size()) {\n   \
    \     std::reverse(res.begin(), res.end());\n    }\n    return res;", "    std::string\
    \ result = \"\";\n    if(s.length() == 0) return result;\n    for(int i = 0; i\
    \ < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            result\
    \ += toupper(s[i]);\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n\
    \            result += tolower(s[i]);\n        }\n        else{\n            result\
    \ += s[i];\n        }\n    }\n    if(result == s){\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            result += toupper(s[i]);\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += tolower(s[i]);\n        } else {\n        \
    \    result += s[i];\n        }\n    }\n    return result;", "    int i = 0;\n\
    \    bool flag = false;\n    for(i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            flag = true;\n            break;\n   \
    \     }\n    }\n    if(flag) {\n        for(i = 0; i < s.length(); i++) {\n  \
    \          if(s[i] >= 'a' && s[i] <= 'z') {\n                s[i] = s[i] - 32;\n\
    \            }\n            else if(s[i] >= 'A' && s[i] <= 'Z') {\n          \
    \      s[i] = s[i] + 32;\n            }\n        }\n    }\n    else {\n      \
    \  for(i = 0; i < s.length()/2; i++) {\n            char temp = s[i];\n      \
    \      s[i] = s[s.length() - i - 1];\n            s[s.length() - i - 1] = temp;\n\
    \        }\n    }\n    return s;", "    std::string result = \"\";\n    bool is_letter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            is_letter = true;\n            if (isupper(s[i])) {\n       \
    \         result += tolower(s[i]);\n            } else {\n                result\
    \ += toupper(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!is_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "  std::string result = \"\";\n\
    \  int flag = 0;\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i] >= 'a'\
    \ && s[i] <= 'z') {\n      result += toupper(s[i]);\n      flag = 1;\n    }\n\
    \    else if(s[i] >= 'A' && s[i] <= 'Z') {\n      result += tolower(s[i]);\n \
    \     flag = 1;\n    }\n    else {\n      result += s[i];\n    }\n  }\n  if(flag\
    \ == 0) {\n    std::reverse(result.begin(), result.end());\n  }\n  return result;",
  "    std::string result = \"\";\n    bool isLetter = false;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            isLetter =\
    \ true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    int len = s.length();\n    if(len == 0)\n        return s;\n    for(int i =\
    \ 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\n            s[i]\
    \ = s[i] - 32;\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n            s[i]\
    \ = s[i] + 32;\n    }\n    return s;", "    int n = s.size();\n    int flag =\
    \ 0;\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n        \
    \    flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n  \
    \      std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            }\n            else {\n\
    \                s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return\
    \ s;", "    int len = s.length();\n    for(int i = 0; i < len; i++) {\n      \
    \  if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 32;\n        }\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] + 32;\n\
    \        }\n    }\n    return s;", "    bool isLetter = false;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            isLetter\
    \ = true;\n            break;\n        }\n    }\n    if (!isLetter) {\n      \
    \  reverse(s.begin(), s.end());\n        return s;\n    }\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;",
  "  std::string result = \"\";\n  bool hasLetter = false;\n  for (int i = 0; i <\
    \ s.length(); i++) {\n    if (isalpha(s[i])) {\n      hasLetter = true;\n    \
    \  if (isupper(s[i])) {\n        result += tolower(s[i]);\n      } else {\n  \
    \      result += toupper(s[i]);\n      }\n    } else {\n      result += s[i];\n\
    \    }\n  }\n  if (!hasLetter) {\n    std::reverse(result.begin(), result.end());\n\
    \  }\n  return result;", "    int i;\n    for(i=0;i<s.length();i++)\n    {\n \
    \       if(isalpha(s[i]))\n        {\n            if(islower(s[i]))\n        \
    \    {\n                s[i]=toupper(s[i]);\n            }\n            else\n\
    \            {\n                s[i]=tolower(s[i]);\n            }\n        }\n\
    \    }\n    if(i==s.length())\n    {\n        reverse(s.begin(),s.end());\n  \
    \  }\n    return s;", "    int count = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            count++;\n            if(islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(count ==\
    \ 0) {\n        std::reverse(s.begin(), s.end());\n    }\n    return s;", "  \
    \  std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            result += toupper(s[i]);\n     \
    \   } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += tolower(s[i]);\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (result.length()\
    \ == s.length()) {\n        reverse(result.begin(), result.end());\n    }\n  \
    \  return result;", "\tstd::string result;\n\tbool has_letter = false;\n\tfor\
    \ (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\thas_letter\
    \ = true;\n\t\t\tif (islower(s[i])) {\n\t\t\t\tresult += toupper(s[i]);\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tresult += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tresult += s[i];\n\t\t}\n\t}\n\tif (!has_letter) {\n\t\tstd::reverse(result.begin(),\
    \ result.end());\n\t}\n\treturn result;", "    std::string result = \"\";\n  \
    \  bool flag = false;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            flag = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!flag) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    bool\
    \ has_letter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n   \
    \         has_letter = true;\n            result += isupper(c) ? tolower(c) :\
    \ toupper(c);\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (!has_letter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "  int n = s.size();\n  if(n == 0) return s;\n  std::string\
    \ res = \"\";\n  bool flag = false;\n  for(int i = 0; i < n; i++) {\n    if(isalpha(s[i]))\
    \ {\n      flag = true;\n      if(islower(s[i])) res += toupper(s[i]);\n     \
    \ else res += tolower(s[i]);\n    }\n    else res += s[i];\n  }\n  if(!flag) {\n\
    \    std::reverse(res.begin(), res.end());\n  }\n  return res;", "    std::string\
    \ res = \"\";\n    bool has_letter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            has_letter =\
    \ true;\n            res += s[i] - 'a' + 'A';\n        } else if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            has_letter = true;\n            res += s[i] -\
    \ 'A' + 'a';\n        } else {\n            res += s[i];\n        }\n    }\n \
    \   if (!has_letter) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;", "    std::string res;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (res.size()\
    \ == s.size()) {\n        std::reverse(res.begin(), res.end());\n    }\n    return\
    \ res;", "    std::string result = \"\";\n    bool hasLetter = false;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n         \
    \   hasLetter = true;\n            if (islower(s[i])) {\n                result\
    \ += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    if (!hasLetter) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            is_letter =\
    \ true;\n            break;\n        }\n    }\n    if (!is_letter) {\n       \
    \ std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (isupper(s[i]))\
    \ {\n                s[i] = tolower(s[i]);\n            } else {\n           \
    \     s[i] = toupper(s[i]);\n            }\n        }\n    }\n    return s;",
  "    std::string result;\n    bool hasLetter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            hasLetter = true;\n      \
    \      if (islower(s[i])) {\n                result += toupper(s[i]);\n      \
    \      } else {\n                result += tolower(s[i]);\n            }\n   \
    \     } else {\n            result += s[i];\n        }\n    }\n    if (!hasLetter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            is_letter\
    \ = true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += tolower(s[i]);\n     \
    \   } else {\n            res += s[i];\n        }\n    }\n    if (res.size() ==\
    \ s.size()) {\n        reverse(res.begin(), res.end());\n    }\n    return res;",
  "    if (s.size() == 0) return s;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (isalpha(s[i])) {\n            if (islower(s[i])) s[i] = toupper(s[i]);\n\
    \            else s[i] = tolower(s[i]);\n        }\n    }\n    return s;", " \
    \   int len = s.length();\n    if(len == 0) return s;\n    for(int i = 0; i <\
    \ len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = s[i]\
    \ - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i]\
    \ = s[i] - 'A' + 'a';\n        }\n    }\n    return s;", "    std::string res;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        if (islower(s[i])) {\n                res += toupper(s[i]);\n       \
    \     } else {\n                res += tolower(s[i]);\n            }\n       \
    \ } else {\n            res += s[i];\n        }\n    }\n    if (res.size() ==\
    \ 0) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n\
    \    return res;"]
stop_tokens:
- "\n}"
