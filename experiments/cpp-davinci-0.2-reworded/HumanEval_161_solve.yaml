name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string result = \"\";\n    bool flag = false;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            flag\
    \ = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n\
    \            } else {\n                result += tolower(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!flag)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    std::string result = \"\";\n    bool is_letter = false;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            is_letter\
    \ = true;\n            if (isupper(s[i])) {\n                result += tolower(s[i]);\n\
    \            } else {\n                result += toupper(s[i]);\n            }\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    if (!is_letter)\
    \ {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;",
  "    bool flag = true;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if(flag)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n         \
    \   if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n            }\
    \ else {\n                s[i] = tolower(s[i]);\n            }\n        }\n  \
    \  }\n    return s;", "    if (s.length() == 0) return \"\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result += s[i] - 32;\n        } else if\
    \ (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i] + 32;\n        }\
    \ else {\n            result += s[i];\n        }\n    }\n    return result;",
  "    if(s.size() == 0) return s;\n    std::string res = \"\";\n    bool flag = false;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            flag = true;\n            res += toupper(s[i]);\n        } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            flag = true;\n            res\
    \ += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n \
    \   }\n    if(!flag) {\n        std::reverse(res.begin(), res.end());\n    }\n\
    \    return res;", "    std::string res = \"\";\n    bool isLetter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            isLetter = true;\n            res += toupper(s[i]);\n  \
    \      } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            isLetter = true;\n\
    \            res += tolower(s[i]);\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    if (!isLetter) {\n        std::reverse(res.begin(), res.end());\n\
    \    }\n    return res;", "    std::string result;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             result += toupper(s[i]);\n            } else {\n               \
    \ result += tolower(s[i]);\n            }\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    if (result.length() == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    bool isLetter = false;\n    for (char c : s) {\n        if (isalpha(c))\
    \ {\n            isLetter = true;\n            if (isupper(c)) {\n           \
    \     result += tolower(c);\n            } else {\n                result += toupper(c);\n\
    \            }\n        } else {\n            result += c;\n        }\n    }\n\
    \    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n \
    \   }\n    return result;", "    std::string result = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            has_letter = true;\n            if (islower(s[i])) {\n      \
    \          result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!has_letter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result = \"\";\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    std::string result;\n    bool\
    \ hasLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            hasLetter = true;\n            if (islower(s[i])) {\n       \
    \         result += toupper(s[i]);\n            } else {\n                result\
    \ += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    if (!hasLetter) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    bool flag = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            flag =\
    \ true;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.size(); i++) {\n            if(isalpha(s[i])) {\n             \
    \   if(isupper(s[i])) {\n                    s[i] = tolower(s[i]);\n         \
    \       } else {\n                    s[i] = toupper(s[i]);\n                }\n\
    \            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int n = s.size();\n    bool flag = false;\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            flag = true;\n\
    \            break;\n        }\n    }\n    if(!flag) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for(int i = 0; i < n; i++) {\n    \
    \    if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                s[i]\
    \ = toupper(s[i]);\n            }\n            else {\n                s[i] =\
    \ tolower(s[i]);\n            }\n        }\n    }\n    return s;", "    int i\
    \ = 0;\n    while(i < s.size() && !isalpha(s[i])){\n        i++;\n    }\n    if(i\
    \ == s.size()){\n        reverse(s.begin(), s.end());\n        return s;\n   \
    \ }\n    for(int j = 0; j < s.size(); j++){\n        if(isalpha(s[j])){\n    \
    \        if(islower(s[j])){\n                s[j] = toupper(s[j]);\n         \
    \   }\n            else{\n                s[j] = tolower(s[j]);\n            }\n\
    \        }\n    }\n    return s;", "    std::string res = \"\";\n    bool has_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            has_letter = true;\n            res += s[i] -\
    \ 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            has_letter\
    \ = true;\n            res += s[i] + 32;\n        } else {\n            res +=\
    \ s[i];\n        }\n    }\n    if (!has_letter) {\n        std::reverse(res.begin(),\
    \ res.end());\n    }\n    return res;", "    std::string res = \"\";\n    bool\
    \ flag = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            res += toupper(s[i]);\n            flag =\
    \ true;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res +=\
    \ tolower(s[i]);\n            flag = true;\n        } else {\n            res\
    \ += s[i];\n        }\n    }\n    if (flag) {\n        return res;\n    } else\
    \ {\n        std::reverse(res.begin(), res.end());\n        return res;\n    }",
  "    std::string result;\n    if(s.size() == 0) return result;\n    for(int i =\
    \ 0; i < s.size(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n          \
    \  result += toupper(s[i]);\n        }else if(s[i] >= 'A' && s[i] <= 'Z'){\n \
    \           result += tolower(s[i]);\n        }else{\n            result += s[i];\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    bool\
    \ hasLetters = false;\n    for (int i = 0; i < s.length(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            hasLetters = true;\n            if (islower(s[i]))\
    \ {\n                result += toupper(s[i]);\n            } else {\n        \
    \        result += tolower(s[i]);\n            }\n        } else {\n         \
    \   result += s[i];\n        }\n    }\n    if (!hasLetters) {\n        std::reverse(result.begin(),\
    \ result.end());\n    }\n    return result;", "    int count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(islower(s[i])) {\n                s[i] = toupper(s[i]);\n    \
    \        } else {\n                s[i] = tolower(s[i]);\n            }\n    \
    \    }\n    }\n    if(count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;", "    int len = s.length();\n    if(len == 0) return s;\n\
    \    for(int i = 0; i < len; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \            s[i] = s[i] - 'a' + 'A';\n        } else if(s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;"]
stop_tokens:
- "\n}"
