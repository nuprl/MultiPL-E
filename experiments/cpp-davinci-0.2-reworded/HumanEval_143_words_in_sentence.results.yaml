language: cpp
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n  \
    \  std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length()\
    \ == 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt538c3ln.cpp: In function 'int main()':\n/tmp/tmpt538c3ln.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt538c3ln.cpp:2:\n/tmp/tmpt538c3ln.cpp:34:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1 || word.length() == 2) {\n  \
    \          result += word + \" \";\n        } else {\n            bool isPrime\
    \ = true;\n            for (int i = 2; i < word.length(); i++) {\n           \
    \     if (word.length() % i == 0) {\n                    isPrime = false;\n  \
    \                  break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0w_6zs5.cpp: In function 'int main()':\n/tmp/tmpm0w_6zs5.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm0w_6zs5.cpp:2:\n/tmp/tmpm0w_6zs5.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        bool isPrime = true;\n\
    \        for (int j = 2; j < words[i].length(); j++) {\n            if (words[i].length()\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            result += words[i]\
    \ + \" \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnl7cctah.cpp: In function 'int main()':\n/tmp/tmpnl7cctah.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnl7cctah.cpp:2:\n/tmp/tmpnl7cctah.cpp:46:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (temp.length() ==\
    \ 2 || temp.length() == 3 || temp.length() == 5 || temp.length() == 7) {\n   \
    \             result += temp + \" \";\n            }\n            temp = \"\"\
    ;\n        } else {\n            temp += sentence[i];\n        }\n    }\n    if\
    \ (temp.length() == 2 || temp.length() == 3 || temp.length() == 5 || temp.length()\
    \ == 7) {\n        result += temp;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_x7a5df3.cpp: In function 'int main()':\n/tmp/tmp_x7a5df3.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_x7a5df3.cpp:2:\n/tmp/tmp_x7a5df3.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string words[100];\n\
    \    int count = 0;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words[count++] = word;\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words[count++] = word;\n    std::string result = \"\";\n\
    \    for (int i = 0; i < count; i++) {\n        int flag = 0;\n        for (int\
    \ j = 2; j < words[i].length(); j++) {\n            if (words[i].length() % j\
    \ == 0) {\n                flag = 1;\n                break;\n            }\n\
    \        }\n        if (flag == 0) {\n            result += words[i] + \" \";\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe37rwj1u.cpp: In function 'int main()':\n/tmp/tmpe37rwj1u.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe37rwj1u.cpp:2:\n/tmp/tmpe37rwj1u.cpp:47:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        int len = word.length();\n        bool isPrime = true;\n  \
    \      for (int i = 2; i <= len / 2; i++) {\n            if (len % i == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1j9_0d3.cpp: In function 'int main()':\n/tmp/tmpb1j9_0d3.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1j9_0d3.cpp:2:\n/tmp/tmpb1j9_0d3.cpp:38:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n\tstd::string result =\
    \ \"\";\n\tstd::string word = \"\";\n\tfor (int i = 0; i < sentence.length();\
    \ i++) {\n\t\tif (sentence[i] == ' ') {\n\t\t\tif (is_prime(word.length())) {\n\
    \t\t\t\tresult += word + \" \";\n\t\t\t}\n\t\t\tword = \"\";\n\t\t}\n\t\telse\
    \ {\n\t\t\tword += sentence[i];\n\t\t}\n\t}\n\tif (is_prime(word.length())) {\n\
    \t\tresult += word;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1ge51oo.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpu1ge51oo.cpp:22:30: error: 'is_prime' was not declared in this scope\n\
    \    if (is_prime(word.length())) {\n                              ^\n/tmp/tmpu1ge51oo.cpp:31:28:\
    \ error: 'is_prime' was not declared in this scope\n  if (is_prime(word.length()))\
    \ {\n                            ^\n/tmp/tmpu1ge51oo.cpp: In function 'int main()':\n\
    /tmp/tmpu1ge51oo.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_in_sentence;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1ge51oo.cpp:2:\n/tmp/tmpu1ge51oo.cpp:38:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (isPrime(word.length())) {\n            result += word + \" \";\n  \
    \      }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi1sjuz9.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpoi1sjuz9.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpoi1sjuz9.cpp: In function 'int main()':\n/tmp/tmpoi1sjuz9.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoi1sjuz9.cpp:2:\n/tmp/tmpoi1sjuz9.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (word.length() == 2 || word.length() == 3 || word.length() ==\
    \ 5 || word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1b10ls7.cpp: In function 'int main()':\n/tmp/tmpt1b10ls7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1b10ls7.cpp:2:\n/tmp/tmpt1b10ls7.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspjt9iee.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpspjt9iee.cpp:22:38: error: 'isPrime' was not declared in this scope\n\
    \             if (isPrime(word.length())) {\n                                \
    \      ^\n/tmp/tmpspjt9iee.cpp:30:30: error: 'isPrime' was not declared in this\
    \ scope\n     if (isPrime(word.length())) {\n                              ^\n\
    /tmp/tmpspjt9iee.cpp: In function 'int main()':\n/tmp/tmpspjt9iee.cpp:36:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspjt9iee.cpp:2:\n/tmp/tmpspjt9iee.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      int len = word.length();\n        if (len == 1) {\n            result +=\
    \ word + \" \";\n            continue;\n        }\n        bool isPrime = true;\n\
    \        for (int i = 2; i <= len / 2; ++i) {\n            if (len % i == 0) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if (isPrime) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplramogcw.cpp: In function 'int main()':\n/tmp/tmplramogcw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplramogcw.cpp:2:\n/tmp/tmplramogcw.cpp:42:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::istringstream iss(sentence);\n  std::string word;\n  while (iss >> word)\
    \ {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n    }\n\
    \  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps_30vd40.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmps_30vd40.cpp:22:31: error: 'is_prime' was not declared in this scope\n\
    \     if (is_prime(word.length())) {\n                               ^\n/tmp/tmps_30vd40.cpp:\
    \ In function 'int main()':\n/tmp/tmps_30vd40.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps_30vd40.cpp:2:\n/tmp/tmps_30vd40.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (isPrime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz5mr29z.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpzz5mr29z.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpzz5mr29z.cpp: In function 'int main()':\n/tmp/tmpzz5mr29z.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzz5mr29z.cpp:2:\n/tmp/tmpzz5mr29z.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n\
    \    }\n  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumpiu035.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpumpiu035.cpp:22:31: error: 'is_prime' was not declared in this scope\n\
    \     if (is_prime(word.length())) {\n                               ^\n/tmp/tmpumpiu035.cpp:\
    \ In function 'int main()':\n/tmp/tmpumpiu035.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpumpiu035.cpp:2:\n/tmp/tmpumpiu035.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspjt9iee.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpspjt9iee.cpp:22:38: error: 'isPrime' was not declared in this scope\n\
    \             if (isPrime(word.length())) {\n                                \
    \      ^\n/tmp/tmpspjt9iee.cpp:30:30: error: 'isPrime' was not declared in this\
    \ scope\n     if (isPrime(word.length())) {\n                              ^\n\
    /tmp/tmpspjt9iee.cpp: In function 'int main()':\n/tmp/tmpspjt9iee.cpp:36:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspjt9iee.cpp:2:\n/tmp/tmpspjt9iee.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result = \"\";\n    while (ss >> word)\
    \ {\n        if (is_prime(word.length())) {\n            result += word + \" \"\
    ;\n        }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptiktuzrw.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmptiktuzrw.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmptiktuzrw.cpp: In function 'int main()':\n/tmp/tmptiktuzrw.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptiktuzrw.cpp:2:\n/tmp/tmptiktuzrw.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(temp.length()))\
    \ {\n                result += temp + \" \";\n            }\n            temp\
    \ = \"\";\n        } else {\n            temp += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(temp.length())) {\n        result += temp;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2cqcnfze.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp2cqcnfze.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(temp.length())) {\n                               \
    \        ^\n/tmp/tmp2cqcnfze.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(temp.length())) {\n                          \
    \     ^\n/tmp/tmp2cqcnfze.cpp: In function 'int main()':\n/tmp/tmp2cqcnfze.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2cqcnfze.cpp:2:\n/tmp/tmp2cqcnfze.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 1) {\n            result += word + \"\
    \ \";\n        } else {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                result\
    \ += word + \" \";\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmavr935.cpp: In function 'int main()':\n/tmp/tmpzmavr935.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzmavr935.cpp:2:\n/tmp/tmpzmavr935.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1 || words[i].length() == 2) {\n            result += words[i] + \" \";\n  \
    \      } else {\n            bool isPrime = true;\n            for (int j = 2;\
    \ j < words[i].length(); j++) {\n                if (words[i].length() % j ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                result\
    \ += words[i] + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplx_bef8a.cpp: In function 'int main()':\n/tmp/tmplx_bef8a.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx_bef8a.cpp:2:\n/tmp/tmplx_bef8a.cpp:50:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp509b6f8q.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp509b6f8q.cpp:26:12: error: 'std::string' has no member named 'pop_back'\n\
    \     result.pop_back();\n            ^\n/tmp/tmp509b6f8q.cpp: In function 'int\
    \ main()':\n/tmp/tmp509b6f8q.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_in_sentence;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp509b6f8q.cpp:2:\n/tmp/tmp509b6f8q.cpp:31:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool is_prime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptugsw91v.cpp: In function 'int main()':\n/tmp/tmptugsw91v.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptugsw91v.cpp:2:\n/tmp/tmptugsw91v.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (word.length() > 0)\
    \ {\n                if (is_prime(word.length())) {\n                    result\
    \ += word + \" \";\n                }\n                word = \"\";\n        \
    \    }\n        } else {\n            word += sentence[i];\n        }\n    }\n\
    \    if (word.length() > 0) {\n        if (is_prime(word.length())) {\n      \
    \      result += word;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlxfkudx.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpjlxfkudx.cpp:23:43: error: 'is_prime' was not declared in this scope\n\
    \                 if (is_prime(word.length())) {\n                           \
    \                ^\n/tmp/tmpjlxfkudx.cpp:33:35: error: 'is_prime' was not declared\
    \ in this scope\n         if (is_prime(word.length())) {\n                   \
    \                ^\n/tmp/tmpjlxfkudx.cpp: In function 'int main()':\n/tmp/tmpjlxfkudx.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjlxfkudx.cpp:2:\n/tmp/tmpjlxfkudx.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() > 1 && word.length() % 2 != 0) {\n      \
    \      bool isPrime = true;\n            for (int i = 3; i < word.length(); i\
    \ += 2) {\n                if (word.length() % i == 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                result += word + \" \";\n  \
    \          }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzx10lix8.cpp: In function 'int main()':\n/tmp/tmpzx10lix8.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzx10lix8.cpp:2:\n/tmp/tmpzx10lix8.cpp:39:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n\
    \    }\n  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumpiu035.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpumpiu035.cpp:22:31: error: 'is_prime' was not declared in this scope\n\
    \     if (is_prime(word.length())) {\n                               ^\n/tmp/tmpumpiu035.cpp:\
    \ In function 'int main()':\n/tmp/tmpumpiu035.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpumpiu035.cpp:2:\n/tmp/tmpumpiu035.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3u48j_c.cpp: In function 'int main()':\n/tmp/tmpf3u48j_c.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3u48j_c.cpp:2:\n/tmp/tmpf3u48j_c.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 1) {\n            result += word + \"\
    \ \";\n        } else {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                result\
    \ += word + \" \";\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmavr935.cpp: In function 'int main()':\n/tmp/tmpzmavr935.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzmavr935.cpp:2:\n/tmp/tmpzmavr935.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length() ==\
    \ 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp67ppay6m.cpp: In function 'int main()':\n/tmp/tmp67ppay6m.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp67ppay6m.cpp:2:\n/tmp/tmp67ppay6m.cpp:34:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 1) {\n            result += word + \" \";\n      \
    \  } else {\n            bool isPrime = true;\n            for (int i = 2; i <\
    \ word.length(); i++) {\n                if (word.length() % i == 0) {\n     \
    \               isPrime = false;\n                    break;\n               \
    \ }\n            }\n            if (isPrime) {\n                result += word\
    \ + \" \";\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplot_9r1i.cpp: In function 'int main()':\n/tmp/tmplot_9r1i.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplot_9r1i.cpp:2:\n/tmp/tmplot_9r1i.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3u48j_c.cpp: In function 'int main()':\n/tmp/tmpf3u48j_c.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3u48j_c.cpp:2:\n/tmp/tmpf3u48j_c.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result = \"\";\n    while (ss >> word)\
    \ {\n        if (is_prime(word.length())) {\n            result += word + \" \"\
    ;\n        }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptiktuzrw.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmptiktuzrw.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmptiktuzrw.cpp: In function 'int main()':\n/tmp/tmptiktuzrw.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptiktuzrw.cpp:2:\n/tmp/tmptiktuzrw.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    if (word.length() == 2 || word.length() == 3 || word.length() == 5 ||\
    \ word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzgo86v4.cpp: In function 'int main()':\n/tmp/tmpgzgo86v4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgzgo86v4.cpp:2:\n/tmp/tmpgzgo86v4.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1 || word.length() == 2) {\n  \
    \          result += word + \" \";\n        } else {\n            bool isPrime\
    \ = true;\n            for (int i = 2; i < word.length(); i++) {\n           \
    \     if (word.length() % i == 0) {\n                    isPrime = false;\n  \
    \                  break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0w_6zs5.cpp: In function 'int main()':\n/tmp/tmpm0w_6zs5.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm0w_6zs5.cpp:2:\n/tmp/tmpm0w_6zs5.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 1 || word.length() == 2) {\n         \
    \   result += word + \" \";\n        } else {\n            bool isPrime = true;\n\
    \            for (int i = 2; i < word.length(); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoa6x1y_n.cpp: In function 'int main()':\n/tmp/tmpoa6x1y_n.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoa6x1y_n.cpp:2:\n/tmp/tmpoa6x1y_n.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3u48j_c.cpp: In function 'int main()':\n/tmp/tmpf3u48j_c.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3u48j_c.cpp:2:\n/tmp/tmpf3u48j_c.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (isPrime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz5mr29z.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpzz5mr29z.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpzz5mr29z.cpp: In function 'int main()':\n/tmp/tmpzz5mr29z.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzz5mr29z.cpp:2:\n/tmp/tmpzz5mr29z.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 1) {\n            result += word + \" \";\n      \
    \  } else {\n            bool isPrime = true;\n            for (int i = 2; i <\
    \ word.length(); i++) {\n                if (word.length() % i == 0) {\n     \
    \               isPrime = false;\n                    break;\n               \
    \ }\n            }\n            if (isPrime) {\n                result += word\
    \ + \" \";\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplot_9r1i.cpp: In function 'int main()':\n/tmp/tmplot_9r1i.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplot_9r1i.cpp:2:\n/tmp/tmplot_9r1i.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    if (word.length() == 2 || word.length() == 3 || word.length() == 5 ||\
    \ word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzgo86v4.cpp: In function 'int main()':\n/tmp/tmpgzgo86v4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgzgo86v4.cpp:2:\n/tmp/tmpgzgo86v4.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::vector<std::string>\
    \ prime_words;\n    for (auto word : words) {\n        if (word.length() == 2\
    \ || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n     \
    \       prime_words.push_back(word);\n        }\n    }\n    std::string result\
    \ = \"\";\n    for (auto word : prime_words) {\n        result += word + \" \"\
    ;\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggqdp1dj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpggqdp1dj.cpp:25:15: error: 'word' does not name a type\n     for (auto\
    \ word : words) {\n               ^\n/tmp/tmpggqdp1dj.cpp:30:5: error: expected\
    \ ';' before 'std'\n     std::string result = \"\";\n     ^\n/tmp/tmpggqdp1dj.cpp:30:26:\
    \ error: could not convert 'result' from 'std::string {aka std::basic_string<char>}'\
    \ to 'bool'\n     std::string result = \"\";\n                          ^\n/tmp/tmpggqdp1dj.cpp:31:5:\
    \ error: expected primary-expression before 'for'\n     for (auto word : prime_words)\
    \ {\n     ^\n/tmp/tmpggqdp1dj.cpp:31:5: error: expected ')' before 'for'\n/tmp/tmpggqdp1dj.cpp:31:15:\
    \ error: 'word' does not name a type\n     for (auto word : prime_words) {\n \
    \              ^\n/tmp/tmpggqdp1dj.cpp:34:5: error: expected ';' before 'return'\n\
    \     return result;\n     ^\n/tmp/tmpggqdp1dj.cpp:34:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpggqdp1dj.cpp:34:5: error: expected ';' before 'return'\n\
    /tmp/tmpggqdp1dj.cpp:34:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpggqdp1dj.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmpggqdp1dj.cpp:\
    \ In function 'int main()':\n/tmp/tmpggqdp1dj.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpggqdp1dj.cpp:2:\n/tmp/tmpggqdp1dj.cpp:38:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (word.length() > 1)\
    \ {\n                bool isPrime = true;\n                for (int j = 2; j <\
    \ word.length(); j++) {\n                    if (word.length() % j == 0) {\n \
    \                       isPrime = false;\n                        break;\n   \
    \                 }\n                }\n                if (isPrime) {\n     \
    \               result += word + \" \";\n                }\n            }\n  \
    \          word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    if (word.length() > 1) {\n        bool isPrime = true;\n\
    \        for (int j = 2; j < word.length(); j++) {\n            if (word.length()\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime) {\n            result += word;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph55r6gnx.cpp: In function 'int main()':\n/tmp/tmph55r6gnx.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph55r6gnx.cpp:2:\n/tmp/tmph55r6gnx.cpp:55:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1 || word.length() == 2) {\n  \
    \          result += word + \" \";\n        } else {\n            bool isPrime\
    \ = true;\n            for (int i = 2; i < word.length(); i++) {\n           \
    \     if (word.length() % i == 0) {\n                    isPrime = false;\n  \
    \                  break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += word + \" \";\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm0w_6zs5.cpp: In function 'int main()':\n/tmp/tmpm0w_6zs5.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm0w_6zs5.cpp:2:\n/tmp/tmpm0w_6zs5.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    if (result.length() > 0) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2y3_36c.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpi2y3_36c.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpi2y3_36c.cpp:27:16: error: 'std::string' has no member named 'pop_back'\n\
    \         result.pop_back();\n                ^\n/tmp/tmpi2y3_36c.cpp: In function\
    \ 'int main()':\n/tmp/tmpi2y3_36c.cpp:32:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = words_in_sentence;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi2y3_36c.cpp:2:\n/tmp/tmpi2y3_36c.cpp:33:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n\
    \    }\n  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumpiu035.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpumpiu035.cpp:22:31: error: 'is_prime' was not declared in this scope\n\
    \     if (is_prime(word.length())) {\n                               ^\n/tmp/tmpumpiu035.cpp:\
    \ In function 'int main()':\n/tmp/tmpumpiu035.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpumpiu035.cpp:2:\n/tmp/tmpumpiu035.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspjt9iee.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpspjt9iee.cpp:22:38: error: 'isPrime' was not declared in this scope\n\
    \             if (isPrime(word.length())) {\n                                \
    \      ^\n/tmp/tmpspjt9iee.cpp:30:30: error: 'isPrime' was not declared in this\
    \ scope\n     if (isPrime(word.length())) {\n                              ^\n\
    /tmp/tmpspjt9iee.cpp: In function 'int main()':\n/tmp/tmpspjt9iee.cpp:36:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspjt9iee.cpp:2:\n/tmp/tmpspjt9iee.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (isPrime(word.length())) {\n            result += word + \" \";\n  \
    \      }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi1sjuz9.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpoi1sjuz9.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpoi1sjuz9.cpp: In function 'int main()':\n/tmp/tmpoi1sjuz9.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoi1sjuz9.cpp:2:\n/tmp/tmpoi1sjuz9.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 1 || word.length() == 2) {\n            result +=\
    \ word + \" \";\n        } else {\n            bool isPrime = true;\n        \
    \    for (int i = 2; i < word.length(); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr2xhaemb.cpp: In function 'int main()':\n/tmp/tmpr2xhaemb.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr2xhaemb.cpp:2:\n/tmp/tmpr2xhaemb.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (isPrime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz5mr29z.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpzz5mr29z.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpzz5mr29z.cpp: In function 'int main()':\n/tmp/tmpzz5mr29z.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzz5mr29z.cpp:2:\n/tmp/tmpzz5mr29z.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 1 || word.length() == 2) {\n         \
    \   result += word + \" \";\n        } else {\n            bool isPrime = true;\n\
    \            for (int i = 2; i < word.length(); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoa6x1y_n.cpp: In function 'int main()':\n/tmp/tmpoa6x1y_n.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoa6x1y_n.cpp:2:\n/tmp/tmpoa6x1y_n.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (is_prime(words[i].length()))\
    \ {\n            result += words[i] + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_2yv6hz.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpz_2yv6hz.cpp:26:39: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(words[i].length())) {\n                               \
    \        ^\n/tmp/tmpz_2yv6hz.cpp: In function 'int main()':\n/tmp/tmpz_2yv6hz.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz_2yv6hz.cpp:2:\n/tmp/tmpz_2yv6hz.cpp:34:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] +\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnl9h1h_i.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpnl9h1h_i.cpp:59:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:59:1: error: expected ';' before '}' token\n/tmp/tmpnl9h1h_i.cpp:60:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n\
    \    }\n  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumpiu035.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpumpiu035.cpp:22:31: error: 'is_prime' was not declared in this scope\n\
    \     if (is_prime(word.length())) {\n                               ^\n/tmp/tmpumpiu035.cpp:\
    \ In function 'int main()':\n/tmp/tmpumpiu035.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpumpiu035.cpp:2:\n/tmp/tmpumpiu035.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (int i = 0; i < sentence.size(); i++)\
    \ {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n \
    \           word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() ==\
    \ 1) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].size()\
    \ == 41) {\n            result += words[i] + \" \"\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0v4j8ke1.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp0v4j8ke1.cpp:59:1: error: expected ';' before '}' token\n }\n ^\n/tmp/tmp0v4j8ke1.cpp:60:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmp0v4j8ke1.cpp:69:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmp0v4j8ke1.cpp:69:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(temp.length()))\
    \ {\n                result += temp + \" \";\n            }\n            temp\
    \ = \"\";\n        } else {\n            temp += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(temp.length())) {\n        result += temp;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2cqcnfze.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp2cqcnfze.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(temp.length())) {\n                               \
    \        ^\n/tmp/tmp2cqcnfze.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(temp.length())) {\n                          \
    \     ^\n/tmp/tmp2cqcnfze.cpp: In function 'int main()':\n/tmp/tmp2cqcnfze.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2cqcnfze.cpp:2:\n/tmp/tmp2cqcnfze.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::string word = \"\";\n  for (int i = 0; i < sentence.length();\
    \ i++) {\n    if (sentence[i] == ' ') {\n      if (is_prime(word.length())) {\n\
    \        result += word + \" \";\n      }\n      word = \"\";\n    } else {\n\
    \      word += sentence[i];\n    }\n  }\n  if (is_prime(word.length())) {\n  \
    \  result += word;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvolh75c.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpdvolh75c.cpp:22:33: error: 'is_prime' was not declared in this scope\n\
    \       if (is_prime(word.length())) {\n                                 ^\n/tmp/tmpdvolh75c.cpp:30:29:\
    \ error: 'is_prime' was not declared in this scope\n   if (is_prime(word.length()))\
    \ {\n                             ^\n/tmp/tmpdvolh75c.cpp: In function 'int main()':\n\
    /tmp/tmpdvolh75c.cpp:36:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_in_sentence;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvolh75c.cpp:2:\n/tmp/tmpdvolh75c.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() > 1) {\n            bool isPrime = true;\n\
    \            for (int i = 2; i < word.length(); i++) {\n                if (word.length()\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm1ceqfs7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n\tstd::string result =\
    \ \"\";\n\tstd::stringstream ss(sentence);\n\tstd::string word;\n\twhile (ss >>\
    \ word) {\n\t\tif (word.length() == 2 || word.length() == 3 || word.length() ==\
    \ 5 || word.length() == 7) {\n\t\t\tresult += word + \" \";\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq0f6_gqc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747310
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::string word = \"\";\n  for (int i = 0; i < sentence.length();\
    \ i++) {\n    if (sentence[i] == ' ') {\n      if (is_prime(word.length())) {\n\
    \        result += word + \" \";\n      }\n      word = \"\";\n    } else {\n\
    \      word += sentence[i];\n    }\n  }\n  if (is_prime(word.length())) {\n  \
    \  result += word;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvolh75c.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpdvolh75c.cpp:22:33: error: 'is_prime' was not declared in this scope\n\
    \       if (is_prime(word.length())) {\n                                 ^\n/tmp/tmpdvolh75c.cpp:30:29:\
    \ error: 'is_prime' was not declared in this scope\n   if (is_prime(word.length()))\
    \ {\n                             ^\n/tmp/tmpdvolh75c.cpp: In function 'int main()':\n\
    /tmp/tmpdvolh75c.cpp:36:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = words_in_sentence;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvolh75c.cpp:2:\n/tmp/tmpdvolh75c.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (isPrime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz5mr29z.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpzz5mr29z.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpzz5mr29z.cpp: In function 'int main()':\n/tmp/tmpzz5mr29z.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzz5mr29z.cpp:2:\n/tmp/tmpzz5mr29z.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::stringstream ss(sentence);\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n\
    \    for (auto word : words) {\n        if (is_prime(word.length())) {\n     \
    \       result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj2u0fs2i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747310
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    if (result.length() > 0) {\n        result.pop_back();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4d8hawp4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length() ==\
    \ 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp67ppay6m.cpp: In function 'int main()':\n/tmp/tmp67ppay6m.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp67ppay6m.cpp:2:\n/tmp/tmp67ppay6m.cpp:34:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspjt9iee.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpspjt9iee.cpp:22:38: error: 'isPrime' was not declared in this scope\n\
    \             if (isPrime(word.length())) {\n                                \
    \      ^\n/tmp/tmpspjt9iee.cpp:30:30: error: 'isPrime' was not declared in this\
    \ scope\n     if (isPrime(word.length())) {\n                              ^\n\
    /tmp/tmpspjt9iee.cpp: In function 'int main()':\n/tmp/tmpspjt9iee.cpp:36:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspjt9iee.cpp:2:\n/tmp/tmpspjt9iee.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(temp.length()))\
    \ {\n                result += temp + \" \";\n            }\n            temp\
    \ = \"\";\n        } else {\n            temp += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(temp.length())) {\n        result += temp;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2cqcnfze.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp2cqcnfze.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(temp.length())) {\n                               \
    \        ^\n/tmp/tmp2cqcnfze.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(temp.length())) {\n                          \
    \     ^\n/tmp/tmp2cqcnfze.cpp: In function 'int main()':\n/tmp/tmp2cqcnfze.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2cqcnfze.cpp:2:\n/tmp/tmp2cqcnfze.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (word.length() == 2 || word.length() == 3 || word.length() ==\
    \ 5 || word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1b10ls7.cpp: In function 'int main()':\n/tmp/tmpt1b10ls7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1b10ls7.cpp:2:\n/tmp/tmpt1b10ls7.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::string result\
    \ = \"\";\n    for (std::string word : words) {\n        if (word.length() ==\
    \ 2 || word.length() == 3 || word.length() == 5 || word.length() == 7) {\n   \
    \         result += word + \" \";\n        }\n    }\n    return result.substr(0,\
    \ result.length() - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp40g3od67.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 1) {\n            result += word + \"\
    \ \";\n        } else {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                result\
    \ += word + \" \";\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmavr935.cpp: In function 'int main()':\n/tmp/tmpzmavr935.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzmavr935.cpp:2:\n/tmp/tmpzmavr935.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length() ==\
    \ 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3sohhtwp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string res = \"\
    \";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length()\
    \ == 1) {\n            res += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            res += words[i] + \" \";\n        } else {\n          \
    \  bool prime = true;\n            for (int j = 2; j < words[i].length(); j++)\
    \ {\n                if (words[i].length() % j == 0) {\n                    prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (prime) {\n                res += words[i] + \" \";\n           \
    \ }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n\
    \    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp09gmd9kg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::vector<std::string> words = split(sentence, ' ');\n    for\
    \ (int i = 0; i < words.size(); i++) {\n        if (is_prime(words[i].length()))\
    \ {\n            result += words[i] + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd4fiu7ov.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >>\
    \ word) {\n    if (word.length() == 2 || word.length() == 3 || word.length() ==\
    \ 5 || word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1b10ls7.cpp: In function 'int main()':\n/tmp/tmpt1b10ls7.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt1b10ls7.cpp:2:\n/tmp/tmpt1b10ls7.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(temp.length()))\
    \ {\n                result += temp + \" \";\n            }\n            temp\
    \ = \"\";\n        } else {\n            temp += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(temp.length())) {\n        result += temp;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpshfc4vcm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] +\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnl9h1h_i.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpnl9h1h_i.cpp:59:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:59:1: error: expected ';' before '}' token\n/tmp/tmpnl9h1h_i.cpp:60:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1 || words[i].length() == 2) {\n            result += words[i] + \" \";\n  \
    \      } else {\n            bool isPrime = true;\n            for (int j = 2;\
    \ j < words[i].length(); j++) {\n                if (words[i].length() % j ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                result\
    \ += words[i] + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplx_bef8a.cpp: In function 'int main()':\n/tmp/tmplx_bef8a.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx_bef8a.cpp:2:\n/tmp/tmplx_bef8a.cpp:50:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result = \"\";\n    while (ss >> word)\
    \ {\n        if (word.length() == 2 || word.length() == 3 || word.length() ==\
    \ 5 || word.length() == 7) {\n            result += word + \" \";\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa8txyh0o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result = \"\";\n    while (ss >> word)\
    \ {\n        if (isPrime(word.length())) {\n            result += word + \" \"\
    ;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n\
    \    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb79fruka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n  \
    \  std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length()\
    \ == 1) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 43) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 47) {\n\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5yx5c15x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747310
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    for (int i = 0; i < sentence.size(); i++)\
    \ {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n \
    \           word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() ==\
    \ 2 || words[i].size() == 3 || words[i].size() == 5 || words[i].size() == 7) {\n\
    \            result += words[i] + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfzhew4je.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    if (word.length() == 2 || word.length() == 3 || word.length() == 5 ||\
    \ word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzgo86v4.cpp: In function 'int main()':\n/tmp/tmpgzgo86v4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgzgo86v4.cpp:2:\n/tmp/tmpgzgo86v4.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::vector<std::string> words;\n    while (ss >>\
    \ word) {\n        words.push_back(word);\n    }\n    std::vector<int> primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97};\n    std::string result;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        if (std::find(primes.begin(), primes.end(), words[i].size())\
    \ != primes.end()) {\n            result += words[i] + \" \";\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4g1qqrjv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length()\
    \ == 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6h5pv83l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3u48j_c.cpp: In function 'int main()':\n/tmp/tmpf3u48j_c.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3u48j_c.cpp:2:\n/tmp/tmpf3u48j_c.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95p3uptu.cpp: In function 'int main()':\n/tmp/tmp95p3uptu.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp95p3uptu.cpp:2:\n/tmp/tmp95p3uptu.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::vector<std::string> words;\n  std::string word = \"\";\n  for\
    \ (int i = 0; i < sentence.length(); i++) {\n    if (sentence[i] == ' ') {\n \
    \     words.push_back(word);\n      word = \"\";\n    } else {\n      word +=\
    \ sentence[i];\n    }\n  }\n  words.push_back(word);\n  for (int i = 0; i < words.size();\
    \ i++) {\n    if (words[i].length() == 1) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 2) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 3) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 5) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 7) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 11) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 13) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 17) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 19) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 23) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 29) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 31) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 37) {\n      result += words[i] + \" \"\
    ;\n    } else if (words[i].length() == 41) {\n      result += words[i] +\n}\n\
    int main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdsyjepug.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        if (temp.length() > 1 && temp.length() % 2 != 0) {\n\
    \            bool isPrime = true;\n            for (int i = 3; i < temp.length();\
    \ i += 2) {\n                if (temp.length() % i == 0) {\n                 \
    \   isPrime = false;\n                    break;\n                }\n        \
    \    }\n            if (isPrime) {\n                result += temp + \" \";\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjdfcr5af.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (word.length() == 2 || word.length() == 3 || word.length() == 5 || word.length()\
    \ == 7) {\n            result += word + \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_an3ffs.cpp: In function 'int main()':\n/tmp/tmp2_an3ffs.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2_an3ffs.cpp:2:\n/tmp/tmp2_an3ffs.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (isPrime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (isPrime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspjt9iee.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpspjt9iee.cpp:22:38: error: 'isPrime' was not declared in this scope\n\
    \             if (isPrime(word.length())) {\n                                \
    \      ^\n/tmp/tmpspjt9iee.cpp:30:30: error: 'isPrime' was not declared in this\
    \ scope\n     if (isPrime(word.length())) {\n                              ^\n\
    /tmp/tmpspjt9iee.cpp: In function 'int main()':\n/tmp/tmpspjt9iee.cpp:36:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspjt9iee.cpp:2:\n/tmp/tmpspjt9iee.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    if (is_prime(word.length())) {\n      result += word + \" \";\n    }\n\
    \  }\n  return result.substr(0, result.length() - 1);\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp23xk4bgk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            if (is_prime(word.length()))\
    \ {\n                result += word + \" \";\n            }\n            word\
    \ = \"\";\n        } else {\n            word += sentence[i];\n        }\n   \
    \ }\n    if (is_prime(word.length())) {\n        result += word;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85acm9tf.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp85acm9tf.cpp:22:39: error: 'is_prime' was not declared in this scope\n\
    \             if (is_prime(word.length())) {\n                               \
    \        ^\n/tmp/tmp85acm9tf.cpp:30:31: error: 'is_prime' was not declared in\
    \ this scope\n     if (is_prime(word.length())) {\n                          \
    \     ^\n/tmp/tmp85acm9tf.cpp: In function 'int main()':\n/tmp/tmp85acm9tf.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85acm9tf.cpp:2:\n/tmp/tmp85acm9tf.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result;\n\
    \  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word)\
    \ {\n    if (word.length() == 2 || word.length() == 3 || word.length() == 5 ||\
    \ word.length() == 7) {\n      result += word + \" \";\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzgo86v4.cpp: In function 'int main()':\n/tmp/tmpgzgo86v4.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgzgo86v4.cpp:2:\n/tmp/tmpgzgo86v4.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (word.length() == 1) {\n            result += word\
    \ + \" \";\n        } else {\n            bool isPrime = true;\n            for\
    \ (int i = 2; i < word.length(); i++) {\n                if (word.length() % i\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word + \" \";\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3u48j_c.cpp: In function 'int main()':\n/tmp/tmpf3u48j_c.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf3u48j_c.cpp:2:\n/tmp/tmpf3u48j_c.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n\
    \    }\n    for (int i = 0; i < words.size(); i++) {\n        int length = words[i].length();\n\
    \        if (length == 1) {\n            result += words[i] + \" \";\n       \
    \ } else {\n            bool isPrime = true;\n            for (int j = 2; j <\
    \ length; j++) {\n                if (length % j == 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                result += words[i] + \" \";\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_a6fqhcp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (is_prime(word.length())) {\n            result += word + \" \";\n \
    \       }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcllf_ycj.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcllf_ycj.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcllf_ycj.cpp: In function 'int main()':\n/tmp/tmpcllf_ycj.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcllf_ycj.cpp:2:\n/tmp/tmpcllf_ycj.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n  std::string result =\
    \ \"\";\n  std::string word = \"\";\n  for (int i = 0; i < sentence.length();\
    \ i++) {\n    if (sentence[i] == ' ') {\n      if (isPrime(word.length())) {\n\
    \        result += word + \" \";\n      }\n      word = \"\";\n    } else {\n\
    \      word += sentence[i];\n    }\n  }\n  if (isPrime(word.length())) {\n   \
    \ result += word;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplp9lbiie.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n\
    \    std::string word;\n    std::string result;\n    while (ss >> word) {\n  \
    \      if (isPrime(word.length())) {\n            result += word + \" \";\n  \
    \      }\n    }\n    return result.substr(0, result.length() - 1);\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi1sjuz9.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpoi1sjuz9.cpp:22:34: error: 'isPrime' was not declared in this scope\n\
    \         if (isPrime(word.length())) {\n                                  ^\n\
    /tmp/tmpoi1sjuz9.cpp: In function 'int main()':\n/tmp/tmpoi1sjuz9.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoi1sjuz9.cpp:2:\n/tmp/tmpoi1sjuz9.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (word.length() == 2 || word.length() == 3 || word.length()\
    \ == 5 || word.length() == 7) {\n            result += word + \" \";\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpioggb_jy.cpp: In function 'int main()':\n/tmp/tmpioggb_jy.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpioggb_jy.cpp:2:\n/tmp/tmpioggb_jy.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    // your code here\n\
    \    std::string result = \"\";\n    std::stringstream ss(sentence);\n    std::string\
    \ word;\n    while(ss >> word){\n        if(isPrime(word.length())){\n       \
    \     result += word + \" \";\n        }\n    }\n    result.pop_back();\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5zaic73s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += sentence[i];\n\
    \        }\n    }\n    words.push_back(word);\n    std::string result = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 1) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 2) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 3) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 5) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 7) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 11) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 13) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 17) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 19) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 23) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 29) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 31) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 37) {\n            result += words[i] + \" \";\n        } else if (words[i].length()\
    \ == 41) {\n            result += words[i] +\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnl9h1h_i.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpnl9h1h_i.cpp:59:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:59:1: error: expected ';' before '}' token\n/tmp/tmpnl9h1h_i.cpp:60:12:\
    \ error: a function-definition is not allowed here before '{' token\n int main()\
    \ {\n            ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpnl9h1h_i.cpp:69:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::stringstream ss(sentence);\n    while\
    \ (ss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].length() ==\
    \ 2 || words[i].length() == 3 || words[i].length() == 5 || words[i].length() ==\
    \ 7) {\n            result += words[i] + \" \";\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr21p51bt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >>\
    \ word) {\n        if (is_prime(word.length())) {\n            result += word\
    \ + \" \";\n        }\n    }\n    return result.substr(0, result.length() - 1);\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrq1wf4p.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpcrq1wf4p.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpcrq1wf4p.cpp: In function 'int main()':\n/tmp/tmpcrq1wf4p.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcrq1wf4p.cpp:2:\n/tmp/tmpcrq1wf4p.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result\
    \ = \"\";\n    std::stringstream ss(sentence);\n    std::string word;\n    while\
    \ (ss >> word) {\n        if (is_prime(word.length())) {\n            result +=\
    \ word + \" \";\n        }\n    }\n    return result.substr(0, result.length()\
    \ - 1);\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxqzr5_4_.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpxqzr5_4_.cpp:22:35: error: 'is_prime' was not declared in this scope\n\
    \         if (is_prime(word.length())) {\n                                   ^\n\
    /tmp/tmpxqzr5_4_.cpp: In function 'int main()':\n/tmp/tmpxqzr5_4_.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxqzr5_4_.cpp:2:\n/tmp/tmpxqzr5_4_.cpp:30:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
