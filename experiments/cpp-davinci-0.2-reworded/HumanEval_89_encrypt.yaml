name: HumanEval_89_encrypt
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt\
  \ that takes a string as an argument and\n// returns a string encrypted with the\
  \ alphabet being rotated. \n// The alphabet should be rotated in a manner such that\
  \ the letters \n// shift down by two multiplied to two places.\n// For example:\n\
  // >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\"\
  )\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\n\
  std::string encrypt(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\"\
  )) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n \
  \   assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) ==\
  \ (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n\
  \    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  ));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n"
completions: ["    std::string result = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n      \
    \      c += 2;\n            if (c > 'z') {\n                c -= 26;\n       \
    \     }\n        }\n        result += c;\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result +=\
    \ s[i] + 2 * 2;\n    }\n    return result;", "    std::string result = \"\";\n\
    \    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2 * 2;\n\
    \    }\n    return result;", "  std::string result = \"\";\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    result += s[i] + 2 * 2;\n  }\n  return result;",
  "  std::string result = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    result\
    \ += (char)(s[i] + 2 * 2);\n  }\n  return result;", "    std::string result =\
    \ \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += (char)(s[i]\
    \ + 2*2);\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'z') {\n           \
    \ result += 'b';\n        } else if (s[i] == 'y') {\n            result += 'a';\n\
    \        } else {\n            result += s[i] + 2;\n        }\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n      \
    \      c += 2;\n            if (c > 'z') {\n                c -= 26;\n       \
    \     }\n        }\n        result += c;\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result +=\
    \ (char)(s[i] + 2*2);\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2 * 2;\n\
    \    }\n    return result;", "\tstd::string result = \"\";\n\tfor (int i = 0;\
    \ i < s.length(); i++) {\n\t\tchar c = s[i];\n\t\tif (c >= 'a' && c <= 'z') {\n\
    \t\t\tc += 2;\n\t\t\tif (c > 'z') {\n\t\t\t\tc -= 26;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if (c >= 'A' && c <= 'Z') {\n\t\t\tc += 2;\n\t\t\tif (c > 'Z') {\n\t\t\t\tc\
    \ -= 26;\n\t\t\t}\n\t\t}\n\t\tresult += c;\n\t}\n\treturn result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result +=\
    \ (char)(s[i] + 2 * 2);\n    }\n    return result;", "\tstd::string result = \"\
    \";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'z') {\n\t\t\t\
    result += 'b';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\tresult += 'a';\n\t\t\
    }\n\t\telse {\n\t\t\tresult += s[i] + 2;\n\t\t}\n\t}\n\treturn result;", "   \
    \ std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (s[i] == 'z') {\n            result += 'b';\n        } else if (s[i]\
    \ == 'y') {\n            result += 'a';\n        } else {\n            result\
    \ += s[i] + 2;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        result += (char)(((int)s[i]\
    \ - 97 + 2 * 2) % 26 + 97);\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i]\
    \ + 2 * 2;\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2 * 2;\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z')\
    \ {\n            if (c >= 'x') {\n                c = c - 24;\n            } else\
    \ if (c >= 'v') {\n                c = c - 22;\n            } else {\n       \
    \         c = c + 4;\n            }\n        }\n        result += c;\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] == 'z') {\n            result += 'b';\n\
    \        } else if (s[i] == 'y') {\n            result += 'a';\n        } else\
    \ {\n            result += s[i] + 2;\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n \
    \       char c = s[i];\n        int ascii = (int)c;\n        if (ascii >= 97 &&\
    \ ascii <= 122) {\n            if (ascii + 2 > 122) {\n                ascii =\
    \ 97 + (ascii + 2 - 123);\n            } else {\n                ascii += 2;\n\
    \            }\n        } else if (ascii >= 65 && ascii <= 90) {\n           \
    \ if (ascii + 2 > 90) {\n                ascii = 65 + (ascii + 2 - 91);\n    \
    \        } else {\n                ascii += 2;\n            }\n        }\n   \
    \     result += (char)ascii;\n    }\n    return result;"]
stop_tokens:
- "\n}"
