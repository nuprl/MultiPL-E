name: HumanEval_87_get_row
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
  \ data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n\
  // each row may contain a different number of columns.\n// Given lst, and integer\
  \ x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1),\
  \ (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort\
  \ coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
  \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
  \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
  \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
  \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
  \ lst, long x) {\n"
tests: "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
  \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
  \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
  \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
  \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
  \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
  \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
  \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
  \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
  \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
  \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
  \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
  \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
  \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
  \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
  \ long>)std::make_tuple(2, 2)})));\n}\n"
completions: ["    std::vector<std::tuple<long, long>> res;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n  \
    \          if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ != std::get<0>(b)) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        } else {\n            return std::get<1>(a) > std::get<1>(b);\n     \
    \   }\n    });\n    return res;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "    std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n        if (std::get<0>(a) ==\
    \ std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n   \
    \     }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (int i = 0; i < result.size(); i++) {\n\
    \        for (int j = i + 1; j < result.size(); j++) {\n            if (std::get<0>(result[i])\
    \ == std::get<0>(result[j])) {\n                if (std::get<1>(result[i]) < std::get<1>(result[j]))\
    \ {\n                    std::swap(result[i], result[j]);\n                }\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) == std::get<0>(b)\
    \ && std::get<1>(a) > std::get<1>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> result;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        if (std::get<0>(t1)\
    \ == std::get<0>(t2)) {\n            return std::get<1>(t1) > std::get<1>(t2);\n\
    \        }\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "\tstd::vector<std::tuple<long, long>> result;\n\t// your code here\n\tfor (int\
    \ i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\
    \t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i, j));\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> res;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n        if (std::get<0>(a) ==\
    \ std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n   \
    \     }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return\
    \ true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n\
    \        }\n    });\n    return res;", "  std::vector<std::tuple<long, long>>\
    \ result;\n  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0; j <\
    \ lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        result.push_back(std::make_tuple(i,\
    \ j));\n      }\n    }\n  }\n  std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n    if (std::get<0>(a) == std::get<0>(b))\
    \ {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a)\
    \ < std::get<0>(b);\n  });\n  return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) < std::get<0>(b)) {\n            return\
    \ true;\n        } else if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        } else {\n            return false;\n\
    \        }\n    });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j =\
    \ 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n          \
    \      result.push_back(std::make_tuple(i, j));\n            }\n        }\n  \
    \  }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long> a,\
    \ std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n\
    \            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        if (std::get<0>(a) ==\
    \ std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n   \
    \     }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "\tstd::vector<std::tuple<long,\
    \ long>> res;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j\
    \ < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> ans;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        ans.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(ans.begin(), ans.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return ans;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(result.begin(), result.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<1>(a) > std::get<1>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) < std::get<0>(b))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\telse if (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\tif (std::get<1>(a) > std::get<1>(b)) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t});\n\treturn result;", "    std::vector<std::tuple<long, long>>\
    \ result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0;\
    \ j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n             \
    \   result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0;\
    \ j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return result;", "    std::vector<std::tuple<long, long>> res;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a)\
    \ > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size();\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "    std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back(std::make_tuple(i, j));\n            }\n        }\n \
    \   }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) == std::get<0>(b)\
    \ && std::get<1>(a) > std::get<1>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j =\
    \ 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (int i = 0; i < result.size(); i++) {\n        for (int j =\
    \ i + 1; j < result.size(); j++) {\n            if (std::get<0>(result[i]) ==\
    \ std::get<0>(result[j])) {\n                if (std::get<1>(result[i]) < std::get<1>(result[j]))\
    \ {\n                    std::swap(result[i], result[j]);\n                }\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) != std::get<0>(b))\
    \ {\n            return std::get<0>(a) < std::get<0>(b);\n        } else {\n \
    \           return std::get<1>(a) > std::get<1>(b);\n        }\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> res;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++)\
    \ {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ < std::get<0>(b)) {\n            return true;\n        } else if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        } else {\n            return false;\n        }\n    });\n    return result;",
  "    std::vector<std::tuple<long, long>> result;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const\
    \ std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    for (int i = 0; i < result.size();\
    \ i++) {\n        for (int j = i + 1; j < result.size(); j++) {\n            if\
    \ (std::get<0>(result[i]) == std::get<0>(result[j])) {\n                if (std::get<1>(result[i])\
    \ < std::get<1>(result[j])) {\n                    std::swap(result[i], result[j]);\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]\
    \ == x) {\n                result.push_back(std::make_tuple(i, j));\n        \
    \    }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j\
    \ = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n        \
    \        res.push_back(std::make_tuple(i, j));\n            }\n        }\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return\
    \ std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "\tstd::vector<std::tuple<long,\
    \ long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j =\
    \ 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tresult.push_back(std::make_tuple(i,\
    \ j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n\t\tif (std::get<0>(a) == std::get<0>(b))\
    \ {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a)\
    \ < std::get<0>(b);\n\t});\n\treturn result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) < std::get<0>(b))\
    \ {\n            return true;\n        } else if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        } else {\n \
    \           return false;\n        }\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) != std::get<0>(b))\
    \ {\n            return std::get<0>(a) < std::get<0>(b);\n        } else {\n \
    \           return std::get<1>(a) > std::get<1>(b);\n        }\n    });\n    return\
    \ result;", "    std::vector<std::tuple<long, long>> result;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n\
    \            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        if (std::get<0>(a)\
    \ == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return\
    \ result;", "  std::vector<std::tuple<long, long>> res;\n  for (long i = 0; i\
    \ < lst.size(); i++) {\n    for (long j = 0; j < lst[i].size(); j++) {\n     \
    \ if (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i, j));\n     \
    \ }\n    }\n  }\n  std::sort(res.begin(), res.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n\
    \      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a)\
    \ < std::get<0>(b);\n  });\n  return res;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;", "    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long\
    \ j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n      \
    \          result.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    std::sort(result.begin(), result.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        if (std::get<0>(a) == std::get<0>(b))\
    \ {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    return result;"]
stop_tokens:
- "\n}"
