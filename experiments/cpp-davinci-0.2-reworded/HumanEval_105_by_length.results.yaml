language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n            res.push_back(map[i]);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcfttknr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpmcfttknr.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpmcfttknr.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(res.begin(), res.end());\n\
    \     ^\n/tmp/tmpmcfttknr.cpp:32:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(res.begin(),\
    \ res.end());\n                                     ^\n/tmp/tmpmcfttknr.cpp:33:41:\
    \ error: expected ')' before ';' token\n     std::reverse(res.begin(), res.end());\n\
    \                                         ^\n/tmp/tmpmcfttknr.cpp: In function\
    \ 'int main()':\n/tmp/tmpmcfttknr.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmcfttknr.cpp:2:\n/tmp/tmpmcfttknr.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpmcfttknr.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vecto"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    for (auto i : sorted) {\n        switch (i) {\n        \
    \    case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvx9ntmt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpyvx9ntmt.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpyvx9ntmt.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(sorted.begin(), sorted.end());\n\
    \     ^\n/tmp/tmpyvx9ntmt.cpp:23:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(sorted.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), sorted.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(sorted.begin(),\
    \ sorted.end());\n                                           ^\n/tmp/tmpyvx9ntmt.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : sorted)\
    \ {\n     ^\n/tmp/tmpyvx9ntmt.cpp:24:5: error: expected ')' before 'for'\n/tmp/tmpyvx9ntmt.cpp:24:15:\
    \ error: 'i' does not name a type\n     for (auto i : sorted) {\n            \
    \   ^\n/tmp/tmpyvx9ntmt.cpp:55:5: error: expected ';' before 'std'\n     std::reverse(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpyvx9ntmt.cpp:55:46: error: could not convert\
    \ 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::reverse(result.begin(), result.end());\n\
    \                                              ^\n/tmp/tmpyvx9ntmt.cpp:56:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpyvx9ntmt.cpp:56:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpyvx9ntmt.cpp: In function 'int\
    \ main()':\n/tmp/tmpyvx9ntmt.cpp:59:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (auto i : arr)\
    \ {\n    if (i >= 1 && i <= 9) {\n      result.push_back(map[i]);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1d5qnz74.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp1d5qnz74.cpp:27:13: error: 'i'\
    \ does not name a type\n   for (auto i : arr) {\n             ^\n/tmp/tmp1d5qnz74.cpp:32:3:\
    \ error: expected ';' before 'std'\n   std::sort(result.begin(), result.end());\n\
    \   ^\n/tmp/tmp1d5qnz74.cpp:32:41: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n   std::sort(result.begin(),\
    \ result.end());\n                                         ^\n/tmp/tmp1d5qnz74.cpp:33:45:\
    \ error: expected ')' before ';' token\n   std::reverse(result.begin(), result.end());\n\
    \                                             ^\n/tmp/tmp1d5qnz74.cpp: In function\
    \ 'int main()':\n/tmp/tmp1d5qnz74.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1d5qnz74.cpp:2:\n/tmp/tmp1d5qnz74.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp1d5qnz74.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> tmp;\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            tmp.push_back(i);\n        }\n    }\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    std::reverse(tmp.begin(), tmp.end());\n    for (auto i : tmp)\
    \ {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmm_82z4k.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpmm_82z4k.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpmm_82z4k.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(tmp.begin(), tmp.end());\n\
    \     ^\n/tmp/tmpmm_82z4k.cpp:23:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(tmp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), tmp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(tmp.begin(), tmp.end());\n\
    \                                     ^\n/tmp/tmpmm_82z4k.cpp:24:41: error: expected\
    \ ')' before ';' token\n     std::reverse(tmp.begin(), tmp.end());\n         \
    \                                ^\n/tmp/tmpmm_82z4k.cpp:25:15: error: 'i' does\
    \ not name a type\n     for (auto i : tmp) {\n               ^\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpmm_82z4k.cpp: In function 'int main()':\n/tmp/tmpmm_82z4k.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmm_82z4k.cpp:2:\n/tmp/tmpmm_82z4k.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3,\
    \ \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"\
    Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"\
    },\n    };\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr) {\n\
    \        if (m.find(i) != m.end()) {\n            res.push_back(m[i]);\n     \
    \   }\n    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2aamnaxj.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2aamnaxj.cpp:27:5: error: in C++98\
    \ 'm' must be initialized by constructor, not by '{...}'\n     };\n     ^\n/tmp/tmp2aamnaxj.cpp:27:5:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2aamnaxj.cpp:27:5: error: could not convert '{{1,\
    \ \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"\
    Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}}' from '<brace-enclosed\
    \ initializer list>' to 'std::map<long int, std::basic_string<char> >'\n/tmp/tmp2aamnaxj.cpp:29:15:\
    \ error: 'i' does not name a type\n     for (auto i : arr) {\n               ^\n\
    /tmp/tmp2aamnaxj.cpp:34:5: error: expected ';' before 'std'\n     std::reverse(res.begin(),\
    \ res.end());\n     ^\n/tmp/tmp2aamnaxj.cpp:34:40: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp2aamnaxj.cpp:35:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp2aamnaxj.cpp:35:5: error: expected ')' before 'return'\n/tmp/tmp2aamnaxj.cpp:\
    \ In function 'int main()':\n/tmp/tmp2aamnaxj.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2aamnaxj.cpp:2:\n/tmp/tmp2aamnaxj.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (lo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            res.push_back(map[arr[i]]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkva_9gvr.cpp: In function 'int main()':\n/tmp/tmpkva_9gvr.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkva_9gvr.cpp:2:\n/tmp/tmpkva_9gvr.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpkva_9gvr.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpkva_9gvr.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkva_9gvr.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkva_9gvr.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkva_9gvr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<std::string> digits = {\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(digits[i - 1]);\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpks218uh5.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpks218uh5.cpp:17:110: error: in\
    \ C++98 'digits' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ digits = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                          ^\n/tmp/tmpks218uh5.cpp:17:110:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpks218uh5.cpp:19:15:\
    \ error: 'i' does not name a type\n     for (auto i : arr) {\n               ^\n\
    /tmp/tmpks218uh5.cpp:24:5: error: expected ';' before 'std'\n     std::reverse(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpks218uh5.cpp:24:46: error: could not convert\
    \ 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::reverse(result.begin(), result.end());\n\
    \                                              ^\n/tmp/tmpks218uh5.cpp:25:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpks218uh5.cpp:25:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpks218uh5.cpp: In function 'int\
    \ main()':\n/tmp/tmpks218uh5.cpp:28:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpks218uh5.cpp:2:\n/tmp/tmpks218uh5.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeya0ctc_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpeya0ctc_.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpeya0ctc_.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpeya0ctc_.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpeya0ctc_.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpeya0ctc_.cpp: In function\
    \ 'int main()':\n/tmp/tmpeya0ctc_.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeya0ctc_.cpp:2:\n/tmp/tmpeya0ctc_.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpeya0ctc_.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> tmp;\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            tmp.push_back(i);\n        }\n    }\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    std::reverse(tmp.begin(), tmp.end());\n    for (auto i : tmp)\
    \ {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmm_82z4k.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpmm_82z4k.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpmm_82z4k.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(tmp.begin(), tmp.end());\n\
    \     ^\n/tmp/tmpmm_82z4k.cpp:23:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(tmp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), tmp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(tmp.begin(), tmp.end());\n\
    \                                     ^\n/tmp/tmpmm_82z4k.cpp:24:41: error: expected\
    \ ')' before ';' token\n     std::reverse(tmp.begin(), tmp.end());\n         \
    \                                ^\n/tmp/tmpmm_82z4k.cpp:25:15: error: 'i' does\
    \ not name a type\n     for (auto i : tmp) {\n               ^\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpmm_82z4k.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpmm_82z4k.cpp: In function 'int main()':\n/tmp/tmpmm_82z4k.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmm_82z4k.cpp:2:\n/tmp/tmpmm_82z4k.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr) {\n        if(i > 0 && i <\
    \ 10) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp) {\n        switch(i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnd_ujp14.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpnd_ujp14.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i : arr) {\n              ^\n/tmp/tmpnd_ujp14.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpnd_ujp14.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpnd_ujp14.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmpnd_ujp14.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i : temp) {\n              ^\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpnd_ujp14.cpp: In function 'int main()':\n/tmp/tmpnd_ujp14.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnd_ujp14.cpp:2:\n/tmp/tmpnd_ujp14.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\","
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> dict = {\n        {1, \"One\"},\n        {2, \"\
    Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"\
    },\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n\
    \        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for\
    \ (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        if (dict.find(*it)\
    \ != dict.end()) {\n            result.push_back(dict[*it]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrqv8cy3.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpkrqv8cy3.cpp:27:5: error: in C++98\
    \ 'dict' must be initialized by constructor, not by '{...}'\n     };\n     ^\n\
    /tmp/tmpkrqv8cy3.cpp:27:5: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkrqv8cy3.cpp:27:5:\
    \ error: could not convert '{{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"\
    Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"\
    }}' from '<brace-enclosed initializer list>' to 'std::map<long int, std::basic_string<char>\
    \ >'\n/tmp/tmpkrqv8cy3.cpp:29:15: error: 'it' does not name a type\n     for (auto\
    \ it = arr.rbegin(); it != arr.rend(); ++it) {\n               ^\n/tmp/tmpkrqv8cy3.cpp:29:34:\
    \ error: expected ';' before 'it'\n     for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n                                  ^\n/tmp/tmpkrqv8cy3.cpp:29:34: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpkrqv8cy3.cpp: In function 'int\
    \ main()':\n/tmp/tmpkrqv8cy3.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkrqv8cy3.cpp:2:\n/tmp/tmpkrqv8cy3.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpkrqv8cy3.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i == 1) {\n            res.push_back(\"One\");\n        } else\
    \ if (i == 2) {\n            res.push_back(\"Two\");\n        } else if (i ==\
    \ 3) {\n            res.push_back(\"Three\");\n        } else if (i == 4) {\n\
    \            res.push_back(\"Four\");\n        } else if (i == 5) {\n        \
    \    res.push_back(\"Five\");\n        } else if (i == 6) {\n            res.push_back(\"\
    Six\");\n        } else if (i == 7) {\n            res.push_back(\"Seven\");\n\
    \        } else if (i == 8) {\n            res.push_back(\"Eight\");\n       \
    \ } else if (i == 9) {\n            res.push_back(\"Nine\");\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9y0ifd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2j9y0ifd.cpp:19:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp2j9y0ifd.cpp: In function 'int main()':\n/tmp/tmp2j9y0ifd.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9y0ifd.cpp:2:\n/tmp/tmp2j9y0ifd.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2j9y0ifd.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp2j9y0ifd.cpp:44:113:\
    \ warning: extended initializer list"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin(); it !=\
    \ arr.rend(); ++it) {\n        switch (*it) {\n            case 1:\n         \
    \       result.push_back(\"One\");\n                break;\n            case 2:\n\
    \                result.push_back(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push_back(\"Three\");\n                break;\n\
    \            case 4:\n                result.push_back(\"Four\");\n          \
    \      break;\n            case 5:\n                result.push_back(\"Five\"\
    );\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwveru0uo.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpwveru0uo.cpp:18:15: error: 'it'\
    \ does not name a type\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it)\
    \ {\n               ^\n/tmp/tmpwveru0uo.cpp:18:34: error: expected ';' before\
    \ 'it'\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        \
    \                          ^\n/tmp/tmpwveru0uo.cpp:18:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpwveru0uo.cpp: In function 'int main()':\n/tmp/tmpwveru0uo.cpp:54:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwveru0uo.cpp:2:\n/tmp/tmpwveru0uo.cpp:55:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpwveru0uo.cpp:55:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpwveru0uo.cpp:55:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwveru0uo.cpp:55:113: error: n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin(); i != arr.rend();\
    \ ++i) {\n        if (*i == 1) {\n            result.push_back(\"One\");\n   \
    \     } else if (*i == 2) {\n            result.push_back(\"Two\");\n        }\
    \ else if (*i == 3) {\n            result.push_back(\"Three\");\n        } else\
    \ if (*i == 4) {\n            result.push_back(\"Four\");\n        } else if (*i\
    \ == 5) {\n            result.push_back(\"Five\");\n        } else if (*i == 6)\
    \ {\n            result.push_back(\"Six\");\n        } else if (*i == 7) {\n \
    \           result.push_back(\"Seven\");\n        } else if (*i == 8) {\n    \
    \        result.push_back(\"Eight\");\n        } else if (*i == 9) {\n       \
    \     result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pe1zx_b.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp4pe1zx_b.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); ++i)\
    \ {\n               ^\n/tmp/tmp4pe1zx_b.cpp:18:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); ++i) {\n            \
    \                     ^\n/tmp/tmp4pe1zx_b.cpp:18:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmp4pe1zx_b.cpp: In function 'int main()':\n/tmp/tmp4pe1zx_b.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4pe1zx_b.cpp:2:\n/tmp/tmp4pe1zx_b.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp4pe1zx_b.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp4pe1zx_b.cpp:43:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4pe1zx_b.cpp:43:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr) {\n        if(i > 0 && i <\
    \ 10) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp) {\n        switch(i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnd_ujp14.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpnd_ujp14.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i : arr) {\n              ^\n/tmp/tmpnd_ujp14.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpnd_ujp14.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpnd_ujp14.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmpnd_ujp14.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i : temp) {\n              ^\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpnd_ujp14.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpnd_ujp14.cpp: In function 'int main()':\n/tmp/tmpnd_ujp14.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnd_ujp14.cpp:2:\n/tmp/tmpnd_ujp14.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\","
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n        \
    \    res.push_back(m[arr[i]]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbj3dq21.cpp: In function 'int main()':\n/tmp/tmpvbj3dq21.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvbj3dq21.cpp:2:\n/tmp/tmpvbj3dq21.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpvbj3dq21.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpvbj3dq21.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvbj3dq21.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvbj3dq21.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvbj3dq21.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n    \
    \        result.push_back(\"One\");\n        } else if (arr[i] == 2) {\n     \
    \       result.push_back(\"Two\");\n        } else if (arr[i] == 3) {\n      \
    \      result.push_back(\"Three\");\n        } else if (arr[i] == 4) {\n     \
    \       result.push_back(\"Four\");\n        } else if (arr[i] == 5) {\n     \
    \       result.push_back(\"Five\");\n        } else if (arr[i] == 6) {\n     \
    \       result.push_back(\"Six\");\n        } else if (arr[i] == 7) {\n      \
    \      result.push_back(\"Seven\");\n        } else if (arr[i] == 8) {\n     \
    \       result.push_back(\"Eight\");\n        } else if (arr[i] == 9) {\n    \
    \        result.push_back(\"Nine\");\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg56ej1hi.cpp: In function 'int main()':\n/tmp/tmpg56ej1hi.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg56ej1hi.cpp:2:\n/tmp/tmpg56ej1hi.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpg56ej1hi.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpg56ej1hi.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg56ej1hi.cpp:44:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpg56ej1hi.cpp:44:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg56ej1hi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ nums;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n         \
    \   nums.push_back(i);\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::reverse(nums.begin(), nums.end());\n    for (auto i : nums) {\n    \
    \    switch (i) {\n            case 1:\n                res.push_back(\"One\"\
    );\n                break;\n            case 2:\n                res.push_back(\"\
    Two\");\n                break;\n            case 3:\n                res.push_back(\"\
    Three\");\n                break;\n            case 4:\n                res.push_back(\"\
    Four\");\n                break;\n            case 5:\n                res.push_back(\"\
    Five\");\n                break;\n            case 6:\n                res.push_back(\"\
    Six\");\n                break;\n            case 7:\n                res.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                res.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                res.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpah1o1qwe.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpah1o1qwe.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpah1o1qwe.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(nums.begin(), nums.end());\n\
    \     ^\n/tmp/tmpah1o1qwe.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(nums.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), nums.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(nums.begin(), nums.end());\n\
    \                                       ^\n/tmp/tmpah1o1qwe.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(nums.begin(), nums.end());\n\
    \                                           ^\n/tmp/tmpah1o1qwe.cpp:25:15: error:\
    \ 'i' does not name a type\n     for (auto i : nums) {\n               ^\n/tmp/tmpah1o1qwe.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmpah1o1qwe.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpah1o1qwe.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpah1o1qwe.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpah1o1qwe.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpah1o1qwe.cpp: In function 'int main()':\n/tmp/tmpah1o1qwe.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpah1o1qwe.cpp:2:\n/tmp/tmpah1o1qwe.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ tmp;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n          \
    \  tmp.push_back(i);\n        }\n    }\n    std::sort(tmp.begin(), tmp.end());\n\
    \    std::reverse(tmp.begin(), tmp.end());\n    for (auto i : tmp) {\n       \
    \ switch (i) {\n            case 1:\n                res.push_back(\"One\");\n\
    \                break;\n            case 2:\n                res.push_back(\"\
    Two\");\n                break;\n            case 3:\n                res.push_back(\"\
    Three\");\n                break;\n            case 4:\n                res.push_back(\"\
    Four\");\n                break;\n            case 5:\n                res.push_back(\"\
    Five\");\n                break;\n            case 6:\n                res.push_back(\"\
    Six\");\n                break;\n            case 7:\n                res.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                res.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                res.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yrpo9y7.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp8yrpo9y7.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp8yrpo9y7.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(tmp.begin(), tmp.end());\n\
    \     ^\n/tmp/tmp8yrpo9y7.cpp:23:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(tmp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), tmp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(tmp.begin(), tmp.end());\n\
    \                                     ^\n/tmp/tmp8yrpo9y7.cpp:24:41: error: expected\
    \ ')' before ';' token\n     std::reverse(tmp.begin(), tmp.end());\n         \
    \                                ^\n/tmp/tmp8yrpo9y7.cpp:25:15: error: 'i' does\
    \ not name a type\n     for (auto i : tmp) {\n               ^\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8yrpo9y7.cpp: In function 'int main()':\n/tmp/tmp8yrpo9y7.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8yrpo9y7.cpp:2:\n/tmp/tmp8yrpo9y7.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::strin"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i]\
    \ < 10) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    if (temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    } else if (temp[i] == 2) {\n      result.push_back(\"Two\");\n    } else\
    \ if (temp[i] == 3) {\n      result.push_back(\"Three\");\n    } else if (temp[i]\
    \ == 4) {\n      result.push_back(\"Four\");\n    } else if (temp[i] == 5) {\n\
    \      result.push_back(\"Five\");\n    } else if (temp[i] == 6) {\n      result.push_back(\"\
    Six\");\n    } else if (temp[i] == 7) {\n      result.push_back(\"Seven\");\n\
    \    } else if (temp[i] == 8) {\n      result.push_back(\"Eight\");\n    } else\
    \ if (temp[i] == 9) {\n      result.push_back(\"Nine\");\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpras6j1fu.cpp: In function 'int main()':\n/tmp/tmpras6j1fu.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpras6j1fu.cpp:2:\n/tmp/tmpras6j1fu.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpras6j1fu.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpras6j1fu.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpras6j1fu.cpp:50:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpras6j1fu.cpp:50:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpras6j1fu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i >= 1 && *i <= 9) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfy8_7xlo.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpfy8_7xlo.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n               ^\n/tmp/tmpfy8_7xlo.cpp:28:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpfy8_7xlo.cpp:28:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpfy8_7xlo.cpp: In function 'int main()':\n/tmp/tmpfy8_7xlo.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfy8_7xlo.cpp:2:\n/tmp/tmpfy8_7xlo.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpfy8_7xlo.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpfy8_7xlo.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfy8_7xlo.cpp:37:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map = {\n        {1, \"One\"},\n        {2, \"Two\"},\n       \
    \ {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6,\
    \ \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"\
    Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(map[i]);\n   \
    \     }\n    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjzfolrk.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpjjzfolrk.cpp:27:5: error: in C++98\
    \ 'map' must be initialized by constructor, not by '{...}'\n     };\n     ^\n\
    /tmp/tmpjjzfolrk.cpp:27:5: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjjzfolrk.cpp:27:5:\
    \ error: could not convert '{{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"\
    Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"\
    }}' from '<brace-enclosed initializer list>' to 'std::map<long int, std::basic_string<char>\
    \ >'\n/tmp/tmpjjzfolrk.cpp:29:15: error: 'i' does not name a type\n     for (auto\
    \ i : arr) {\n               ^\n/tmp/tmpjjzfolrk.cpp:34:5: error: expected ';'\
    \ before 'std'\n     std::reverse(res.begin(), res.end());\n     ^\n/tmp/tmpjjzfolrk.cpp:34:40:\
    \ error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmpjjzfolrk.cpp:35:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmpjjzfolrk.cpp:35:5: error: expected ')' before 'return'\n/tmp/tmpjjzfolrk.cpp:\
    \ In function 'int main()':\n/tmp/tmpjjzfolrk.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjjzfolrk.cpp:2:\n/tmp/tmpjjzfolrk.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, ("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\";\n    map[3]\
    \ = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n    map[6] = \"\
    Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9] = \"Nine\"\
    ;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            res.push_back(map[arr[i]]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::reverse(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkva_9gvr.cpp: In function 'int main()':\n/tmp/tmpkva_9gvr.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkva_9gvr.cpp:2:\n/tmp/tmpkva_9gvr.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpkva_9gvr.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpkva_9gvr.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkva_9gvr.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkva_9gvr.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkva_9gvr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  for (int i = 0; i\
    \ < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      result.push_back(map[arr[i]]);\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpss24lbcy.cpp: In function 'int main()':\n/tmp/tmpss24lbcy.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpss24lbcy.cpp:2:\n/tmp/tmpss24lbcy.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpss24lbcy.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpss24lbcy.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpss24lbcy.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpss24lbcy.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpss24lbcy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr) {\n        if(i >= 1 && i <=\
    \ 9) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp) {\n        switch(i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8o1mi9w.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpb8o1mi9w.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i : arr) {\n              ^\n/tmp/tmpb8o1mi9w.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpb8o1mi9w.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpb8o1mi9w.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmpb8o1mi9w.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i : temp) {\n              ^\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb8o1mi9w.cpp: In function 'int main()':\n/tmp/tmpb8o1mi9w.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8o1mi9w.cpp:2:\n/tmp/tmpb8o1mi9w.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\","
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> dict = {\n        {1, \"One\"},\n        {2, \"Two\"},\n      \
    \  {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6,\
    \ \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"\
    Nine\"}\n    };\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            res.push_back(dict[i]);\n  \
    \      }\n    }\n    std::reverse(res.begin(), res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ciq5otr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp6ciq5otr.cpp:27:5: error: in C++98\
    \ 'dict' must be initialized by constructor, not by '{...}'\n     };\n     ^\n\
    /tmp/tmp6ciq5otr.cpp:27:5: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6ciq5otr.cpp:27:5:\
    \ error: could not convert '{{1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"\
    Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"\
    }}' from '<brace-enclosed initializer list>' to 'std::map<long int, std::basic_string<char>\
    \ >'\n/tmp/tmp6ciq5otr.cpp:29:15: error: 'i' does not name a type\n     for (auto\
    \ i : arr) {\n               ^\n/tmp/tmp6ciq5otr.cpp:34:5: error: expected ';'\
    \ before 'std'\n     std::reverse(res.begin(), res.end());\n     ^\n/tmp/tmp6ciq5otr.cpp:34:40:\
    \ error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(res.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), res.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(res.begin(),\
    \ res.end());\n                                        ^\n/tmp/tmp6ciq5otr.cpp:35:5:\
    \ error: expected primary-expression before 'return'\n     return res;\n     ^\n\
    /tmp/tmp6ciq5otr.cpp:35:5: error: expected ')' before 'return'\n/tmp/tmp6ciq5otr.cpp:\
    \ In function 'int main()':\n/tmp/tmp6ciq5otr.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ciq5otr.cpp:2:\n/tmp/tmp6ciq5otr.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i : arr) {\n        if(i >= 1 && i <=\
    \ 9) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i :\
    \ temp) {\n        switch(i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8o1mi9w.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpb8o1mi9w.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i : arr) {\n              ^\n/tmp/tmpb8o1mi9w.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpb8o1mi9w.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpb8o1mi9w.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmpb8o1mi9w.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i : temp) {\n              ^\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb8o1mi9w.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb8o1mi9w.cpp: In function 'int main()':\n/tmp/tmpb8o1mi9w.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb8o1mi9w.cpp:2:\n/tmp/tmpb8o1mi9w.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\","
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it >= 1 && *it <= 9) {\n           \
    \ result.push_back(map[*it]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzpbtxzo.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpzzpbtxzo.cpp:28:15: error: 'it'\
    \ does not name a type\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it)\
    \ {\n               ^\n/tmp/tmpzzpbtxzo.cpp:28:34: error: expected ';' before\
    \ 'it'\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        \
    \                          ^\n/tmp/tmpzzpbtxzo.cpp:28:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmpzzpbtxzo.cpp: In function 'int main()':\n/tmp/tmpzzpbtxzo.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzzpbtxzo.cpp:2:\n/tmp/tmpzzpbtxzo.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpzzpbtxzo.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpzzpbtxzo.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzzpbtxzo.cpp:37:113: error: n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (auto &i : arr) {\n        if (i == 1) {\n            result.push_back(\"\
    One\");\n        } else if (i == 2) {\n            result.push_back(\"Two\");\n\
    \        } else if (i == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (i == 4) {\n            result.push_back(\"Four\");\n        }\
    \ else if (i == 5) {\n            result.push_back(\"Five\");\n        } else\
    \ if (i == 6) {\n            result.push_back(\"Six\");\n        } else if (i\
    \ == 7) {\n            result.push_back(\"Seven\");\n        } else if (i == 8)\
    \ {\n            result.push_back(\"Eight\");\n        } else if (i == 9) {\n\
    \            result.push_back(\"Nine\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg2gj17xs.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpg2gj17xs.cpp:19:16: error: ISO\
    \ C++ forbids declaration of 'i' with no type [-fpermissive]\n     for (auto &i\
    \ : arr) {\n                ^\n/tmp/tmpg2gj17xs.cpp:19:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &i : arr) {\n    \
    \                ^\n/tmp/tmpg2gj17xs.cpp: In function 'int main()':\n/tmp/tmpg2gj17xs.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg2gj17xs.cpp:2:\n/tmp/tmpg2gj17xs.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpg2gj17xs.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpg2gj17xs.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpg2gj17xs.cpp:44:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n        result.push_back(map[*i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsj8q1ww6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpsj8q1ww6.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpsj8q1ww6.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpsj8q1ww6.cpp:33:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpsj8q1ww6.cpp:34:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i = temp.rbegin(); i != temp.rend();\
    \ i++) {\n     ^\n/tmp/tmpsj8q1ww6.cpp:34:5: error: expected ')' before 'for'\n\
    /tmp/tmpsj8q1ww6.cpp:34:15: error: 'i' does not name a type\n     for (auto i\
    \ = temp.rbegin(); i != temp.rend(); i++) {\n               ^\n/tmp/tmpsj8q1ww6.cpp:34:34:\
    \ error: expected ';' before 'i'\n     for (auto i = temp.rbegin(); i != temp.rend();\
    \ i++) {\n                                  ^\n/tmp/tmpsj8q1ww6.cpp:34:34: error:\
    \ 'i' was not declared in this scope\n/tmp/tmpsj8q1ww6.cpp: In function 'int main()':\n\
    /tmp/tmpsj8q1ww6.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsj8q1ww6.cpp:2:\n/tmp/tmpsj8q1ww6.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto it = arr.rbegin();\
    \ it != arr.rend(); ++it) {\n        if (*it > 0 && *it < 10) {\n            result.push_back(map[*it]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp569w0stx.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp569w0stx.cpp:28:15: error: 'it'\
    \ does not name a type\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it)\
    \ {\n               ^\n/tmp/tmp569w0stx.cpp:28:34: error: expected ';' before\
    \ 'it'\n     for (auto it = arr.rbegin(); it != arr.rend(); ++it) {\n        \
    \                          ^\n/tmp/tmp569w0stx.cpp:28:34: error: 'it' was not\
    \ declared in this scope\n/tmp/tmp569w0stx.cpp: In function 'int main()':\n/tmp/tmp569w0stx.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp569w0stx.cpp:2:\n/tmp/tmp569w0stx.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp569w0stx.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp569w0stx.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp569w0stx.cpp:37:113: error: n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeya0ctc_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpeya0ctc_.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpeya0ctc_.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpeya0ctc_.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpeya0ctc_.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpeya0ctc_.cpp: In function\
    \ 'int main()':\n/tmp/tmpeya0ctc_.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeya0ctc_.cpp:2:\n/tmp/tmpeya0ctc_.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpeya0ctc_.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::map<long,\
    \ std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    m[3] = \"Three\"\
    ;\n    m[4] = \"Four\";\n    m[5] = \"Five\";\n    m[6] = \"Six\";\n    m[7] =\
    \ \"Seven\";\n    m[8] = \"Eight\";\n    m[9] = \"Nine\";\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n        \
    \    res.push_back(m[arr[i]]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbj3dq21.cpp: In function 'int main()':\n/tmp/tmpvbj3dq21.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvbj3dq21.cpp:2:\n/tmp/tmpvbj3dq21.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpvbj3dq21.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpvbj3dq21.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvbj3dq21.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvbj3dq21.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvbj3dq21.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        if(i==1){\n            result.push_back(\"One\");\n        }\n      \
    \  else if(i==2){\n            result.push_back(\"Two\");\n        }\n       \
    \ else if(i==3){\n            result.push_back(\"Three\");\n        }\n      \
    \  else if(i==4){\n            result.push_back(\"Four\");\n        }\n      \
    \  else if(i==5){\n            result.push_back(\"Five\");\n        }\n      \
    \  else if(i==6){\n            result.push_back(\"Six\");\n        }\n       \
    \ else if(i==7){\n            result.push_back(\"Seven\");\n        }\n      \
    \  else if(i==8){\n            result.push_back(\"Eight\");\n        }\n     \
    \   else if(i==9){\n            result.push_back(\"Nine\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr54no3zq.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpr54no3zq.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i: arr){\n              ^\n/tmp/tmpr54no3zq.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpr54no3zq.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpr54no3zq.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmpr54no3zq.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i: temp){\n              ^\n/tmp/tmpr54no3zq.cpp:54:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpr54no3zq.cpp:54:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpr54no3zq.cpp:54:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpr54no3zq.cpp:54:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpr54no3zq.cpp:54:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpr54no3zq.cpp: In function 'int main()':\n/tmp/tmpr54no3zq.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr54no3zq.cpp:2:\n/tmp/tmpr54no3zq.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::vector<long>\
    \ temp;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      temp.push_back(arr[i]);\n    }\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  std::reverse(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    if (temp[i] == 1) {\n      result.push_back(\"One\"\
    );\n    } else if (temp[i] == 2) {\n      result.push_back(\"Two\");\n    } else\
    \ if (temp[i] == 3) {\n      result.push_back(\"Three\");\n    } else if (temp[i]\
    \ == 4) {\n      result.push_back(\"Four\");\n    } else if (temp[i] == 5) {\n\
    \      result.push_back(\"Five\");\n    } else if (temp[i] == 6) {\n      result.push_back(\"\
    Six\");\n    } else if (temp[i] == 7) {\n      result.push_back(\"Seven\");\n\
    \    } else if (temp[i] == 8) {\n      result.push_back(\"Eight\");\n    } else\
    \ if (temp[i] == 9) {\n      result.push_back(\"Nine\");\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6w_biycu.cpp: In function 'int main()':\n/tmp/tmp6w_biycu.cpp:49:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6w_biycu.cpp:2:\n/tmp/tmp6w_biycu.cpp:50:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp6w_biycu.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp6w_biycu.cpp:50:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6w_biycu.cpp:50:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6w_biycu.cpp:50:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6w_biycu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeya0ctc_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpeya0ctc_.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpeya0ctc_.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpeya0ctc_.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpeya0ctc_.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpeya0ctc_.cpp: In function\
    \ 'int main()':\n/tmp/tmpeya0ctc_.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeya0ctc_.cpp:2:\n/tmp/tmpeya0ctc_.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpeya0ctc_.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    for (auto\
    \ i = arr.rbegin(); i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n\
    \            res.push_back(nums[*i - 1]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpze_22n51.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpze_22n51.cpp:17:108: error: in\
    \ C++98 'nums' must be initialized by constructor, not by '{...}'\n     std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                        ^\n/tmp/tmpze_22n51.cpp:17:108:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmpze_22n51.cpp:19:15:\
    \ error: 'i' does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend();\
    \ i++) {\n               ^\n/tmp/tmpze_22n51.cpp:19:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpze_22n51.cpp:19:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpze_22n51.cpp: In function 'int main()':\n/tmp/tmpze_22n51.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpze_22n51.cpp:2:\n/tmp/tmpze_22n51.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpze_22n51.cpp:28:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (*i == 1) {\n\
    \            result.push_back(\"One\");\n        } else if (*i == 2) {\n     \
    \       result.push_back(\"Two\");\n        } else if (*i == 3) {\n          \
    \  result.push_back(\"Three\");\n        } else if (*i == 4) {\n            result.push_back(\"\
    Four\");\n        } else if (*i == 5) {\n            result.push_back(\"Five\"\
    );\n        } else if (*i == 6) {\n            result.push_back(\"Six\");\n  \
    \      } else if (*i == 7) {\n            result.push_back(\"Seven\");\n     \
    \   } else if (*i == 8) {\n            result.push_back(\"Eight\");\n        }\
    \ else if (*i == 9) {\n            result.push_back(\"Nine\");\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpqyf24o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpmpqyf24o.cpp:19:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.begin(); i != arr.end(); i++) {\n\
    \               ^\n/tmp/tmpmpqyf24o.cpp:19:32: error: expected ';' before 'i'\n\
    \     for (auto i = arr.begin(); i != arr.end(); i++) {\n                    \
    \            ^\n/tmp/tmpmpqyf24o.cpp:19:32: error: 'i' was not declared in this\
    \ scope\n/tmp/tmpmpqyf24o.cpp: In function 'int main()':\n/tmp/tmpmpqyf24o.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmpqyf24o.cpp:2:\n/tmp/tmpmpqyf24o.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpmpqyf24o.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpmpqyf24o.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpmpqyf24o.cpp:44:113: error: no matching func"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    std::reverse(sorted.begin(), sorted.end());\n    for (auto\
    \ i : sorted) {\n        switch (i) {\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5mogwyb.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpk5mogwyb.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpk5mogwyb.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(sorted.begin(), sorted.end());\n\
    \     ^\n/tmp/tmpk5mogwyb.cpp:23:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(sorted.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), sorted.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(sorted.begin(),\
    \ sorted.end());\n                                           ^\n/tmp/tmpk5mogwyb.cpp:24:47:\
    \ error: expected ')' before ';' token\n     std::reverse(sorted.begin(), sorted.end());\n\
    \                                               ^\n/tmp/tmpk5mogwyb.cpp:25:15:\
    \ error: 'i' does not name a type\n     for (auto i : sorted) {\n            \
    \   ^\n/tmp/tmpk5mogwyb.cpp:56:5: error: expected ';' before 'return'\n     return\
    \ result;\n     ^\n/tmp/tmpk5mogwyb.cpp:56:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpk5mogwyb.cpp:56:5: error: expected ';' before 'return'\n\
    /tmp/tmpk5mogwyb.cpp:56:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk5mogwyb.cpp:56:5: error: expected ')' before 'return'\n/tmp/tmpk5mogwyb.cpp:\
    \ In function 'int main()':\n/tmp/tmpk5mogwyb.cpp:59:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk5mogwyb.cpp:2:\n/tmp/tmpk5mogwyb.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long>::iterator it;\n    for (it = arr.begin(); it != arr.end();\
    \ it++) {\n        if (*it > 0 && *it < 10) {\n            switch (*it) {\n  \
    \              case 1:\n                    result.push_back(\"One\");\n     \
    \               break;\n                case 2:\n                    result.push_back(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.push_back(\"Three\");\n                    break;\n             \
    \   case 4:\n                    result.push_back(\"Four\");\n               \
    \     break;\n                case 5:\n                    result.push_back(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      result.push_back(\"Six\");\n                    break;\n              \
    \  case 7:\n                    result.push_back(\"Seven\");\n               \
    \     break;\n                case 8:\n                    result.push_back(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.push_back(\"Nine\");\n                    break;\n            }\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2bl__4p.cpp: In function 'int main()':\n/tmp/tmpl2bl__4p.cpp:56:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl2bl__4p.cpp:2:\n/tmp/tmpl2bl__4p.cpp:57:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpl2bl__4p.cpp:57:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpl2bl__4p.cpp:57:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl2bl__4p.cpp:57:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl2bl__4p.cpp:57:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl2bl__4p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ tmp;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n          \
    \  tmp.push_back(i);\n        }\n    }\n    std::sort(tmp.begin(), tmp.end());\n\
    \    std::reverse(tmp.begin(), tmp.end());\n    for (auto i : tmp) {\n       \
    \ switch (i) {\n            case 1:\n                res.push_back(\"One\");\n\
    \                break;\n            case 2:\n                res.push_back(\"\
    Two\");\n                break;\n            case 3:\n                res.push_back(\"\
    Three\");\n                break;\n            case 4:\n                res.push_back(\"\
    Four\");\n                break;\n            case 5:\n                res.push_back(\"\
    Five\");\n                break;\n            case 6:\n                res.push_back(\"\
    Six\");\n                break;\n            case 7:\n                res.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                res.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                res.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yrpo9y7.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp8yrpo9y7.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp8yrpo9y7.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(tmp.begin(), tmp.end());\n\
    \     ^\n/tmp/tmp8yrpo9y7.cpp:23:37: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(tmp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), tmp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(tmp.begin(), tmp.end());\n\
    \                                     ^\n/tmp/tmp8yrpo9y7.cpp:24:41: error: expected\
    \ ')' before ';' token\n     std::reverse(tmp.begin(), tmp.end());\n         \
    \                                ^\n/tmp/tmp8yrpo9y7.cpp:25:15: error: 'i' does\
    \ not name a type\n     for (auto i : tmp) {\n               ^\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8yrpo9y7.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8yrpo9y7.cpp: In function 'int main()':\n/tmp/tmp8yrpo9y7.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8yrpo9y7.cpp:2:\n/tmp/tmp8yrpo9y7.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::strin"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> arr1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>=1\
    \ && arr[i]<=9){\n            arr1.push_back(arr[i]);\n        }\n    }\n    std::sort(arr1.begin(),arr1.end());\n\
    \    for(int i=0;i<arr1.size();i++){\n        if(arr1[i]==1){\n            result.push_back(\"\
    One\");\n        }\n        else if(arr1[i]==2){\n            result.push_back(\"\
    Two\");\n        }\n        else if(arr1[i]==3){\n            result.push_back(\"\
    Three\");\n        }\n        else if(arr1[i]==4){\n            result.push_back(\"\
    Four\");\n        }\n        else if(arr1[i]==5){\n            result.push_back(\"\
    Five\");\n        }\n        else if(arr1[i]==6){\n            result.push_back(\"\
    Six\");\n        }\n        else if(arr1[i]==7){\n            result.push_back(\"\
    Seven\");\n        }\n        else if(arr1[i]==8){\n            result.push_back(\"\
    Eight\");\n        }\n        else if(arr1[i]==9){\n            result.push_back(\"\
    Nine\");\n        }\n    }\n    std::reverse(result.begin(),result.end());\n \
    \   return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfo4au7dt.cpp: In function 'int main()':\n/tmp/tmpfo4au7dt.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfo4au7dt.cpp:2:\n/tmp/tmpfo4au7dt.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpfo4au7dt.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpfo4au7dt.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfo4au7dt.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfo4au7dt.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfo4au7dt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgq1xydgv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgq1xydgv.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n               ^\n/tmp/tmpgq1xydgv.cpp:28:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpgq1xydgv.cpp:28:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpgq1xydgv.cpp: In function 'int main()':\n/tmp/tmpgq1xydgv.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgq1xydgv.cpp:2:\n/tmp/tmpgq1xydgv.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgq1xydgv.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpgq1xydgv.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgq1xydgv.cpp:37:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i = arr.rbegin();\
    \ i != arr.rend(); i++) {\n        if (*i > 0 && *i < 10) {\n            result.push_back(map[*i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgq1xydgv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgq1xydgv.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n               ^\n/tmp/tmpgq1xydgv.cpp:28:33: error: expected ';' before\
    \ 'i'\n     for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n            \
    \                     ^\n/tmp/tmpgq1xydgv.cpp:28:33: error: 'i' was not declared\
    \ in this scope\n/tmp/tmpgq1xydgv.cpp: In function 'int main()':\n/tmp/tmpgq1xydgv.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgq1xydgv.cpp:2:\n/tmp/tmpgq1xydgv.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgq1xydgv.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpgq1xydgv.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgq1xydgv.cpp:37:113: error: no matching"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> dict;\n    dict[1]\
    \ = \"One\";\n    dict[2] = \"Two\";\n    dict[3] = \"Three\";\n    dict[4] =\
    \ \"Four\";\n    dict[5] = \"Five\";\n    dict[6] = \"Six\";\n    dict[7] = \"\
    Seven\";\n    dict[8] = \"Eight\";\n    dict[9] = \"Nine\";\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n     \
    \       temp.push_back(arr[i]);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    for (int i = temp.size() - 1; i >= 0; i--) {\n        result.push_back(dict[temp[i]]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpniapqidp.cpp: In function 'int main()':\n/tmp/tmpniapqidp.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpniapqidp.cpp:2:\n/tmp/tmpniapqidp.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpniapqidp.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpniapqidp.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpniapqidp.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpniapqidp.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpniapqidp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m6is661.cpp: In function 'int main()':\n/tmp/tmp1m6is661.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1m6is661.cpp:2:\n/tmp/tmp1m6is661.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp1m6is661.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp1m6is661.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1m6is661.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1m6is661.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1m6is661.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i > 0 && i < 10) {\n            sorted.push_back(i);\n        }\n\
    \    }\n    std::sort(sorted.begin(), sorted.end());\n    for (auto i : sorted)\
    \ {\n        result.push_back(map[i]);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nm9sh4q.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp4nm9sh4q.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp4nm9sh4q.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::sort(sorted.begin(), sorted.end());\n\
    \     ^\n/tmp/tmp4nm9sh4q.cpp:33:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(sorted.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), sorted.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(sorted.begin(),\
    \ sorted.end());\n                                           ^\n/tmp/tmp4nm9sh4q.cpp:34:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : sorted)\
    \ {\n     ^\n/tmp/tmp4nm9sh4q.cpp:34:5: error: expected ')' before 'for'\n/tmp/tmp4nm9sh4q.cpp:34:15:\
    \ error: 'i' does not name a type\n     for (auto i : sorted) {\n            \
    \   ^\n/tmp/tmp4nm9sh4q.cpp:37:5: error: expected ';' before 'std'\n     std::reverse(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmp4nm9sh4q.cpp:37:46: error: could not convert\
    \ 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::reverse(result.begin(), result.end());\n\
    \                                              ^\n/tmp/tmp4nm9sh4q.cpp:38:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmp4nm9sh4q.cpp:38:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp4nm9sh4q.cpp: In function 'int\
    \ main()':\n/tmp/tmp4nm9sh4q.cpp:41:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay2wofcg.cpp: In function 'int main()':\n/tmp/tmpay2wofcg.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpay2wofcg.cpp:2:\n/tmp/tmpay2wofcg.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpay2wofcg.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpay2wofcg.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpay2wofcg.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpay2wofcg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21y_t629.cpp: In function 'int main()':\n/tmp/tmp21y_t629.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp21y_t629.cpp:2:\n/tmp/tmp21y_t629.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp21y_t629.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp21y_t629.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp21y_t629.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp21y_t629.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp21y_t629.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m6is661.cpp: In function 'int main()':\n/tmp/tmp1m6is661.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1m6is661.cpp:2:\n/tmp/tmp1m6is661.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp1m6is661.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp1m6is661.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1m6is661.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1m6is661.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1m6is661.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n\
    \    for (auto i : arr) {\n        if (i == 1) {\n            result.push_back(\"\
    One\");\n        } else if (i == 2) {\n            result.push_back(\"Two\");\n\
    \        } else if (i == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (i == 4) {\n            result.push_back(\"Four\");\n        }\
    \ else if (i == 5) {\n            result.push_back(\"Five\");\n        } else\
    \ if (i == 6) {\n            result.push_back(\"Six\");\n        } else if (i\
    \ == 7) {\n            result.push_back(\"Seven\");\n        } else if (i == 8)\
    \ {\n            result.push_back(\"Eight\");\n        } else if (i == 9) {\n\
    \            result.push_back(\"Nine\");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yn4vr8d.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp3yn4vr8d.cpp:19:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp3yn4vr8d.cpp:40:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmp3yn4vr8d.cpp:40:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp3yn4vr8d.cpp:40:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp3yn4vr8d.cpp:40:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp3yn4vr8d.cpp:40:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp3yn4vr8d.cpp: In function 'int main()':\n/tmp/tmp3yn4vr8d.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3yn4vr8d.cpp:2:\n/tmp/tmp3yn4vr8d.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp3yn4vr8d.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp3yn4vr8d.cpp:44:113:\
    \ warning: extended initializer l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            result.push_back(map[i]);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bli83qz.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp8bli83qz.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp8bli83qz.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::reverse(result.begin(), result.end());\n\
    \     ^\n/tmp/tmp8bli83qz.cpp:33:46: error: could not convert 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::reverse(result.begin(),\
    \ result.end());\n                                              ^\n/tmp/tmp8bli83qz.cpp:34:5:\
    \ error: expected primary-expression before 'return'\n     return result;\n  \
    \   ^\n/tmp/tmp8bli83qz.cpp:34:5: error: expected ')' before 'return'\n/tmp/tmp8bli83qz.cpp:\
    \ In function 'int main()':\n/tmp/tmp8bli83qz.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8bli83qz.cpp:2:\n/tmp/tmp8bli83qz.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp8bli83qz.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> result;\n  std::map<long,\
    \ std::string> map;\n  map[1] = \"One\";\n  map[2] = \"Two\";\n  map[3] = \"Three\"\
    ;\n  map[4] = \"Four\";\n  map[5] = \"Five\";\n  map[6] = \"Six\";\n  map[7] =\
    \ \"Seven\";\n  map[8] = \"Eight\";\n  map[9] = \"Nine\";\n  std::sort(arr.begin(),\
    \ arr.end());\n  for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n    if (*i\
    \ >= 1 && *i <= 9) {\n      result.push_back(map[*i]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7qy4gsqc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp7qy4gsqc.cpp:28:13: error: 'i'\
    \ does not name a type\n   for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n\
    \             ^\n/tmp/tmp7qy4gsqc.cpp:28:31: error: expected ';' before 'i'\n\
    \   for (auto i = arr.rbegin(); i != arr.rend(); i++) {\n                    \
    \           ^\n/tmp/tmp7qy4gsqc.cpp:28:31: error: 'i' was not declared in this\
    \ scope\n/tmp/tmp7qy4gsqc.cpp: In function 'int main()':\n/tmp/tmp7qy4gsqc.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7qy4gsqc.cpp:2:\n/tmp/tmp7qy4gsqc.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp7qy4gsqc.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp7qy4gsqc.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7qy4gsqc.cpp:37:113: error: no matching functio"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == 1) {\n            result.push_back(\"One\");\n    \
    \    } else if (arr[i] == 2) {\n            result.push_back(\"Two\");\n     \
    \   } else if (arr[i] == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (arr[i] == 4) {\n            result.push_back(\"Four\");\n    \
    \    } else if (arr[i] == 5) {\n            result.push_back(\"Five\");\n    \
    \    } else if (arr[i] == 6) {\n            result.push_back(\"Six\");\n     \
    \   } else if (arr[i] == 7) {\n            result.push_back(\"Seven\");\n    \
    \    } else if (arr[i] == 8) {\n            result.push_back(\"Eight\");\n   \
    \     } else if (arr[i] == 9) {\n            result.push_back(\"Nine\");\n   \
    \     }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4_9v1xt.cpp: In function 'int main()':\n/tmp/tmpx4_9v1xt.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx4_9v1xt.cpp:2:\n/tmp/tmpx4_9v1xt.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpx4_9v1xt.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpx4_9v1xt.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpx4_9v1xt.cpp:44:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpx4_9v1xt.cpp:44:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx4_9v1xt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::vector<long>\
    \ temp;\n    for(auto i:arr){\n        if(i>=1 && i<=9){\n            temp.push_back(i);\n\
    \        }\n    }\n    std::sort(temp.begin(),temp.end());\n    std::reverse(temp.begin(),temp.end());\n\
    \    for(auto i:temp){\n        switch(i){\n            case 1:\n            \
    \    res.push_back(\"One\");\n                break;\n            case 2:\n  \
    \              res.push_back(\"Two\");\n                break;\n            case\
    \ 3:\n                res.push_back(\"Three\");\n                break;\n    \
    \        case 4:\n                res.push_back(\"Four\");\n                break;\n\
    \            case 5:\n                res.push_back(\"Five\");\n             \
    \   break;\n            case 6:\n                res.push_back(\"Six\");\n   \
    \             break;\n            case 7:\n                res.push_back(\"Seven\"\
    );\n                break;\n            case 8:\n                res.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                res.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwau6u0yp.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpwau6u0yp.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i:arr){\n              ^\n/tmp/tmpwau6u0yp.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(),temp.end());\n\
    \     ^\n/tmp/tmpwau6u0yp.cpp:23:38: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(),temp.end());\n\
    \                                      ^\n/tmp/tmpwau6u0yp.cpp:24:42: error: expected\
    \ ')' before ';' token\n     std::reverse(temp.begin(),temp.end());\n        \
    \                                  ^\n/tmp/tmpwau6u0yp.cpp:25:14: error: 'i' does\
    \ not name a type\n     for(auto i:temp){\n              ^\n/tmp/tmpwau6u0yp.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmpwau6u0yp.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwau6u0yp.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwau6u0yp.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwau6u0yp.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwau6u0yp.cpp: In function 'int main()':\n/tmp/tmpwau6u0yp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwau6u0yp.cpp:2:\n/tmp/tmpwau6u0yp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> sorted;\n    for (auto i : arr) {\n        if (i >= 1 &&\
    \ i <= 9) {\n            sorted.push_back(i);\n        }\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    for (auto i : sorted) {\n        switch (i) {\n        \
    \    case 1:\n                result.push_back(\"One\");\n                break;\n\
    \            case 2:\n                result.push_back(\"Two\");\n           \
    \     break;\n            case 3:\n                result.push_back(\"Three\"\
    );\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvx9ntmt.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpyvx9ntmt.cpp:18:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpyvx9ntmt.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(sorted.begin(), sorted.end());\n\
    \     ^\n/tmp/tmpyvx9ntmt.cpp:23:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(sorted.std::vector<_Tp, _Alloc>::begin<long\
    \ int, std::allocator<long int> >(), sorted.std::vector<_Tp, _Alloc>::end<long\
    \ int, std::allocator<long int> >())' from 'void' to 'bool'\n     std::sort(sorted.begin(),\
    \ sorted.end());\n                                           ^\n/tmp/tmpyvx9ntmt.cpp:24:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : sorted)\
    \ {\n     ^\n/tmp/tmpyvx9ntmt.cpp:24:5: error: expected ')' before 'for'\n/tmp/tmpyvx9ntmt.cpp:24:15:\
    \ error: 'i' does not name a type\n     for (auto i : sorted) {\n            \
    \   ^\n/tmp/tmpyvx9ntmt.cpp:55:5: error: expected ';' before 'std'\n     std::reverse(result.begin(),\
    \ result.end());\n     ^\n/tmp/tmpyvx9ntmt.cpp:55:46: error: could not convert\
    \ 'std::reverse<__gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>, std::allocator<std::basic_string<char>\
    \ > >())' from 'void' to 'bool'\n     std::reverse(result.begin(), result.end());\n\
    \                                              ^\n/tmp/tmpyvx9ntmt.cpp:56:5: error:\
    \ expected primary-expression before 'return'\n     return result;\n     ^\n/tmp/tmpyvx9ntmt.cpp:56:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpyvx9ntmt.cpp: In function 'int\
    \ main()':\n/tmp/tmpyvx9ntmt.cpp:59:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9) {\n   \
    \         result.push_back(map[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeya0ctc_.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpeya0ctc_.cpp:27:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpeya0ctc_.cpp:32:5:\
    \ error: expected ';' before 'std'\n     std::sort(result.begin(), result.end());\n\
    \     ^\n/tmp/tmpeya0ctc_.cpp:32:43: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<std::basic_string<char>*,\
    \ std::vector<std::basic_string<char> > > >(result.std::vector<_Tp, _Alloc>::begin<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >(), result.std::vector<_Tp, _Alloc>::end<std::basic_string<char>,\
    \ std::allocator<std::basic_string<char> > >())' from 'void' to 'bool'\n     std::sort(result.begin(),\
    \ result.end());\n                                           ^\n/tmp/tmpeya0ctc_.cpp:33:47:\
    \ error: expected ')' before ';' token\n     std::reverse(result.begin(), result.end());\n\
    \                                               ^\n/tmp/tmpeya0ctc_.cpp: In function\
    \ 'int main()':\n/tmp/tmpeya0ctc_.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpeya0ctc_.cpp:2:\n/tmp/tmpeya0ctc_.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpeya0ctc_.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (auto i : arr)\
    \ {\n        if (i == 1) {\n            res.push_back(\"One\");\n        } else\
    \ if (i == 2) {\n            res.push_back(\"Two\");\n        } else if (i ==\
    \ 3) {\n            res.push_back(\"Three\");\n        } else if (i == 4) {\n\
    \            res.push_back(\"Four\");\n        } else if (i == 5) {\n        \
    \    res.push_back(\"Five\");\n        } else if (i == 6) {\n            res.push_back(\"\
    Six\");\n        } else if (i == 7) {\n            res.push_back(\"Seven\");\n\
    \        } else if (i == 8) {\n            res.push_back(\"Eight\");\n       \
    \ } else if (i == 9) {\n            res.push_back(\"Nine\");\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9y0ifd.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2j9y0ifd.cpp:19:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected ';' before 'return'\n     return res;\n     ^\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2j9y0ifd.cpp:40:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp2j9y0ifd.cpp: In function 'int main()':\n/tmp/tmp2j9y0ifd.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9y0ifd.cpp:2:\n/tmp/tmp2j9y0ifd.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2j9y0ifd.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp2j9y0ifd.cpp:44:113:\
    \ warning: extended initializer list"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == 1) {\n            result.push_back(\"One\");\n    \
    \    } else if (arr[i] == 2) {\n            result.push_back(\"Two\");\n     \
    \   } else if (arr[i] == 3) {\n            result.push_back(\"Three\");\n    \
    \    } else if (arr[i] == 4) {\n            result.push_back(\"Four\");\n    \
    \    } else if (arr[i] == 5) {\n            result.push_back(\"Five\");\n    \
    \    } else if (arr[i] == 6) {\n            result.push_back(\"Six\");\n     \
    \   } else if (arr[i] == 7) {\n            result.push_back(\"Seven\");\n    \
    \    } else if (arr[i] == 8) {\n            result.push_back(\"Eight\");\n   \
    \     } else if (arr[i] == 9) {\n            result.push_back(\"Nine\");\n   \
    \     }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4_9v1xt.cpp: In function 'int main()':\n/tmp/tmpx4_9v1xt.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx4_9v1xt.cpp:2:\n/tmp/tmpx4_9v1xt.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpx4_9v1xt.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpx4_9v1xt.cpp:44:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpx4_9v1xt.cpp:44:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpx4_9v1xt.cpp:44:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx4_9v1xt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0ecvp.cpp: In function 'int main()':\n/tmp/tmpaxo0ecvp.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaxo0ecvp.cpp:2:\n/tmp/tmpaxo0ecvp.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpaxo0ecvp.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpaxo0ecvp.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpaxo0ecvp.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaxo0ecvp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i =\
    \ temp.size() - 1; i >= 0; i--) {\n        result.push_back(map[temp[i]]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsl2czinu.cpp: In function 'int main()':\n/tmp/tmpsl2czinu.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsl2czinu.cpp:2:\n/tmp/tmpsl2czinu.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpsl2czinu.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpsl2czinu.cpp:41:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsl2czinu.cpp:41:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsl2czinu.cpp:41:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsl2czinu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuuhcrp5.cpp: In function 'int main()':\n/tmp/tmpsuuhcrp5.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsuuhcrp5.cpp:2:\n/tmp/tmpsuuhcrp5.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpsuuhcrp5.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpsuuhcrp5.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsuuhcrp5.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsuuhcrp5.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsuuhcrp5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > 0 && arr[i] < 10) {\n            temp.push_back(arr[i]);\n   \
    \     }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        switch(temp[i])\
    \ {\n            case 1:\n                result.push_back(\"One\");\n       \
    \         break;\n            case 2:\n                result.push_back(\"Two\"\
    );\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuuhcrp5.cpp: In function 'int main()':\n/tmp/tmpsuuhcrp5.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsuuhcrp5.cpp:2:\n/tmp/tmpsuuhcrp5.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpsuuhcrp5.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpsuuhcrp5.cpp:60:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsuuhcrp5.cpp:60:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpsuuhcrp5.cpp:60:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsuuhcrp5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(auto i: arr){\n        if(i>=1 && i<=9){\n\
    \            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for(auto i: temp){\n\
    \        switch(i){\n            case 1:\n                result.push_back(\"\
    One\");\n                break;\n            case 2:\n                result.push_back(\"\
    Two\");\n                break;\n            case 3:\n                result.push_back(\"\
    Three\");\n                break;\n            case 4:\n                result.push_back(\"\
    Four\");\n                break;\n            case 5:\n                result.push_back(\"\
    Five\");\n                break;\n            case 6:\n                result.push_back(\"\
    Six\");\n                break;\n            case 7:\n                result.push_back(\"\
    Seven\");\n                break;\n            case 8:\n                result.push_back(\"\
    Eight\");\n                break;\n            case 9:\n                result.push_back(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vpbo70j.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2vpbo70j.cpp:18:14: error: 'i'\
    \ does not name a type\n     for(auto i: arr){\n              ^\n/tmp/tmp2vpbo70j.cpp:23:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmp2vpbo70j.cpp:23:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmp2vpbo70j.cpp:24:43: error:\
    \ expected ')' before ';' token\n     std::reverse(temp.begin(), temp.end());\n\
    \                                           ^\n/tmp/tmp2vpbo70j.cpp:25:14: error:\
    \ 'i' does not name a type\n     for(auto i: temp){\n              ^\n/tmp/tmp2vpbo70j.cpp:56:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmp2vpbo70j.cpp:56:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp2vpbo70j.cpp:56:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp2vpbo70j.cpp:56:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2vpbo70j.cpp:56:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp2vpbo70j.cpp: In function 'int main()':\n/tmp/tmp2vpbo70j.cpp:59:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2vpbo70j.cpp:2:\n/tmp/tmp2vpbo70j.cpp:60:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  std::vector<std::string> res;\n  std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n  std::sort(arr.begin(), arr.end());\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      res.push_back(nums[arr[i]\
    \ - 1]);\n    }\n  }\n  std::reverse(res.begin(), res.end());\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28w0nz9q.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp28w0nz9q.cpp:17:106: error: in\
    \ C++98 'nums' must be initialized by constructor, not by '{...}'\n   std::vector<std::string>\
    \ nums = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"};\n                                                    \
    \                                                      ^\n/tmp/tmp28w0nz9q.cpp:17:106:\
    \ error: could not convert '{\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}' from '<brace-enclosed initializer\
    \ list>' to 'std::vector<std::basic_string<char> >'\n/tmp/tmp28w0nz9q.cpp: In\
    \ function 'int main()':\n/tmp/tmp28w0nz9q.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp28w0nz9q.cpp:2:\n/tmp/tmp28w0nz9q.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp28w0nz9q.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    for(int i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] >= 1 && arr[i] <= 9) {\n            temp.push_back(arr[i]);\n  \
    \      }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(),\
    \ temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i]\
    \ == 1) {\n            result.push_back(\"One\");\n        }\n        else if(temp[i]\
    \ == 2) {\n            result.push_back(\"Two\");\n        }\n        else if(temp[i]\
    \ == 3) {\n            result.push_back(\"Three\");\n        }\n        else if(temp[i]\
    \ == 4) {\n            result.push_back(\"Four\");\n        }\n        else if(temp[i]\
    \ == 5) {\n            result.push_back(\"Five\");\n        }\n        else if(temp[i]\
    \ == 6) {\n            result.push_back(\"Six\");\n        }\n        else if(temp[i]\
    \ == 7) {\n            result.push_back(\"Seven\");\n        }\n        else if(temp[i]\
    \ == 8) {\n            result.push_back(\"Eight\");\n        }\n        else if(temp[i]\
    \ == 9) {\n            result.push_back(\"Nine\");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrqtsw06.cpp: In function 'int main()':\n/tmp/tmpbrqtsw06.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbrqtsw06.cpp:2:\n/tmp/tmpbrqtsw06.cpp:58:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpbrqtsw06.cpp:58:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbrqtsw06.cpp:58:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbrqtsw06.cpp:58:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbrqtsw06.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::vector<long> temp;\n    std::map<long, std::string> map;\n    map[1]\
    \ = \"One\";\n    map[2] = \"Two\";\n    map[3] = \"Three\";\n    map[4] = \"\
    Four\";\n    map[5] = \"Five\";\n    map[6] = \"Six\";\n    map[7] = \"Seven\"\
    ;\n    map[8] = \"Eight\";\n    map[9] = \"Nine\";\n    for (auto i : arr) {\n\
    \        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n\
    \    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = temp.rbegin();\
    \ i != temp.rend(); i++) {\n        result.push_back(map[*i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsj8q1ww6.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpsj8q1ww6.cpp:28:15: error: 'i'\
    \ does not name a type\n     for (auto i : arr) {\n               ^\n/tmp/tmpsj8q1ww6.cpp:33:5:\
    \ error: expected ';' before 'std'\n     std::sort(temp.begin(), temp.end());\n\
    \     ^\n/tmp/tmpsj8q1ww6.cpp:33:39: error: could not convert 'std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(temp.std::vector<_Tp, _Alloc>::begin<long int,\
    \ std::allocator<long int> >(), temp.std::vector<_Tp, _Alloc>::end<long int, std::allocator<long\
    \ int> >())' from 'void' to 'bool'\n     std::sort(temp.begin(), temp.end());\n\
    \                                       ^\n/tmp/tmpsj8q1ww6.cpp:34:5: error: expected\
    \ primary-expression before 'for'\n     for (auto i = temp.rbegin(); i != temp.rend();\
    \ i++) {\n     ^\n/tmp/tmpsj8q1ww6.cpp:34:5: error: expected ')' before 'for'\n\
    /tmp/tmpsj8q1ww6.cpp:34:15: error: 'i' does not name a type\n     for (auto i\
    \ = temp.rbegin(); i != temp.rend(); i++) {\n               ^\n/tmp/tmpsj8q1ww6.cpp:34:34:\
    \ error: expected ';' before 'i'\n     for (auto i = temp.rbegin(); i != temp.rend();\
    \ i++) {\n                                  ^\n/tmp/tmpsj8q1ww6.cpp:34:34: error:\
    \ 'i' was not declared in this scope\n/tmp/tmpsj8q1ww6.cpp: In function 'int main()':\n\
    /tmp/tmpsj8q1ww6.cpp:40:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsj8q1ww6.cpp:2:\n/tmp/tmpsj8q1ww6.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the vector has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> result;\n \
    \   std::map<long, std::string> map;\n    map[1] = \"One\";\n    map[2] = \"Two\"\
    ;\n    map[3] = \"Three\";\n    map[4] = \"Four\";\n    map[5] = \"Five\";\n \
    \   map[6] = \"Six\";\n    map[7] = \"Seven\";\n    map[8] = \"Eight\";\n    map[9]\
    \ = \"Nine\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push_back(map[arr[i]]);\n       \
    \ }\n    }\n    std::sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21y_t629.cpp: In function 'int main()':\n/tmp/tmp21y_t629.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp21y_t629.cpp:2:\n/tmp/tmp21y_t629.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp21y_t629.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp21y_t629.cpp:38:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp21y_t629.cpp:38:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp21y_t629.cpp:38:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp21y_t629.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
