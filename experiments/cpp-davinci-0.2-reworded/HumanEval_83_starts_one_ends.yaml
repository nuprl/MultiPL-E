name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long start\
    \ = 1;\n    long end = 1;\n    for (long j = 1; j < i; j++) {\n      start *=\
    \ 10;\n      end *= 10;\n    }\n    count += start + end;\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 0;\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n \
    \ for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long count = 10;\n  long last_digit = 10;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count += 9 * last_digit;\n    last_digit *= 10;\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += (std::pow(10, i - 1) - std::pow(10, i - 2));\n  }\n  return count;",
  "    assert(n >= 1);\n    if (n == 1) {\n        return 1;\n    }\n    if (n ==\
    \ 2) {\n        return 2;\n    }\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        count += pow(10, i - 1);\n    }\n    count += pow(10, n\
    \ - 1);\n    return count;", "  // Write your code here\n  long count = 0;\n \
    \ for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n    }\
    \ else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "    if (n == 1) {\n        return 10;\n    }\n\
    \    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += 9\
    \ * pow(10, i - 1);\n    }\n    return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= 9; i++) {\n    count += pow(10, n - 2);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  assert(n > 0);\n  if\
    \ (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n;\
    \ i++) {\n    count += std::pow(10, i-1);\n  }\n  return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2] * 9;\n \
    \ }\n  return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  long\
    \ start = 1;\n  long end = 1;\n  for (int i = 1; i < n; i++) {\n    start *= 10;\n\
    \    end = end * 10 + 1;\n  }\n  count = end - start + 1;\n  return count;", " \
    \ long count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 0; i <\
    \ n - 1; i++) {\n    start *= 10;\n    end *= 10;\n  }\n  for (long i = start;\
    \ i < end * 10; i++) {\n    if (i % 10 == 1 || i / start == 1) {\n      count++;\n\
    \    }\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n \
    \ count += (n - 2) * 9 * start;\n  return count;", "    long dp[n + 1];\n    memset(dp,\
    \ 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   dp[i] = dp[i - 1] * 10 + pow(10, i - 1);\n    }\n    return dp[n];", "   \
    \ if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        count += 9 * pow(10, i - 1);\n    }\n    return\
    \ count;"]
stop_tokens:
- "\n}"
