name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long start\
    \ = 1;\n    long end = 1;\n    for (long j = 1; j < i; j++) {\n      start *=\
    \ 10;\n      end *= 10;\n    }\n    count += start + end;\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 0;\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n \
    \ for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long count = 10;\n  long last_digit = 10;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count += 9 * last_digit;\n    last_digit *= 10;\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += (std::pow(10, i - 1) - std::pow(10, i - 2));\n  }\n  return count;",
  "    assert(n >= 1);\n    if (n == 1) {\n        return 1;\n    }\n    if (n ==\
    \ 2) {\n        return 2;\n    }\n    long count = 0;\n    for (long i = 1; i\
    \ < n; i++) {\n        count += pow(10, i - 1);\n    }\n    count += pow(10, n\
    \ - 1);\n    return count;", "  // Write your code here\n  long count = 0;\n \
    \ for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n    }\
    \ else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "    if (n == 1) {\n        return 10;\n    }\n\
    \    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += 9\
    \ * pow(10, i - 1);\n    }\n    return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= 9; i++) {\n    count += pow(10, n - 2);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  assert(n > 0);\n  if\
    \ (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n;\
    \ i++) {\n    count += std::pow(10, i-1);\n  }\n  return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2] * 9;\n \
    \ }\n  return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  long\
    \ start = 1;\n  long end = 1;\n  for (int i = 1; i < n; i++) {\n    start *= 10;\n\
    \    end = end * 10 + 1;\n  }\n  count = end - start + 1;\n  return count;", " \
    \ long count = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 0; i <\
    \ n - 1; i++) {\n    start *= 10;\n    end *= 10;\n  }\n  for (long i = start;\
    \ i < end * 10; i++) {\n    if (i % 10 == 1 || i / start == 1) {\n      count++;\n\
    \    }\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n \
    \ count += (n - 2) * 9 * start;\n  return count;", "    long dp[n + 1];\n    memset(dp,\
    \ 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   dp[i] = dp[i - 1] * 10 + pow(10, i - 1);\n    }\n    return dp[n];", "   \
    \ if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        count += 9 * pow(10, i - 1);\n    }\n    return\
    \ count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "    long dp[n+1];\n    memset(dp, 0,\
    \ sizeof(dp));\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i]\
    \ = dp[i-1] + pow(10, i-1);\n    }\n    return dp[n];", "  long count = 0;\n \
    \ long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start\
    \ *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n  count +=\
    \ (n - 2) * 9 * start;\n  return count;", "    if (n == 1) {\n        return 1;\n\
    \    }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count\
    \ += pow(10, i - 1);\n    }\n    return count;", "  // Write your code here\n\
    \  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i]\
    \ = 9*pow(10,i-2);\n  }\n  return dp[n];", "  long dp[n+1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for (int i = 2; i <= n; i++) {\n    dp[i] = dp[i-1] + pow(10, i-1);\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 10;\n  }\n  long count =\
    \ 0;\n  long power = 1;\n  for (long i = 0; i < n - 1; i++) {\n    power *= 10;\n\
    \  }\n  count += 9 * power;\n  count += starts_one_ends(n - 1);\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 10 == 1) {\n        count++;\n        break;\n\
    \      }\n      temp /= 10;\n    }\n  }\n  return count;", "  if (n == 1) {\n\
    \    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   if (i == 1) {\n      count += 9;\n    } else {\n      count += (9 * pow(10,\
    \ i - 1));\n    }\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  \
    \  long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n;\
    \ i++) {\n        dp[i] = 9*dp[i-1] + pow(10, i-1);\n    }\n    return dp[n];",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n     \
    \ count += 1;\n    } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n - 2; i++) {\n\
    \    count += pow(10, i);\n  }\n  return count * 2 + starts_one_ends(n - 1);",
  "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int\
    \ i=2;i<=n;i++){\n    dp[i] = 9*pow(10,i-2) + dp[i-1];\n  }\n  return dp[n];",
  "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i == 1) {\n\
    \            count += 1;\n        } else {\n            count += 9 * pow(10, i\
    \ - 2);\n        }\n    }\n    return count;", "    if (n == 1) {\n        return\
    \ 1;\n    }\n    long result = 0;\n    for (long i = 1; i < n; i++) {\n      \
    \  result += pow(10, i);\n    }\n    return result * 2;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n   \
    \ } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long count\
    \ = 0;\n  long start_one = 1;\n  long end_one = 1;\n  long start_one_end_one =\
    \ 1;\n  for (long i = 2; i <= n; i++) {\n    start_one = start_one_end_one;\n\
    \    end_one = start_one_end_one;\n    start_one_end_one = start_one + end_one;\n\
    \  }\n  count = start_one + end_one + start_one_end_one;\n  return count;", " \
    \ if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n\
    \ == 1) return 2;\n  if (n == 2) return 3;\n  long dp[n + 1];\n  dp[0] = 0;\n\
    \  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start_one\
    \ = 9;\n  long end_one = 10;\n  long start_end_one = 9;\n  for (long i = 3; i\
    \ <= n; i++) {\n    count = start_one + end_one + start_end_one;\n    start_one\
    \ = start_end_one * 10;\n    end_one = start_end_one;\n    start_end_one = count;\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "    long dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for(long\
    \ i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + pow(10, i-1);\n    }\n    return\
    \ dp[n];", "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n       \
    \ if (i == 1) {\n            count++;\n        } else {\n            count +=\
    \ 9 * pow(10, i - 2);\n        }\n    }\n    return count;", "  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + pow(10, i - 1);\n  }\n  return dp[n];", "    assert(n > 0);\n    if (n\
    \ == 1) {\n        return 1;\n    }\n    long count = 0;\n    for (long i = 1;\
    \ i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;",
  "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += std::pow(10, i - 1);\n  }\n  return\
    \ count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += (long)pow(10, i - 1);\n  }\n  return count;",
  "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  long start_one = 1;\n\
    \  long end_one = 1;\n  for (long i = 1; i < n; i++) {\n    start_one *= 10;\n\
    \    end_one *= 10;\n  }\n  count += start_one;\n  count += end_one;\n  count\
    \ += (n - 2) * 9 * start_one;\n  return count;", "    long dp[n + 1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = 9\
    \ * pow(10, i - 2) + dp[i - 1];\n    }\n    return dp[n];", "  if (n == 1) {\n\
    \    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n\
    \  for (int i = 1; i <= 9; i++) {\n    count += starts_one_ends(n - 1);\n  }\n\
    \  count += 9;\n  return count;", "    if (n == 1) {\n        return 10;\n   \
    \ }\n    long count = 0;\n    long start_count = 1;\n    long end_count = 1;\n\
    \    long i = 2;\n    while (i <= n) {\n        start_count = end_count;\n   \
    \     end_count = 9 * start_count;\n        count += start_count + end_count;\n\
    \        i++;\n    }\n    return count;", "  long count = 0;\n  for (int i = 1;\
    \ i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n\
    \ == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (int i = 1; i <= 9; i++) {\n    count += pow(10, n - 2);\n  }\n\
    \  return count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + pow(10, i - 1);\n  }\n  return\
    \ dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long\
    \ i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n  return\
    \ dp[n];", "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n \
    \       return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);", "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  long start_one\
    \ = 1;\n  long end_one = 1;\n  for (long i = 2; i <= n; i++) {\n    start_one\
    \ *= 10;\n    end_one *= 10;\n  }\n  count += start_one;\n  count += end_one;\n\
    \  count += (n - 2) * 9 * start_one;\n  return count;", "  if (n == 1) {\n   \
    \ return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i]\
    \ = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "  if (n == 1) return\
    \ 1;\n  if (n == 2) return 10;\n  long count = 10;\n  long start = 10;\n  long\
    \ end = 1;\n  for (long i = 3; i <= n; i++) {\n    start *= 10;\n    end *= 10;\n\
    \    count += start + end;\n  }\n  return count;", "    long dp[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1]\
    \ + 9*pow(10, i-2);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  if (n == 2) {\n    return 10;\n  }\n  long *dp = new long[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i]\
    \ = (dp[i - 1] * 10) - (dp[i - 2] * 9);\n  }\n  return dp[n];", "  if (n == 1)\
    \ {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "    long count = 0;\n \
    \   for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n\
    \    return count;", "  long count = 0;\n  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  if (n == 3) {\n    return 19;\n  }\n\
    \  if (n == 4) {\n    return 28;\n  }\n  if (n == 5) {\n    return 37;\n  }\n\
    \  if (n == 6) {\n    return 46;\n  }\n  if (n == 7) {\n    return 55;\n  }\n\
    \  if (n == 8) {\n    return 64;\n  }\n  if (n == 9) {\n    return 73;\n  }\n\
    \  if (n == 10) {\n    return 82;\n  }\n  if (n == 11) {\n    return 91;\n  }\n\
    \  if (n == 12) {\n    return 100;\n  }\n  if (n == 13) {\n    return 109;\n \
    \ }\n  if (n == 14) {\n    return 118;\n  }\n  if (n == 15) {\n    return 127;\n\
    \  }\n  if (n == 16) {\n    return 136;\n  }\n  if (n == 17) {\n    return 145;\n\
    \  }\n  if (n == 18) {\n    return 154;\n  }\n  if (n == 19) {\n    return 163;\n\
    \  }\n  if (n == 20) {\n    return 172;\n  }\n  if (n == 21) {\n    return 181;\n\
    \  }\n  if (n == 22) {\n    return 190;\n  }\n  if (n == 23) {\n    return 199;\n\
    \  }\n  if (n == 24) {\n    return 208;\n  }\n  if (n == 25) {\n    return 217;\n\
    \  }\n  if (n == 26) {\n    return 226;\n  }\n  if (n == 27) {\n    return 235;\n\
    \  }\n  if (n == 28) {\n    return 244;\n  }\n  if (n == 29) {\n    return 253;\n\
    \  }\n  if (n == 30) {\n    return", "  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    if (i == 1) {\n      count++;\n    } else {\n      count +=\
    \ 9 * pow(10, i - 2);\n    }\n  }\n  return count;", "    long count = 0;\n  \
    \  for (long i = 1; i <= n; i++) {\n        long num = pow(10, i - 1);\n     \
    \   count += 9 * num;\n    }\n    return count;", "  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    count += (std::pow(10, i - 1) - std::pow(9, i - 1));\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1]\
    \ = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  long count = 0;\n  long start_one = 1;\n  long end_one = 1;\n  long start_one_ends\
    \ = 1;\n  while (n > 1) {\n    count = start_one + end_one + start_one_ends;\n\
    \    start_one = end_one;\n    end_one = start_one_ends;\n    start_one_ends =\
    \ count;\n    n--;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n \
    \ }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n \
    \ dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2] * 9;\n  }\n  return dp[n];", "  if (n == 1) {\n    return 10;\n\
    \  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count;", "  // Write your code here\n  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = dp[i-1]*10\
    \ + pow(10,i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 11;\n  }\n  long count = 11;\n  long base = 10;\n\
    \  for (long i = 3; i <= n; i++) {\n    count += 9 * base;\n    base *= 10;\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n\
    \  long start_with_one = 9;\n  long end_with_one = 1;\n  long start_with_one_end_with_one\
    \ = 0;\n  for (long i = 2; i <= n; i++) {\n    start_with_one_end_with_one = start_with_one\
    \ + end_with_one;\n    start_with_one = start_with_one * 10 - end_with_one;\n\
    \    end_with_one = start_with_one_end_with_one;\n  }\n  return start_with_one\
    \ + end_with_one;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n  \
    \  return 10;\n  }\n  long count = 10;\n  long prev = 10;\n  for (long i = 3;\
    \ i <= n; i++) {\n    count = prev + 9 * pow(10, i - 2);\n    prev = count;\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "    long dp[n + 1];\n \
    \   dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i]\
    \ = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];", "  if (n == 1) {\n    return\
    \ 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 11;\n  }\n  long count = 11;\n  long i = 3;\n  while\
    \ (i <= n) {\n    count = count * 10 + pow(10, i - 1);\n    i++;\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  long start_one = 1;\n  long\
    \ end_one = 1;\n  for (long i = 2; i <= n; i++) {\n    start_one = start_one *\
    \ 9 + end_one;\n    end_one = start_one;\n  }\n  return start_one + end_one;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  long start_one = 9;\n  long end_one = 10;\n  long start_end_one\
    \ = 9;\n  for (long i = 3; i <= n; i++) {\n    count = start_one + end_one + start_end_one;\n\
    \    start_one = start_end_one * 10;\n    end_one = start_end_one;\n    start_end_one\
    \ = count;\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    if (i == 1) {\n      count += 1;\n    } else {\n      count += 9 * std::pow(10,\
    \ i - 2);\n    }\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n\
    \  if (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + dp[i - 2];\n  }\n  return dp[n];", "  assert(n >= 1);\n  if (n == 1) return\
    \ 2;\n  if (n == 2) return 3;\n  long dp[n + 1];\n  dp[1] = 2;\n  dp[2] = 3;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n\
    \  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count\
    \ += pow(10, i - 1);\n  }\n  return count;", "  assert(n > 0);\n  if (n == 1)\
    \ {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count =\
    \ 0;\n  long start_with_one = 9;\n  long end_with_one = 10;\n  for (long i = 3;\
    \ i <= n; i++) {\n    count += start_with_one + end_with_one;\n    start_with_one\
    \ = start_with_one * 10 + 9;\n    end_with_one = end_with_one * 10 + 1;\n  }\n\
    \  return count;", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n  long dp[n\
    \ + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n;\
    \ i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += (pow(10, i - 1) - pow(10,\
    \ i - 2));\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  if\
    \ (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n\
    \  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i\
    \ - 2];\n  }\n  return dp[n];", "  assert(n > 0);\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);", "    if (n == 1) {\n        return 2;\n    }\n \
    \   long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long\
    \ i = 3; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2];\n    }\n    return\
    \ dp[n];", "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n       \
    \ count += pow(10, i - 1);\n    }\n    return count;", "  if (n == 1) return 1;\n\
    \  if (n == 2) return 3;\n  long dp[n + 1];\n  dp[1] = 1;\n  dp[2] = 3;\n  for\
    \ (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return\
    \ dp[n];", "    if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n\
    \    long start_one = 9;\n    long end_one = 10;\n    for (long i = 2; i <= n;\
    \ i++) {\n        count += start_one * end_one;\n        start_one = start_one\
    \ * 10;\n        end_one = end_one + 9;\n    }\n    return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long a = 1;\n\
    \  long b = 2;\n  long c = 0;\n  for (long i = 3; i <= n; i++) {\n    c = a +\
    \ b;\n    a = b;\n    b = c;\n  }\n  return c;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  \
    \  if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
    \ 3;\n    }\n    long count = 0;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    for (long i = 3; i <= n; i++) {\n        count = a + b + c;\n    \
    \    a = b;\n        b = c;\n        c = count;\n    }\n    return count;", " \
    \ long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  for (long i =\
    \ 2; i <= n; i++) {\n    dp[i] = dp[i - 1] * 10 - dp[i - 2];\n  }\n  return dp[n];",
  "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <=\
    \ n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ *dp = new long[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long\
    \ i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 0;\n  long start_one = 10;\n  long end_one = 10;\n  for (long i = 3;\
    \ i <= n; i++) {\n    count = start_one + end_one;\n    start_one = start_one\
    \ * 10 + 1;\n    end_one = end_one * 10 + 1;\n  }\n  return count;", "  long count\
    \ = 0;\n  for (int i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n\
    \    } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;",
  "  assert(n > 0);\n  if (n == 1) return 1;\n  long count = 0;\n  for (long i = 1;\
    \ i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    long num = 1;\n    for (long\
    \ j = 1; j < i; j++) {\n      num *= 10;\n    }\n    count += (num * 9);\n  }\n\
    \  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n   \
    \ count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long i =\
    \ 1;\n  while (i <= n) {\n    count += 9 * pow(10, i - 1);\n    i++;\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 10;\n  long prev = 10;\n  for (long i = 3; i <= n; i++) {\n\
    \    count = count + prev;\n    prev = count;\n  }\n  return count;", "  if (n\
    \ == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long dp[n\
    \ + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n;\
    \ i++) {\n    dp[i] = (dp[i - 1] * 10) - (dp[i - 2] * 9);\n  }\n  return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i\
    \ <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", " \
    \ long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n\
    \    dp[i] = dp[i-1] + 9*pow(10, i-2);\n  }\n  return dp[n];", "  long count =\
    \ 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n \
    \ return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count\
    \ += std::pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n\
    \  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n\
    \  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start =\
    \ 1;\n  long end = 1;\n  long i = 0;\n  while (i < n - 2) {\n    start *= 10;\n\
    \    end *= 10;\n    i++;\n  }\n  count = start + end;\n  return count;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (int i = 1; i <= 9; i++) {\n    count += pow(10, n - 2);\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "    if (n == 1) {\n    \
    \    return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    long start_one = 9;\n    long end_one = 10;\n    long start_end_one\
    \ = 9;\n    for (long i = 3; i <= n; i++) {\n        count = start_one + end_one\
    \ + start_end_one;\n        start_one = start_end_one * 10;\n        end_one =\
    \ start_end_one;\n        start_end_one = count;\n    }\n    return count;", " \
    \ if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i\
    \ <= n; i++) {\n    dp[i] = 9 * dp[i - 1] + pow(10, i - 2);\n  }\n  return dp[n];",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  long count = 0;\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  if (n == 3) {\n    return 100;\n\
    \  }\n  if (n == 4) {\n    return 1000;\n  }\n  if (n == 5) {\n    return 10000;\n\
    \  }\n  if (n == 6) {\n    return 100000;\n  }\n  if (n == 7) {\n    return 1000000;\n\
    \  }\n  if (n == 8) {\n    return 10000000;\n  }\n  if (n == 9) {\n    return\
    \ 100000000;\n  }\n  if (n == 10) {\n    return 1000000000;\n  }\n  if (n == 11)\
    \ {\n    return 10000000000;\n  }\n  if (n == 12) {\n    return 100000000000;\n\
    \  }\n  if (n == 13) {\n    return 1000000000000;\n  }\n  if (n == 14) {\n   \
    \ return 10000000000000;\n  }\n  if (n == 15) {\n    return 100000000000000;\n\
    \  }\n  if (n == 16) {\n    return 1000000000000000;\n  }\n  if (n == 17) {\n\
    \    return 10000000000000000;\n  }\n  if (n == 18) {\n    return 100000000000000000;\n\
    \  }\n  if (n == 19) {\n    return 1000000000000000000;\n  }\n  if (n == 20) {\n\
    \    return 10000000000000000000;\n  }\n  if (n == 21) {\n    return 100000000000000000000;\n\
    \  }\n  if (n == 22) {\n    return 1000000000000000000000;\n  }\n  if (n == 23)\
    \ {\n    return 10000000000000000000000;\n  }\n  if (n == 24) {\n    return 100000000000000000000000;\n\
    \  }\n  if (n == 25) {\n    return 1000000000000000000000000;\n  }\n  if (n ==\
    \ 26) {\n    return 10000000000000000000000000;\n  }\n  if (n == 27) {\n    return\
    \ 100000000000000000000000000;\n  }\n  if (n == 28)", "  long count = 0;\n  long\
    \ start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start *=\
    \ 10;\n    end *= 10;\n  }\n  count += (start - 1) * 9;\n  count += end;\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count;", "  // Write your code here\n  long dp[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = dp[i-1] + pow(10,i-1);\n\
    \  }\n  return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 10;\n  }\n  if (n == 2) {\n    return 100;\n  }\n  long count = 10;\n  long\
    \ start = 10;\n  long end = 10;\n  for (long i = 3; i <= n; i++) {\n    count\
    \ = start + end;\n    start = end;\n    end = count;\n  }\n  return count;", " \
    \ long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  for (long i =\
    \ 2; i <= n; i++) {\n    dp[i] = dp[i - 1] * 10 - dp[i - 2];\n  }\n  return dp[n];",
  "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    dp[i] = dp[i - 1] + pow(10, i - 1);\n  }\n  return dp[n];", "  if (n\
    \ == 1) {\n    return 2;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n\
    \  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i\
    \ - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n\
    \ == 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n\
    \  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i -\
    \ 2) + dp[i - 1];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n\
    \  long count = 0;\n  for (int i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++)\
    \ {\n    count += std::pow(10, i - 1);\n  }\n  return count;", "  long count =\
    \ 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n \
    \ return count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return\
    \ dp[n];", "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n       \
    \ long num = pow(10, i - 1);\n        count += 9 * num;\n    }\n    return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n     \
    \ count += 1;\n    } else {\n      count += 9 * std::pow(10, i - 2);\n    }\n\
    \  }\n  return count;", "    if (n == 1) {\n        return 2;\n    }\n    if (n\
    \ == 2) {\n        return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 10;\n  for (long i = 3; i <= n; i++) {\n    count += 9 *\
    \ pow(10, i - 2);\n  }\n  return count;", "  if (n == 1) {\n    return 10;\n \
    \ }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n\
    \ == 2) {\n    return 10;\n  }\n  long count = 10;\n  long prev = 10;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count = count + prev;\n    prev = count;\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count\
    \ += 9;\n    } else {\n      count += pow(10, i - 1) * 2;\n    }\n  }\n  return\
    \ count;", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i\
    \ = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + pow(10, i-1);\n    }\n    return\
    \ dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n\
    \  }\n  long result = 0;\n  long start_one = starts_one_ends(n - 1);\n  long end_one\
    \ = starts_one_ends(n - 2);\n  result = start_one + end_one;\n  return result;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++)\
    \ {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n \
    \   return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "    long\
    \ dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n\
    \        dp[i] = dp[i-1] + pow(10, i-1);\n    }\n    return dp[n];", "    long\
    \ dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n\
    \        dp[i] = dp[i-1] + (i-1)*dp[i-2];\n    }\n    return dp[n];", "    if\
    \ (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);", "    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        long num = pow(10,\
    \ i - 1);\n        count += 9 * num;\n    }\n    return count;", "  if (n == 1)\
    \ {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long count =\
    \ 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n \
    \   start *= 10;\n    end *= 10;\n  }\n  end += 1;\n  for (long i = start; i <\
    \ end; i++) {\n    if (i % 10 == 1) {\n      count++;\n    }\n  }\n  return count;",
  "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += 9 * pow(10, i - 1);\n  }\n  return count;", "  // Write\
    \ your code here\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return\
    \ 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for\
    \ (int i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n\
    \  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "    if (n == 1) {\n        return 2;\n    }\n    if (n\
    \ == 2) {\n        return 3;\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);", "    if (n == 1) {\n        return 10;\n    }\n    long count = 0;\n\
    \    for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n\
    \    return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "  long dp[n+1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    dp[i] = dp[i-1] +\
    \ 9*pow(10, i-2);\n  }\n  return dp[n];", "  assert(n > 0);\n  if (n == 1) {\n\
    \    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n  \
    \  count += pow(10, i - 1);\n  }\n  return count;", "    long dp[n+1];\n    memset(dp,\
    \ 0, sizeof(dp));\n    dp[1] = 1;\n    dp[2] = 2;\n    for(long i = 3; i <= n;\
    \ i++) {\n        dp[i] = dp[i-1] + dp[i-2];\n    }\n    return dp[n];", "   \
    \ long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n;\
    \ i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];", " \
    \ long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n  return dp[n];", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i < n; i++) {\n    count += starts_one_ends(i);\n\
    \  }\n  return count + 1;", "  long count = 0;\n  for (long i = 1; i <= n; i++)\
    \ {\n    long num = pow(10, i - 1);\n    count += 9 * num;\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++)\
    \ {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n \
    \   return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);", "    long count = 0;\n    if (n == 1) {\n \
    \       return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    if\
    \ (n == 3) {\n        return 100;\n    }\n    if (n == 4) {\n        return 1000;\n\
    \    }\n    if (n == 5) {\n        return 10000;\n    }\n    if (n == 6) {\n \
    \       return 100000;\n    }\n    if (n == 7) {\n        return 1000000;\n  \
    \  }\n    if (n == 8) {\n        return 10000000;\n    }\n    if (n == 9) {\n\
    \        return 100000000;\n    }\n    if (n == 10) {\n        return 1000000000;\n\
    \    }\n    if (n == 11) {\n        return 10000000000;\n    }\n    if (n == 12)\
    \ {\n        return 100000000000;\n    }\n    if (n == 13) {\n        return 1000000000000;\n\
    \    }\n    if (n == 14) {\n        return 10000000000000;\n    }\n    if (n ==\
    \ 15) {\n        return 100000000000000;\n    }\n    if (n == 16) {\n        return\
    \ 1000000000000000;\n    }\n    if (n == 17) {\n        return 10000000000000000;\n\
    \    }\n    if (n == 18) {\n        return 100000000000000000;\n    }\n    if\
    \ (n == 19) {\n        return 1000000000000000000;\n    }\n    if (n == 20) {\n\
    \        return 10000000000000000000;\n    }\n    return count;", "  // Write\
    \ your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n\
    \    dp[i] = dp[i-1]*10 + pow(10,i-1);\n  }\n  return dp[n];", "  // Write your\
    \ code here\n  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for\
    \ (int i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return\
    \ dp[n];", "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n \
    \       return 10;\n    }\n    long count = 0;\n    long start_one = 9;\n    long\
    \ end_one = 10;\n    long start_end_one = 9;\n    for (long i = 3; i <= n; i++)\
    \ {\n        count = start_one + end_one + start_end_one;\n        start_one =\
    \ start_end_one * 10;\n        end_one = start_end_one;\n        start_end_one\
    \ = count;\n    }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i\
    \ <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n\
    \ == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  if (n ==\
    \ 3) {\n    return 5;\n  }\n  long dp[n + 1];\n  dp[1] = 2;\n  dp[2] = 3;\n  dp[3]\
    \ = 5;\n  for (long i = 4; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n\
    \  }\n  return dp[n];", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for\
    \ (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n \
    \ }\n  return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  assert(n > 0);\n  if\
    \ (n == 1) {\n    return 1;\n  }\n  return (n - 1) * pow(10, n - 2) + starts_one_ends(n\
    \ - 1);", "  if (n == 1) return 1;\n  if (n == 2) return 2;\n  long count = 0;\n\
    \  long start = 1;\n  for (long i = 0; i < n - 1; i++) {\n    start *= 10;\n \
    \ }\n  count += start;\n  long end = 1;\n  for (long i = 0; i < n - 1; i++) {\n\
    \    end *= 10;\n    count += end;\n  }\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n   \
    \ } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 11;\n  long last_count = 11;\n  for (long i = 3; i <= n; i++) {\n  \
    \  count = 9 * last_count + pow(10, i - 2);\n    last_count = count;\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 10;\n  long last = 10;\n  for (long i = 3; i <= n; i++) {\n\
    \    count = count + last;\n    last = count;\n  }\n  return count;", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    long num = pow(10, i - 1);\n\
    \    count += 9 * num;\n  }\n  return count;", "    long dp[n+1];\n    dp[0] =\
    \ 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1]\
    \ + (i-1)*dp[i-2];\n    }\n    return dp[n];", "  if (n == 1) {\n    return 2;\n\
    \  }\n  if (n == 2) {\n    return 4;\n  }\n  long count = 0;\n  long start = 1;\n\
    \  long end = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n    end\
    \ *= 10;\n  }\n  count += start;\n  count += end;\n  count += (start - 1) * 9;\n\
    \  count += (end - 1) * 9;\n  return count;", "  long dp[n+1];\n  memset(dp, 0,\
    \ sizeof(dp));\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i-1]\
    \ + pow(10, i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 2;\n  }\n  long count = 0;\n  long start_one = 1;\n\
    \  long end_one = 1;\n  long start_two = 1;\n  long end_two = 1;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count = start_one + end_one;\n    start_one = start_two;\n\
    \    end_one = end_two;\n    start_two = count;\n    end_two = count;\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count = 1;\n \
    \ long i = 1;\n  while (i < n) {\n    count *= 10;\n    i++;\n  }\n  return 9\
    \ * count;", "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for(int i=2;i<=n;i++){\n    dp[i] = 9*dp[i-1] + pow(10,i-1);\n  }\n\
    \  return dp[n];", "  long count = 0;\n  if (n == 1) {\n    return 1;\n  }\n \
    \ if (n == 2) {\n    return 10;\n  }\n  if (n == 3) {\n    return 100;\n  }\n\
    \  if (n == 4) {\n    return 1000;\n  }\n  if (n == 5) {\n    return 10000;\n\
    \  }\n  if (n == 6) {\n    return 100000;\n  }\n  if (n == 7) {\n    return 1000000;\n\
    \  }\n  if (n == 8) {\n    return 10000000;\n  }\n  if (n == 9) {\n    return\
    \ 100000000;\n  }\n  if (n == 10) {\n    return 1000000000;\n  }\n  if (n == 11)\
    \ {\n    return 10000000000;\n  }\n  if (n == 12) {\n    return 100000000000;\n\
    \  }\n  if (n == 13) {\n    return 1000000000000;\n  }\n  if (n == 14) {\n   \
    \ return 10000000000000;\n  }\n  if (n == 15) {\n    return 100000000000000;\n\
    \  }\n  if (n == 16) {\n    return 1000000000000000;\n  }\n  if (n == 17) {\n\
    \    return 10000000000000000;\n  }\n  if (n == 18) {\n    return 100000000000000000;\n\
    \  }\n  if (n == 19) {\n    return 1000000000000000000;\n  }\n  if (n == 20) {\n\
    \    return 10000000000000000000;\n  }\n  if (n == 21) {\n    return 100000000000000000000;\n\
    \  }\n  if (n == 22) {\n    return 1000000000000000000000;\n  }\n  if (n == 23)\
    \ {\n    return 10000000000000000000000;\n  }\n  if (n == 24) {\n    return 100000000000000000000000;\n\
    \  }\n  if (n == 25) {\n    return 1000000000000000000000000;\n  }\n  if (n ==\
    \ 26) {\n    return 10000000000000000000000000;\n  }\n  if (n == 27) {\n    return\
    \ 100000000000000000000000000;\n  }\n  if (n == 28)", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start_one\
    \ = 1;\n  long end_one = 1;\n  long start_one_end_one = 1;\n  for (long i = 3;\
    \ i <= n; i++) {\n    count = start_one + end_one + start_one_end_one;\n    start_one\
    \ = end_one;\n    end_one = count;\n    start_one_end_one = start_one;\n  }\n\
    \  return count;", "  // Write your code here\n  long count = 0;\n  for (int i\
    \ = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 1;\n    } else {\n  \
    \    count += 9 * pow(10, i - 2);\n    }\n  }\n  return count;", "  // Write your\
    \ code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n\
    \    dp[i] = 9*pow(10,i-2);\n  }\n  return dp[n];", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = (dp[i - 1] * 10)\
    \ - (dp[i - 2] * 9);\n  }\n  return dp[n];", "    long count = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;"]
stop_tokens:
- "\n}"
