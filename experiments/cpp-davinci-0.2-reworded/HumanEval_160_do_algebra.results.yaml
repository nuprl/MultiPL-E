language: cpp
name: HumanEval_160_do_algebra
results:
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = stk.top();\n         \
    \   stk.pop();\n            long b = stk.top();\n            stk.pop();\n    \
    \        stk.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = stk.top();\n            stk.pop();\n            long b = stk.top();\n  \
    \          stk.pop();\n            stk.push(b - a);\n        } else if(op[i] ==\
    \ \"*\") {\n            long a = stk.top();\n            stk.pop();\n        \
    \    long b = stk.top();\n            stk.pop();\n            stk.push(a * b);\n\
    \        } else if(op[i] == \"//\") {\n            long a = stk.top();\n     \
    \       stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b / a);\n        } else if(op[i] == \"**\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        } else {\n\
    \            stk.push(operand[i]);\n        }\n    }\n    return stk.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  std::stack<long> s;\n  for(int i=0;i<op.size();i++){\n\
    \    if(op[i]==\"+\"){\n      long a=s.top();\n      s.pop();\n      long b=s.top();\n\
    \      s.pop();\n      s.push(a+b);\n    }\n    else if(op[i]==\"-\"){\n     \
    \ long a=s.top();\n      s.pop();\n      long b=s.top();\n      s.pop();\n   \
    \   s.push(b-a);\n    }\n    else if(op[i]==\"*\"){\n      long a=s.top();\n \
    \     s.pop();\n      long b=s.top();\n      s.pop();\n      s.push(a*b);\n  \
    \  }\n    else if(op[i]==\"//\"){\n      long a=s.top();\n      s.pop();\n   \
    \   long b=s.top();\n      s.pop();\n      s.push(b/a);\n    }\n    else if(op[i]==\"\
    **\"){\n      long a=s.top();\n      s.pop();\n      long b=s.top();\n      s.pop();\n\
    \      s.push(pow(b,a));\n    }\n    else{\n      s.push(operand[i]);\n    }\n\
    \  }\n  return s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  long result = operand[0];\n  for(int\
    \ i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n      result += operand[i+1];\n\
    \    }\n    else if(op[i] == \"-\"){\n      result -= operand[i+1];\n    }\n \
    \   else if(op[i] == \"*\"){\n      result *= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"//\"){\n      result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"\
    ){\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp6ztpju6t: /tmp/tmp6ztpju6t.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long op1 = stk.top();\n        stk.pop();\n\
    \        long op2 = operand[i+1];\n        if(op[i] == \"+\") {\n            stk.push(op1\
    \ + op2);\n        } else if(op[i] == \"-\") {\n            stk.push(op1 - op2);\n\
    \        } else if(op[i] == \"*\") {\n            stk.push(op1 * op2);\n     \
    \   } else if(op[i] == \"//\") {\n            stk.push(op1 / op2);\n        }\
    \ else if(op[i] == \"**\") {\n            stk.push(pow(op1, op2));\n        }\n\
    \    }\n    return stk.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpfbeweh9c: /tmp/tmpfbeweh9c.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057725
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use std::cout\n    // Example: std::cout << \"Hello world!\"\
    ;\n    stack<long> st;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1h1lr8i.cpp: In function \u2018long int do_algebra(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::vector<long int>)\u2019:\n/tmp/tmpy1h1lr8i.cpp:25:5: error: \u2018stack\u2019\
    \ was not declared in this scope; did you mean \u2018std::stack\u2019?\n   25\
    \ |     stack<long> st;\n      |     ^~~~~\n      |     std::stack\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpy1h1lr8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpy1h1lr8i.cpp:25:11: error: expected primary-expression\
    \ before \u2018long\u2019\n   25 |     stack<long> st;\n      |           ^~~~\n\
    /tmp/tmpy1h1lr8i.cpp:28:20: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   28 |             long a=st.top();\n      |\
    \                    ^~\n      |                    std\n/tmp/tmpy1h1lr8i.cpp:35:20:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   35 |             long a=st.top();\n      |                    ^~\n     \
    \ |                    std\n/tmp/tmpy1h1lr8i.cpp:42:20: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018std\u2019?\n   42 |     \
    \        long a=st.top();\n      |                    ^~\n      |            \
    \        std\n/tmp/tmpy1h1lr8i.cpp:49:20: error: \u2018st\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   49 |             long a=st.top();\n\
    \      |                    ^~\n      |                    std\n/tmp/tmpy1h1lr8i.cpp:56:20:\
    \ error: \u2018st\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   56 |             long a=st.top();\n      |                    ^~\n     \
    \ |                    std\n/tmp/tmpy1h1lr8i.cpp:63:13: error: \u2018st\u2019\
    \ was not declared in this scope; did you mean \u2018std\u2019?\n   63 |     \
    \        st.push(operand[i]);\n      |             ^~\n      |             std\n\
    /tmp/tmpy1h1lr8i.cpp:66:12: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n "
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long a = st.top();\n        st.pop();\n\
    \        long b = operand[i+1];\n        if(op[i] == \"+\") {\n            st.push(a+b);\n\
    \        } else if(op[i] == \"-\") {\n            st.push(a-b);\n        } else\
    \ if(op[i] == \"*\") {\n            st.push(a*b);\n        } else if(op[i] ==\
    \ \"//\") {\n            st.push(a/b);\n        } else if(op[i] == \"**\") {\n\
    \            st.push(pow(a, b));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbshnx3t6: /tmp/tmpbshnx3t6.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use std::cout\n    // Example: std::cout << \"Hello world!\"\
    ;\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n  \
    \      if(op[i] == \"+\"){\n            result += operand[i+1];\n        }else\
    \ if(op[i] == \"-\"){\n            result -= operand[i+1];\n        }else if(op[i]\
    \ == \"*\"){\n            result *= operand[i+1];\n        }else if(op[i] == \"\
    //\"){\n            result /= operand[i+1];\n        }else if(op[i] == \"**\"\
    ){\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzy0zcori: /tmp/tmpzy0zcori.cpp:44: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  long result = operand[0];\n  for(int\
    \ i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n      result += operand[i+1];\n\
    \    }\n    else if(op[i] == \"-\"){\n      result -= operand[i+1];\n    }\n \
    \   else if(op[i] == \"*\"){\n      result *= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"//\"){\n      result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"\
    ){\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp6ztpju6t: /tmp/tmp6ztpju6t.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = stk.top();\n         \
    \   stk.pop();\n            long b = stk.top();\n            stk.pop();\n    \
    \        stk.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = stk.top();\n            stk.pop();\n            long b = stk.top();\n  \
    \          stk.pop();\n            stk.push(b - a);\n        } else if(op[i] ==\
    \ \"*\") {\n            long a = stk.top();\n            stk.pop();\n        \
    \    long b = stk.top();\n            stk.pop();\n            stk.push(a * b);\n\
    \        } else if(op[i] == \"//\") {\n            long a = stk.top();\n     \
    \       stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b / a);\n        } else if(op[i] == \"**\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        }\n    }\n\
    \    return stk.top();\n}\nint main() {\n    auto candidate = do_algebra;\n  \
    \  assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = s.top();\n           \
    \ s.pop();\n            long b = s.top();\n            s.pop();\n            s.push(a\
    \ + b);\n        } else if(op[i] == \"-\") {\n            long a = s.top();\n\
    \            s.pop();\n            long b = s.top();\n            s.pop();\n \
    \           s.push(b - a);\n        } else if(op[i] == \"*\") {\n            long\
    \ a = s.top();\n            s.pop();\n            long b = s.top();\n        \
    \    s.pop();\n            s.push(a * b);\n        } else if(op[i] == \"//\")\
    \ {\n            long a = s.top();\n            s.pop();\n            long b =\
    \ s.top();\n            s.pop();\n            s.push(b / a);\n        } else if(op[i]\
    \ == \"**\") {\n            long a = s.top();\n            s.pop();\n        \
    \    long b = s.top();\n            s.pop();\n            s.push(pow(b, a));\n\
    \        } else {\n            s.push(operand[i]);\n        }\n    }\n    return\
    \ s.top();\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // your code here\n  std::stack<long> stk;\n  for(int i = 0; i\
    \ < op.size(); i++){\n    if(op[i] == \"+\"){\n      long a = stk.top();\n   \
    \   stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(a\
    \ + b);\n    }\n    else if(op[i] == \"-\"){\n      long a = stk.top();\n    \
    \  stk.pop();\n      long b = stk.top();\n      stk.pop();\n      stk.push(b -\
    \ a);\n    }\n    else if(op[i] == \"*\"){\n      long a = stk.top();\n      stk.pop();\n\
    \      long b = stk.top();\n      stk.pop();\n      stk.push(a * b);\n    }\n\
    \    else if(op[i] == \"//\"){\n      long a = stk.top();\n      stk.pop();\n\
    \      long b = stk.top();\n      stk.pop();\n      stk.push(b / a);\n    }\n\
    \    else if(op[i] == \"**\"){\n      long a = stk.top();\n      stk.pop();\n\
    \      long b = stk.top();\n      stk.pop();\n      stk.push(pow(b, a));\n   \
    \ }\n    else{\n      stk.push(operand[i]);\n    }\n  }\n  return stk.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a*b);\n        }\n\
    \        else if(op[i]==\"//\"){\n            long a = st.top();\n           \
    \ st.pop();\n            long b = st.top();\n            st.pop();\n         \
    \   st.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(pow(b,a));\n        }\n        else{\n\
    \            st.push(operand[i]);\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a*b);\n        }\n\
    \        else if(op[i]==\"//\"){\n            long a = st.top();\n           \
    \ st.pop();\n            long b = st.top();\n            st.pop();\n         \
    \   st.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(pow(b,a));\n        }\n        else{\n\
    \            st.push(operand[i]);\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> s;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=s.top();\n\
    \            s.pop();\n            long b=s.top();\n            s.pop();\n   \
    \         s.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n          \
    \  long a=s.top();\n            s.pop();\n            long b=s.top();\n      \
    \      s.pop();\n            s.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(b/a);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(pow(b,a));\n        }\n        else{\n\
    \            s.push(operand[i]);\n        }\n    }\n    return s.top();\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\
    \t\tif (op[i] == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong\
    \ b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\t}\n\t\telse if (op[i]\
    \ == \"-\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(a * b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a =\
    \ st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\t\
    st.push(b / a);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b,\
    \ a));\n\t\t}\n\t\telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            st.push(operand[i+1]);\n\
    \        } else if(op[i] == \"-\") {\n            st.push(-operand[i+1]);\n  \
    \      } else if(op[i] == \"*\") {\n            long temp = st.top();\n      \
    \      st.pop();\n            st.push(temp * operand[i+1]);\n        } else if(op[i]\
    \ == \"//\") {\n            long temp = st.top();\n            st.pop();\n   \
    \         st.push(temp / operand[i+1]);\n        } else if(op[i] == \"**\") {\n\
    \            long temp = st.top();\n            st.pop();\n            st.push(pow(temp,\
    \ operand[i+1]));\n        }\n    }\n    long sum = 0;\n    while(!st.empty())\
    \ {\n        sum += st.top();\n        st.pop();\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  // To print results to the standard\
    \ output you can use std::cout\n  // Example: std::cout << \"Hello world!\";\n\
    \  std::stack<long> st;\n  for(int i=0;i<op.size();i++){\n      if(op[i]==\"+\"\
    ){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(a+b);\n      }\n      else if(op[i]==\"\
    -\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(b-a);\n      }\n      else if(op[i]==\"\
    *\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(a*b);\n      }\n      else if(op[i]==\"\
    //\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(b/a);\n      }\n      else if(op[i]==\"\
    **\"){\n          long a=st.top();\n          st.pop();\n          long b=st.top();\n\
    \          st.pop();\n          st.push(pow(b,a));\n      }\n      else{\n   \
    \       st.push(operand[i]);\n      }\n  }\n  return st.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbh9dp7d4: /tmp/tmpbh9dp7d4.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> s;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a = s.top();\n\
    \            s.pop();\n            long b = s.top();\n            s.pop();\n \
    \           s.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n        \
    \    long a = s.top();\n            s.pop();\n            long b = s.top();\n\
    \            s.pop();\n            s.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a = s.top();\n            s.pop();\n            long b\
    \ = s.top();\n            s.pop();\n            s.push(a*b);\n        }\n    \
    \    else if(op[i]==\"//\"){\n            long a = s.top();\n            s.pop();\n\
    \            long b = s.top();\n            s.pop();\n            s.push(b/a);\n\
    \        }\n        else if(op[i]==\"**\"){\n            long a = s.top();\n \
    \           s.pop();\n            long b = s.top();\n            s.pop();\n  \
    \          s.push(pow(b,a));\n        }\n        else{\n            s.push(operand[i]);\n\
    \        }\n    }\n    return s.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbh9dp7d4: /tmp/tmpbh9dp7d4.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    s.push(operand[0]);\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        long a = s.top();\n        s.pop();\n  \
    \      long b = operand[i+1];\n        if(op[i] == \"+\") {\n            s.push(a+b);\n\
    \        } else if(op[i] == \"-\") {\n            s.push(a-b);\n        } else\
    \ if(op[i] == \"*\") {\n            s.push(a*b);\n        } else if(op[i] == \"\
    //\") {\n            s.push(a/b);\n        } else if(op[i] == \"**\") {\n    \
    \        s.push(pow(a,b));\n        }\n    }\n    return s.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp_r47j0iw: /tmp/tmp_r47j0iw.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }else if(op[i] == \"-\"){\n            result\
    \ -= operand[i+1];\n        }else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }else if(op[i] == \"//\"){\n            result /= operand[i+1];\n   \
    \     }else if(op[i] == \"**\"){\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpufntdmvn: /tmp/tmpufntdmvn.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbh9dp7d4: /tmp/tmpbh9dp7d4.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  // To print results to the standard\
    \ output you can use std::cout\n  // Example: std::cout << \"Hello world!\";\n\
    \  long result = operand[0];\n  for(int i = 0; i < op.size(); i++){\n      if(op[i]\
    \ == \"+\"){\n          result += operand[i+1];\n      }\n      else if(op[i]\
    \ == \"-\"){\n          result -= operand[i+1];\n      }\n      else if(op[i]\
    \ == \"*\"){\n          result *= operand[i+1];\n      }\n      else if(op[i]\
    \ == \"//\"){\n          result /= operand[i+1];\n      }\n      else if(op[i]\
    \ == \"**\"){\n          result = pow(result, operand[i+1]);\n      }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpc2fevbta: /tmp/tmpc2fevbta.cpp:48: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = stk.top();\n         \
    \   stk.pop();\n            long b = stk.top();\n            stk.pop();\n    \
    \        stk.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = stk.top();\n            stk.pop();\n            long b = stk.top();\n  \
    \          stk.pop();\n            stk.push(b - a);\n        } else if(op[i] ==\
    \ \"*\") {\n            long a = stk.top();\n            stk.pop();\n        \
    \    long b = stk.top();\n            stk.pop();\n            stk.push(a * b);\n\
    \        } else if(op[i] == \"//\") {\n            long a = stk.top();\n     \
    \       stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b / a);\n        } else if(op[i] == \"**\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        } else {\n\
    \            stk.push(operand[i]);\n        }\n    }\n    return stk.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  // Write your code here\n  long result = operand[0];\n  for(int\
    \ i = 0; i < op.size(); i++){\n    if(op[i] == \"+\"){\n      result += operand[i+1];\n\
    \    }\n    else if(op[i] == \"-\"){\n      result -= operand[i+1];\n    }\n \
    \   else if(op[i] == \"*\"){\n      result *= operand[i+1];\n    }\n    else if(op[i]\
    \ == \"//\"){\n      result /= operand[i+1];\n    }\n    else if(op[i] == \"**\"\
    ){\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp6ztpju6t: /tmp/tmp6ztpju6t.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tlong result = operand[0];\n\tfor (int i = 0; i < op.size(); i++)\
    \ {\n\t\tif (op[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse\
    \ if (op[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (op[i]\
    \ == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"\
    //\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (op[i] == \"**\"\
    ) {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbh9dp7d4: /tmp/tmpbh9dp7d4.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            res -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            res *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpirxcuwpv: /tmp/tmpirxcuwpv.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\
    \t\tif (op[i] == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong\
    \ b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\t}\n\t\telse if (op[i]\
    \ == \"-\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(a * b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a =\
    \ st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\t\
    st.push(b / a);\n\t\t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b,\
    \ a));\n\t\t}\n\t\telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 1; i < operand.size(); i++){\n        if(op[i-1] == \"+\"){\n  \
    \          result += operand[i];\n        }\n        else if(op[i-1] == \"-\"\
    ){\n            result -= operand[i];\n        }\n        else if(op[i-1] == \"\
    *\"){\n            result *= operand[i];\n        }\n        else if(op[i-1] ==\
    \ \"//\"){\n            result /= operand[i];\n        }\n        else if(op[i-1]\
    \ == \"**\"){\n            result = pow(result, operand[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp965ka6po: /tmp/tmp965ka6po.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long res = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            res +=\
    \ operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            res\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            res\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ res /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n       \
    \     res = pow(res, operand[i+1]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp5ct4g92b: /tmp/tmp5ct4g92b.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> stk;\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            long a\
    \ = stk.top();\n            stk.pop();\n            long b = stk.top();\n    \
    \        stk.pop();\n            stk.push(a + b);\n        }\n        else if(op[i]\
    \ == \"-\"){\n            long a = stk.top();\n            stk.pop();\n      \
    \      long b = stk.top();\n            stk.pop();\n            stk.push(b - a);\n\
    \        }\n        else if(op[i] == \"*\"){\n            long a = stk.top();\n\
    \            stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(a * b);\n        }\n        else if(op[i] == \"//\"){\n\
    \            long a = stk.top();\n            stk.pop();\n            long b =\
    \ stk.top();\n            stk.pop();\n            stk.push(b / a);\n        }\n\
    \        else if(op[i] == \"**\"){\n            long a = stk.top();\n        \
    \    stk.pop();\n            long b = stk.top();\n            stk.pop();\n   \
    \         stk.push(pow(b, a));\n        }\n        else{\n            stk.push(operand[i]);\n\
    \        }\n    }\n    return stk.top();\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  std::stack<long> st;\n  for(int i = 0; i < op.size(); i++) {\n\
    \    if(op[i] == \"+\") {\n      long a = st.top();\n      st.pop();\n      long\
    \ b = st.top();\n      st.pop();\n      st.push(a + b);\n    } else if(op[i] ==\
    \ \"-\") {\n      long a = st.top();\n      st.pop();\n      long b = st.top();\n\
    \      st.pop();\n      st.push(b - a);\n    } else if(op[i] == \"*\") {\n   \
    \   long a = st.top();\n      st.pop();\n      long b = st.top();\n      st.pop();\n\
    \      st.push(a * b);\n    } else if(op[i] == \"//\") {\n      long a = st.top();\n\
    \      st.pop();\n      long b = st.top();\n      st.pop();\n      st.push(b /\
    \ a);\n    } else if(op[i] == \"**\") {\n      long a = st.top();\n      st.pop();\n\
    \      long b = st.top();\n      st.pop();\n      st.push(pow(b, a));\n    }\n\
    \  }\n  return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long op2 = operand[i+1];\n        if(op[i]\
    \ == \"+\") {\n            st.push(op2);\n        } else if(op[i] == \"-\") {\n\
    \            st.push(-op2);\n        } else if(op[i] == \"*\") {\n           \
    \ long op1 = st.top();\n            st.pop();\n            st.push(op1 * op2);\n\
    \        } else if(op[i] == \"//\") {\n            long op1 = st.top();\n    \
    \        st.pop();\n            st.push(op1 / op2);\n        } else if(op[i] ==\
    \ \"**\") {\n            long op1 = st.top();\n            st.pop();\n       \
    \     st.push(pow(op1, op2));\n        }\n    }\n    long res = 0;\n    while(!st.empty())\
    \ {\n        res += st.top();\n        st.pop();\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long op2 = operand[i+1];\n        long\
    \ op1 = st.top();\n        st.pop();\n        if(op[i] == \"+\") {\n         \
    \   st.push(op1 + op2);\n        } else if(op[i] == \"-\") {\n            st.push(op1\
    \ - op2);\n        } else if(op[i] == \"*\") {\n            st.push(op1 * op2);\n\
    \        } else if(op[i] == \"//\") {\n            st.push(op1 / op2);\n     \
    \   } else if(op[i] == \"**\") {\n            st.push(pow(op1, op2));\n      \
    \  }\n    }\n    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpsldsz9t3: /tmp/tmpsldsz9t3.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use std::cout\n    // Example: std::cout << \"Hello world!\"\
    ;\n    long result = operand[0];\n    for(int i = 0; i < op.size(); i++){\n  \
    \      if(op[i] == \"+\"){\n            result += operand[i+1];\n        }\n \
    \       else if(op[i] == \"-\"){\n            result -= operand[i+1];\n      \
    \  }\n        else if(op[i] == \"*\"){\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\"){\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\"){\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp1ccklwt7: /tmp/tmp1ccklwt7.cpp:48: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // your code here\n    long result = operand[0];\n    for(int\
    \ i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n            result\
    \ += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n            result\
    \ -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n            result\
    \ *= operand[i+1];\n        }\n        else if(op[i] == \"//\"){\n           \
    \ result /= operand[i+1];\n        }\n        else if(op[i] == \"**\"){\n    \
    \        result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp3adi_d5e: /tmp/tmp3adi_d5e.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        if(op[i] == \"+\") {\n            st.push(operand[i+1]);\n\
    \        } else if(op[i] == \"-\") {\n            st.push(-operand[i+1]);\n  \
    \      } else if(op[i] == \"*\") {\n            long temp = st.top();\n      \
    \      st.pop();\n            st.push(temp * operand[i+1]);\n        } else if(op[i]\
    \ == \"//\") {\n            long temp = st.top();\n            st.pop();\n   \
    \         st.push(temp / operand[i+1]);\n        } else if(op[i] == \"**\") {\n\
    \            long temp = st.top();\n            st.pop();\n            st.push(pow(temp,\
    \ operand[i+1]));\n        }\n    }\n    long result = 0;\n    while(!st.empty())\
    \ {\n        result += st.top();\n        st.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> s;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            s.push(operand[i]+operand[i+1]);\n\
    \        }\n        else if(op[i]==\"-\"){\n            s.push(operand[i]-operand[i+1]);\n\
    \        }\n        else if(op[i]==\"*\"){\n            s.push(operand[i]*operand[i+1]);\n\
    \        }\n        else if(op[i]==\"//\"){\n            s.push(operand[i]/operand[i+1]);\n\
    \        }\n        else if(op[i]==\"**\"){\n            s.push(pow(operand[i],operand[i+1]));\n\
    \        }\n    }\n    return s.top();\n}\nint main() {\n    auto candidate =\
    \ do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp4j65u83e: /tmp/tmp4j65u83e.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"**",
    (std::string)"*", (std::string)"+"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (37)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\n\
    \        else if(op[i] == \"-\") {\n            res -= operand[i+1];\n       \
    \ }\n        else if(op[i] == \"*\") {\n            res *= operand[i+1];\n   \
    \     }\n        else if(op[i] == \"//\") {\n            res /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpirxcuwpv: /tmp/tmpirxcuwpv.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    // To print results to the standard\
    \ output you can use std::cout\n    // Example: std::cout << \"Hello world!\"\
    ;\n    std::stack<long> s;\n    for(int i=0;i<op.size();i++){\n        if(op[i]==\"\
    +\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(a+b);\n        }\n        else if(op[i]==\"\
    -\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(b/a);\n        }\n        else if(op[i]==\"\
    **\"){\n            long a=s.top();\n            s.pop();\n            long b=s.top();\n\
    \            s.pop();\n            s.push(pow(b,a));\n        }\n        else{\n\
    \            s.push(operand[i]);\n        }\n    }\n    return s.top();\n}\nint\
    \ main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    if(op.size() == 0)\n        return operand[0];\n    long res\
    \ = operand[0];\n    for(int i = 0; i < op.size(); i++){\n        if(op[i] ==\
    \ \"+\")\n            res += operand[i+1];\n        else if(op[i] == \"-\")\n\
    \            res -= operand[i+1];\n        else if(op[i] == \"*\")\n         \
    \   res *= operand[i+1];\n        else if(op[i] == \"//\")\n            res /=\
    \ operand[i+1];\n        else if(op[i] == \"**\")\n            res = pow(res,\
    \ operand[i+1]);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp8_ojijut: /tmp/tmp8_ojijut.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    st.push(operand[0]);\n    for(int\
    \ i = 0; i < op.size(); i++) {\n        long a = st.top();\n        st.pop();\n\
    \        long b = operand[i+1];\n        if(op[i] == \"+\") {\n            st.push(a+b);\n\
    \        } else if(op[i] == \"-\") {\n            st.push(a-b);\n        } else\
    \ if(op[i] == \"*\") {\n            st.push(a*b);\n        } else if(op[i] ==\
    \ \"//\") {\n            st.push(a/b);\n        } else if(op[i] == \"**\") {\n\
    \            st.push(pow(a, b));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpbshnx3t6: /tmp/tmpbshnx3t6.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> s;\n    s.push(operand[0]);\n    for(int i\
    \ = 0; i < op.size(); i++) {\n        long a = s.top();\n        s.pop();\n  \
    \      long b = operand[i+1];\n        if(op[i] == \"+\") {\n            s.push(a+b);\n\
    \        } else if(op[i] == \"-\") {\n            s.push(a-b);\n        } else\
    \ if(op[i] == \"*\") {\n            s.push(a*b);\n        } else if(op[i] == \"\
    //\") {\n            s.push(a/b);\n        } else if(op[i] == \"**\") {\n    \
    \        s.push(pow(a,b));\n        }\n    }\n    return s.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp_r47j0iw: /tmp/tmp_r47j0iw.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a = st.top();\n            st.pop();\n            long\
    \ b = st.top();\n            st.pop();\n            st.push(a*b);\n        }\n\
    \        else if(op[i]==\"//\"){\n            long a = st.top();\n           \
    \ st.pop();\n            long b = st.top();\n            st.pop();\n         \
    \   st.push(b/a);\n        }\n        else if(op[i]==\"**\"){\n            long\
    \ a = st.top();\n            st.pop();\n            long b = st.top();\n     \
    \       st.pop();\n            st.push(pow(b,a));\n        }\n        else{\n\
    \            st.push(operand[i]);\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n\t// Write your code here\n\t// To print results to the standard\
    \ output you can use std::cout\n\t// Example: std::cout << \"Hello world!\";\n\
    \tstd::stack<long> st;\n\tfor (int i = 0; i < op.size(); i++) {\n\t\tif (op[i]\
    \ == \"+\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\
    \t\t\tst.pop();\n\t\t\tst.push(a + b);\n\t\t}\n\t\telse if (op[i] == \"-\") {\n\
    \t\t\tlong a = st.top();\n\t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\
    \t\t\tst.push(b - a);\n\t\t}\n\t\telse if (op[i] == \"*\") {\n\t\t\tlong a = st.top();\n\
    \t\t\tst.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(a *\
    \ b);\n\t\t}\n\t\telse if (op[i] == \"//\") {\n\t\t\tlong a = st.top();\n\t\t\t\
    st.pop();\n\t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(b / a);\n\t\
    \t}\n\t\telse if (op[i] == \"**\") {\n\t\t\tlong a = st.top();\n\t\t\tst.pop();\n\
    \t\t\tlong b = st.top();\n\t\t\tst.pop();\n\t\t\tst.push(pow(b, a));\n\t\t}\n\t\
    \telse {\n\t\t\tst.push(operand[i]);\n\t\t}\n\t}\n\treturn st.top();\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057726
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        }\n        else if(op[i] == \"-\") {\n            result -= operand[i+1];\n\
    \        }\n        else if(op[i] == \"*\") {\n            result *= operand[i+1];\n\
    \        }\n        else if(op[i] == \"//\") {\n            result /= operand[i+1];\n\
    \        }\n        else if(op[i] == \"**\") {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpp5i5o9le: /tmp/tmpp5i5o9le.cpp:45: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long res = operand[0];\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            res += operand[i+1];\n        }\
    \ else if(op[i] == \"-\") {\n            res -= operand[i+1];\n        } else\
    \ if(op[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(op[i]\
    \ == \"//\") {\n            res /= operand[i+1];\n        } else if(op[i] == \"\
    **\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmp9ysx5dcr: /tmp/tmp9ysx5dcr.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n  long result = operand[0];\n  for (int i = 0; i < op.size(); i++)\
    \ {\n    if (op[i] == \"+\") {\n      result += operand[i + 1];\n    } else if\
    \ (op[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (op[i] ==\
    \ \"*\") {\n      result *= operand[i + 1];\n    } else if (op[i] == \"//\") {\n\
    \      result /= operand[i + 1];\n    } else if (op[i] == \"**\") {\n      result\
    \ = pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpv9u4glaq: /tmp/tmpv9u4glaq.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        } else if(op[i] == \"-\") {\n            long a\
    \ = st.top();\n            st.pop();\n            long b = st.top();\n       \
    \     st.pop();\n            st.push(b - a);\n        } else if(op[i] == \"*\"\
    ) {\n            long a = st.top();\n            st.pop();\n            long b\
    \ = st.top();\n            st.pop();\n            st.push(a * b);\n        } else\
    \ if(op[i] == \"//\") {\n            long a = st.top();\n            st.pop();\n\
    \            long b = st.top();\n            st.pop();\n            st.push(b\
    \ / a);\n        } else if(op[i] == \"**\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(pow(b, a));\n        }\n    }\n    return st.top();\n}\n\
    int main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> stk;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = stk.top();\n         \
    \   stk.pop();\n            long b = stk.top();\n            stk.pop();\n    \
    \        stk.push(a + b);\n        } else if(op[i] == \"-\") {\n            long\
    \ a = stk.top();\n            stk.pop();\n            long b = stk.top();\n  \
    \          stk.pop();\n            stk.push(b - a);\n        } else if(op[i] ==\
    \ \"*\") {\n            long a = stk.top();\n            stk.pop();\n        \
    \    long b = stk.top();\n            stk.pop();\n            stk.push(a * b);\n\
    \        } else if(op[i] == \"//\") {\n            long a = stk.top();\n     \
    \       stk.pop();\n            long b = stk.top();\n            stk.pop();\n\
    \            stk.push(b / a);\n        } else if(op[i] == \"**\") {\n        \
    \    long a = stk.top();\n            stk.pop();\n            long b = stk.top();\n\
    \            stk.pop();\n            stk.push(pow(b, a));\n        } else {\n\
    \            stk.push(operand[i]);\n        }\n    }\n    return stk.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    std::stack<long> st;\n    for(int\
    \ i=0;i<op.size();i++){\n        if(op[i]==\"+\"){\n            long a=st.top();\n\
    \            st.pop();\n            long b=st.top();\n            st.pop();\n\
    \            st.push(a+b);\n        }\n        else if(op[i]==\"-\"){\n      \
    \      long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(b-a);\n        }\n        else if(op[i]==\"\
    *\"){\n            long a=st.top();\n            st.pop();\n            long b=st.top();\n\
    \            st.pop();\n            st.push(a*b);\n        }\n        else if(op[i]==\"\
    //\"){\n            long a=st.top();\n            st.pop();\n            long\
    \ b=st.top();\n            st.pop();\n            st.push(b/a);\n        }\n \
    \       else if(op[i]==\"**\"){\n            long a=st.top();\n            st.pop();\n\
    \            long b=st.top();\n            st.pop();\n            st.push(pow(b,a));\n\
    \        }\n        else{\n            st.push(operand[i]);\n        }\n    }\n\
    \    return st.top();\n}\nint main() {\n    auto candidate = do_algebra;\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    std::stack<long> st;\n    for(int i = 0; i < op.size(); i++)\
    \ {\n        if(op[i] == \"+\") {\n            long a = st.top();\n          \
    \  st.pop();\n            long b = st.top();\n            st.pop();\n        \
    \    st.push(a + b);\n        }\n        else if(op[i] == \"-\") {\n         \
    \   long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(b - a);\n        }\n        else if(op[i]\
    \ == \"*\") {\n            long a = st.top();\n            st.pop();\n       \
    \     long b = st.top();\n            st.pop();\n            st.push(a * b);\n\
    \        }\n        else if(op[i] == \"//\") {\n            long a = st.top();\n\
    \            st.pop();\n            long b = st.top();\n            st.pop();\n\
    \            st.push(b / a);\n        }\n        else if(op[i] == \"**\") {\n\
    \            long a = st.top();\n            st.pop();\n            long b = st.top();\n\
    \            st.pop();\n            st.push(pow(b, a));\n        }\n        else\
    \ {\n            st.push(operand[i]);\n        }\n    }\n    return st.top();\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    // Write your code here\n    long result = operand[0];\n   \
    \ for(int i = 0; i < op.size(); i++){\n        if(op[i] == \"+\"){\n         \
    \   result += operand[i+1];\n        }\n        else if(op[i] == \"-\"){\n   \
    \         result -= operand[i+1];\n        }\n        else if(op[i] == \"*\"){\n\
    \            result *= operand[i+1];\n        }\n        else if(op[i] == \"//\"\
    ){\n            result /= operand[i+1];\n        }\n        else if(op[i] == \"\
    **\"){\n            result = pow(result, operand[i+1]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpzx_3qevt: /tmp/tmpzx_3qevt.cpp:46: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n// the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n// expression and return the evaluation of this expression.\n// The basic\
    \ algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
    \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n\
    // operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 -\
    \ 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to\
    \ the length of operand vector minus one.\n// Operand is a vector of of non-negative\
    \ integers.\n// Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long>\
    \ operand) {\n    long result = operand[0];\n    for(int i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i+1];\n\
    \        } else if(op[i] == \"-\") {\n            result -= operand[i+1];\n  \
    \      } else if(op[i] == \"*\") {\n            result *= operand[i+1];\n    \
    \    } else if(op[i] == \"//\") {\n            result /= operand[i+1];\n     \
    \   } else if(op[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: Exception
  stderr: 'tmpez28q3w5: /tmp/tmpez28q3w5.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"+",
    (std::string)"*", (std::string)"-"})), (std::vector<long>({(long)2, (long)3, (long)4,
    (long)5}))) == (9)'' failed.

    '
  stdout: ''
  timestamp: 1660057724
