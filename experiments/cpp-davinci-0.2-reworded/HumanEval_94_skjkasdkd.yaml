name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of\
  \ integers.\n// You need to find the largest prime value and return the sum of its\
  \ digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3,\
  \ (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5,\
  \ (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324,\
  \ (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0,\
  \ (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1,\
  \ (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n//\
  \ >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107,\
  \ (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30,\
  \ (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
  \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
  \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
  \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
  \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
  \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
  \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
  \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
  \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
  \ (long)97, (long)8192}))) == (10));\n}\n"
completions: ["    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n\
    \        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime) {\n            bool is_prime = true;\n\
    \            for (long j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long max = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    return sum;", "    long\
    \ max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] >\
    \ max) {\n            max = lst[i];\n        }\n    }\n    for (long i = max;\
    \ i > 1; i--) {\n        bool isPrime = true;\n        for (long j = 2; j < i;\
    \ j++) {\n            if (i % j == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        if (isPrime) {\n    \
    \        long sum = 0;\n            long num = i;\n            while (num > 0)\
    \ {\n                sum += num % 10;\n                num /= 10;\n          \
    \  }\n            return sum;\n        }\n    }\n    return 0;", "    long largest_prime\
    \ = 0;\n    for (auto i : lst) {\n        if (i > largest_prime && i % 2 != 0\
    \ && i % 3 != 0 && i % 5 != 0 && i % 7 != 0) {\n            largest_prime = i;\n\
    \        }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n      \
    \  sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return\
    \ sum;", "  long max = 0;\n  for (auto i : lst) {\n    if (i > max) {\n      max\
    \ = i;\n    }\n  }\n  long sum = 0;\n  while (max > 0) {\n    sum += max % 10;\n\
    \    max /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n         \
    \   bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n \
    \               if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = lst[i];\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long max = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n  \
    \          max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max\
    \ > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long largest = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largest) {\n            largest = lst[i];\n   \
    \     }\n    }\n    long sum = 0;\n    while (largest > 0) {\n        sum += largest\
    \ % 10;\n        largest /= 10;\n    }\n    return sum;", "    // your code here\n\
    \    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        for(int\
    \ j = 0; j < lst.size(); j++){\n            if(primes[i] == lst[j]){\n       \
    \         if(primes[i] > maxPrime){\n                    maxPrime = primes[i];\n\
    \                }\n            }\n        }\n    }\n    long sum = 0;\n    while(maxPrime\
    \ > 0){\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;", "    std::vector<long> primes;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] == 0 || lst[i] == 1) {\n            continue;\n \
    \       }\n        bool is_prime = true;\n        for (long j = 2; j < lst[i];\
    \ j++) {\n            if (lst[i] % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           primes.push_back(lst[i]);\n        }\n    }\n    long max_prime =\
    \ *std::max_element(primes.begin(), primes.end());\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                largest_prime = lst[i];\n            }\n        }\n    }\n\
    \    long sum = 0;\n    while (largest_prime > 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                max_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n       \
    \ if (i > max_prime && is_prime(i)) {\n            max_prime = i;\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (auto i : lst) {\n        if (i > max_prime && std::is_prime(i))\
    \ {\n            max_prime = i;\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "  long max_prime = 0;\n  for (auto i : lst) {\n   \
    \ if (i > max_prime && is_prime(i)) {\n      max_prime = i;\n    }\n  }\n  long\
    \ sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime % 10;\n    max_prime\
    \ /= 10;\n  }\n  return sum;", "    long largest = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest) {\n            largest =\
    \ lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest > 0) {\n  \
    \      sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;",
  "    long res = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > res) {\n            bool isPrime = true;\n            for (long j = 2; j <\
    \ lst[i]; j++) {\n                if (lst[i] % j == 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                res = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (res > 0) {\n        sum += res\
    \ % 10;\n        res /= 10;\n    }\n    return sum;", "    long largest_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime\
    \ && lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i] % 5 != 0 && lst[i] % 7 != 0\
    \ && lst[i] % 11 != 0 && lst[i] % 13 != 0 && lst[i] % 17 != 0 && lst[i] % 19 !=\
    \ 0 && lst[i] % 23 != 0 && lst[i] % 29 != 0 && lst[i] % 31 != 0 && lst[i] % 37\
    \ != 0 && lst[i] % 41 != 0 && lst[i] % 43 != 0 && lst[i] % 47 != 0 && lst[i] %\
    \ 53 != 0 && lst[i] % 59 != 0 && lst[i] % 61 != 0 && lst[i] % 67 != 0 && lst[i]\
    \ % 71 != 0 && lst[i] % 73 != 0 && lst[i] % 79 != 0 && lst[i] % 83 != 0 && lst[i]\
    \ % 89 != 0 && lst[i] % 97 != 0 && lst[i] % 101 != 0 && lst[i] % 103 != 0 && lst[i]\
    \ % 107 != 0 && lst[i] % 109 != 0 && lst[i] % 113 != 0 && lst[i] % 127 != 0 &&\
    \ lst[i] % 131 != 0 && lst[i] % 137 != 0 && lst[i] % 139 != 0 && lst[i] % 149\
    \ != 0 && lst[i] % 151 != 0 && lst[i] % 157 != 0 && lst[i] % 163 != 0 && lst[i]\
    \ % 167 != 0 && lst[i] % 173 != 0 && lst[i] % 179 != 0 && lst[i] % 181 != 0 &&\
    \ lst[i] % 191 != 0 && lst[i] % 193 != 0 && lst[i] % 197 != 0 && lst[i] % 199\
    \ != 0 && lst[i] % 211 != 0 &&", "    long largest_prime = 0;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n       \
    \     bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n\
    \                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                largest_prime = lst[i];\n            }\n     \
    \   }\n    }\n    long sum = 0;\n    while (largest_prime > 0) {\n        sum\
    \ += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    return sum;",
  "    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ num = lst[i];\n        if (num <= 1) {\n            continue;\n        }\n \
    \       bool is_prime = true;\n        for (long j = 2; j <= std::sqrt(num); j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       max_prime = std::max(max_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long max = 0;\n    for\
    \ (auto i : lst) {\n        if (i > max) {\n            max = i;\n        }\n\
    \    }\n    std::vector<long> primes;\n    for (long i = 2; i <= max; i++) {\n\
    \        bool is_prime = true;\n        for (auto j : primes) {\n            if\
    \ (i % j == 0) {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long max_prime = 0;\n    for (auto i : lst) {\n       \
    \ for (auto j : primes) {\n            if (i == j) {\n                if (i >\
    \ max_prime) {\n                    max_prime = i;\n                }\n      \
    \      }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n \
    \       sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;",
  "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n    }\n    long sum = 0;\n \
    \   while (max > 0) {\n        sum += max % 10;\n        max /= 10;\n    }\n \
    \   return sum;", "    long max_prime = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime) {\n            bool is_prime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime && is_prime(lst[i]))\
    \ {\n            max_prime = lst[i];\n        }\n    }\n    return sum_digits(max_prime);",
  "    long largest_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    if (lst[i] > largest_prime && lst[i] % 2 != 0 && lst[i] % 3 != 0 && lst[i]\
    \ % 5 != 0 && lst[i] % 7 != 0 && lst[i] % 11 != 0 && lst[i] % 13 != 0 && lst[i]\
    \ % 17 != 0 && lst[i] % 19 != 0 && lst[i] % 23 != 0 && lst[i] % 29 != 0 && lst[i]\
    \ % 31 != 0 && lst[i] % 37 != 0 && lst[i] % 41 != 0 && lst[i] % 43 != 0 && lst[i]\
    \ % 47 != 0 && lst[i] % 53 != 0 && lst[i] % 59 != 0 && lst[i] % 61 != 0 && lst[i]\
    \ % 67 != 0 && lst[i] % 71 != 0 && lst[i] % 73 != 0 && lst[i] % 79 != 0 && lst[i]\
    \ % 83 != 0 && lst[i] % 89 != 0 && lst[i] % 97 != 0 && lst[i] % 101 != 0 && lst[i]\
    \ % 103 != 0 && lst[i] % 107 != 0 && lst[i] % 109 != 0 && lst[i] % 113 != 0 &&\
    \ lst[i] % 127 != 0 && lst[i] % 131 != 0 && lst[i] % 137 != 0 && lst[i] % 139\
    \ != 0 && lst[i] % 149 != 0 && lst[i] % 151 != 0 && lst[i] % 157 != 0 && lst[i]\
    \ % 163 != 0 && lst[i] % 167 != 0 && lst[i] % 173 != 0 && lst[i] % 179 != 0 &&\
    \ lst[i] % 181 != 0 && lst[i] % 191 != 0 && lst[i] % 193 != 0 && lst[i] % 197\
    \ != 0 && lst[i] % 199 != 0 && lst[i] % 211 != 0 &&", "    long max_prime = 0;\n\
    \    for (auto i : lst) {\n        if (i > max_prime) {\n            bool is_prime\
    \ = true;\n            for (long j = 2; j <= i / 2; j++) {\n                if\
    \ (i % j == 0) {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if (is_prime) {\n             \
    \   max_prime = i;\n            }\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long largest_prime = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] > largest_prime) {\n            largest_prime\
    \ = lst[i];\n        }\n    }\n    long sum = 0;\n    while (largest_prime > 0)\
    \ {\n        sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\
    \    return sum;", "  long max_prime = 0;\n  for (long i = 0; i < lst.size();\
    \ i++) {\n    long n = lst[i];\n    bool is_prime = true;\n    for (long j = 2;\
    \ j <= n / 2; j++) {\n      if (n % j == 0) {\n        is_prime = false;\n   \
    \     break;\n      }\n    }\n    if (is_prime && n > max_prime) {\n      max_prime\
    \ = n;\n    }\n  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum += max_prime\
    \ % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime)\
    \ {\n            bool is_prime = true;\n            for (long j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j == 0) {\n                    is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (is_prime) {\n                max_prime = lst[i];\n            }\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n\
    \    }\n    return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num <= 1) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < num; j++)\
    \ {\n            if (num % j == 0) {\n                is_prime = false;\n    \
    \            break;\n            }\n        }\n        if (is_prime) {\n     \
    \       max_prime = std::max(max_prime, num);\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long largest_prime = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest_prime && is_prime(lst[i]))\
    \ {\n            largest_prime = lst[i];\n        }\n    }\n    long sum = 0;\n\
    \    while (largest_prime > 0) {\n        sum += largest_prime % 10;\n       \
    \ largest_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n  \
    \  for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n\
    \            bool is_prime = true;\n            for (long j = 2; j < lst[i]; j++)\
    \ {\n                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = lst[i];\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n\
    \        if (num > max_prime) {\n            bool is_prime = true;\n         \
    \   for (long j = 2; j <= num / 2; j++) {\n                if (num % j == 0) {\n\
    \                    is_prime = false;\n                    break;\n         \
    \       }\n            }\n            if (is_prime) {\n                max_prime\
    \ = num;\n            }\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long max = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        long num = lst[i];\n        if (num == 1)\
    \ {\n            continue;\n        }\n        bool is_prime = true;\n       \
    \ for (long j = 2; j <= num / 2; j++) {\n            if (num % j == 0) {\n   \
    \             is_prime = false;\n                break;\n            }\n     \
    \   }\n        if (is_prime) {\n            max_prime = std::max(max_prime, num);\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ long maxPrime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] > maxPrime) {\n            bool isPrime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                maxPrime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (maxPrime > 0)\
    \ {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return\
    \ sum;", "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime\
    \ && is_prime(i)) {\n            max_prime = i;\n        }\n    }\n    long sum\
    \ = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime\
    \ /= 10;\n    }\n    return sum;", "    long max = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max\
    \ % 10;\n        max /= 10;\n    }\n    return sum;", "    long max = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n     \
    \       max = lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0)\
    \ {\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;", " \
    \   long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ if (lst[i] > max_prime) {\n            bool is_prime = true;\n            for\
    \ (long j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n  \
    \                  is_prime = false;\n                    break;\n           \
    \     }\n            }\n            if (is_prime) {\n                max_prime\
    \ = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long max = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n\
    \    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n        max\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime &&\
    \ lst[i] % 2 != 0) {\n            bool is_prime = true;\n            for (long\
    \ j = 2; j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n        \
    \            is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = lst[i];\n\
    \            }\n        }\n    }\n    long sum = 0;\n    while (max_prime > 0)\
    \ {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n    return\
    \ sum;", "    long max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    std::vector<long> primes;\n    for\
    \ (long i = 2; i <= max; i++) {\n        bool isPrime = true;\n        for (long\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            primes.push_back(i);\n        }\n    }\n    long maxPrime = 0;\n\
    \    for (auto i : lst) {\n        for (auto j : primes) {\n            if (i\
    \ == j) {\n                if (i > maxPrime) {\n                    maxPrime =\
    \ i;\n                }\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (maxPrime > 0) {\n        sum += maxPrime % 10;\n        maxPrime /=\
    \ 10;\n    }\n    return sum;", "    // your code here\n    long max = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > max){\n         \
    \   max = lst[i];\n        }\n    }\n    int sum = 0;\n    while(max > 0){\n \
    \       sum += max % 10;\n        max /= 10;\n    }\n    return sum;", "  long\
    \ max = 0;\n  for (auto i : lst) {\n    if (i > max) {\n      max = i;\n    }\n\
    \  }\n  std::vector<long> primes;\n  for (long i = 2; i <= max; i++) {\n    bool\
    \ isPrime = true;\n    for (long j = 2; j <= i / 2; j++) {\n      if (i % j ==\
    \ 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
    \ {\n      primes.push_back(i);\n    }\n  }\n  long maxPrime = 0;\n  for (auto\
    \ i : lst) {\n    for (auto j : primes) {\n      if (i == j) {\n        if (i\
    \ > maxPrime) {\n          maxPrime = i;\n        }\n      }\n    }\n  }\n  long\
    \ sum = 0;\n  while (maxPrime > 0) {\n    sum += maxPrime % 10;\n    maxPrime\
    \ /= 10;\n  }\n  return sum;", "    long max_prime = 0;\n    for (auto i : lst)\
    \ {\n        if (i > 1) {\n            bool is_prime = true;\n            for\
    \ (long j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n       \
    \             is_prime = false;\n                    break;\n                }\n\
    \            }\n            if (is_prime) {\n                max_prime = std::max(max_prime,\
    \ i);\n            }\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long largestPrime = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > largestPrime) {\n            bool isPrime = true;\n\
    \            for (int j = 2; j < lst[i]; j++) {\n                if (lst[i] %\
    \ j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  largestPrime = lst[i];\n            }\n        }\n    }\n    long sum = 0;\n\
    \    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "  // Your code here\n  long\
    \ max = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] > max){\n  \
    \    max = lst[i];\n    }\n  }\n  bool isPrime = true;\n  for(int i = 2; i < max;\
    \ i++){\n    if(max % i == 0){\n      isPrime = false;\n      break;\n    }\n\
    \  }\n  if(isPrime){\n    long sum = 0;\n    while(max > 0){\n      sum += max\
    \ % 10;\n      max /= 10;\n    }\n    return sum;\n  }\n  return 0;", '  std::vector<long>
    primes = {(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19,
    (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53,
    (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89,
    (long)97, (long)101, (long)103, (long)107, (long)109, (long)113, (long)127, (long)131,
    (long)137, (long)139, (long)149, (long)151, (long)157, (long)163, (long)167, (long)173,
    (long)179, (long)181, (long)191, (long)193, (long)197, (long)199, (long)211, (long)223,
    (long)227, (long)229, (long)233, (long)239, (long)241, (long)251, (long)257, (long)263,
    (long)269, (long)271, (long)277, (long)281, (long)283, (long)293, (long)307, (long)311,
    (long)313, (long)317, (long)331, (long)337, (long)347, (long)349, (long)353, (long)359,
    (long)367, (long)373, (long)379, (long)383, (long)389, (long)397, (long)401, (long)409,
    (long)419, (long)421, (long)431, (long)433, (long)439, (long)443, (long)449, (long)457,
    (long)461, (long)463, (long)467, (long)479, (long)487, (long)491, (long)499, (long)503,
    (long)509, (long)521, (long)523, (long)5', "    long max = 0;\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max =\
    \ lst[i];\n        }\n    }\n    long sum = 0;\n    while (max > 0) {\n      \
    \  sum += max % 10;\n        max /= 10;\n    }\n    return sum;", "    long max_prime\
    \ = 0;\n    for (auto i : lst) {\n        if (i > max_prime && is_prime(i)) {\n\
    \            max_prime = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long num = lst[i];\n        if (num == 0 || num == 1) {\n  \
    \          continue;\n        }\n        bool is_prime = true;\n        for (long\
    \ j = 2; j <= std::sqrt(num); j++) {\n            if (num % j == 0) {\n      \
    \          is_prime = false;\n                break;\n            }\n        }\n\
    \        if (is_prime) {\n            max_prime = std::max(max_prime, num);\n\
    \        }\n    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum\
    \ += max_prime % 10;\n        max_prime /= 10;\n    }\n    return sum;", "   \
    \ // your code here\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    std::vector<long>\
    \ primes;\n    for(int i = 2; i <= max; i++){\n        bool isPrime = true;\n\
    \        for(int j = 2; j < i; j++){\n            if(i % j == 0){\n          \
    \      isPrime = false;\n                break;\n            }\n        }\n  \
    \      if(isPrime){\n            primes.push_back(i);\n        }\n    }\n    long\
    \ maxPrime = 0;\n    for(int i = 0; i < primes.size(); i++){\n        if(primes[i]\
    \ > maxPrime){\n            maxPrime = primes[i];\n        }\n    }\n    long\
    \ sum = 0;\n    while(maxPrime > 0){\n        sum += maxPrime % 10;\n        maxPrime\
    \ /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] < 2) {\n            continue;\n\
    \        }\n        bool is_prime = true;\n        for (long j = 2; j < lst[i];\
    \ j++) {\n            if (lst[i] % j == 0) {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime) {\n \
    \           max_prime = std::max(max_prime, lst[i]);\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max = 0;\n    for (auto\
    \ i : lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n\
    \    std::vector<long> primes;\n    for (long i = 2; i <= max; i++) {\n      \
    \  bool isPrime = true;\n        for (auto j : primes) {\n            if (i %\
    \ j == 0) {\n                isPrime = false;\n                break;\n      \
    \      }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n\
    \        }\n    }\n    long maxPrime = 0;\n    for (auto i : lst) {\n        for\
    \ (auto j : primes) {\n            if (i == j) {\n                if (i > maxPrime)\
    \ {\n                    maxPrime = i;\n                }\n            }\n   \
    \     }\n    }\n    long sum = 0;\n    while (maxPrime > 0) {\n        sum +=\
    \ maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;", "  long max\
    \ = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n \
    \     max = lst[i];\n    }\n  }\n  long max_prime = 0;\n  for (long i = 0; i <\
    \ lst.size(); i++) {\n    if (lst[i] > max_prime && lst[i] < max) {\n      max_prime\
    \ = lst[i];\n    }\n  }\n  long sum = 0;\n  while (max_prime > 0) {\n    sum +=\
    \ max_prime % 10;\n    max_prime /= 10;\n  }\n  return sum;", "    long max_prime\
    \ = 0;\n    for (auto i : lst) {\n        if (i > max_prime && is_prime(i)) {\n\
    \            max_prime = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "    long max_prime = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max_prime && lst[i] % 2 != 0) {\n            bool\
    \ is_prime = true;\n            for (long j = 2; j < lst[i]; j++) {\n        \
    \        if (lst[i] % j == 0) {\n                    is_prime = false;\n     \
    \               break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = lst[i];\n            }\n        }\n    }\n  \
    \  long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return sum;", "    long ret = 0;\n    std::vector<long>\
    \ primes;\n    for (long i = 0; i < lst.size(); i++) {\n        bool is_prime\
    \ = true;\n        for (long j = 0; j < primes.size(); j++) {\n            if\
    \ (lst[i] % primes[j] == 0) {\n                is_prime = false;\n           \
    \     break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(lst[i]);\n\
    \        }\n    }\n    long max_prime = 0;\n    for (long i = 0; i < primes.size();\
    \ i++) {\n        if (primes[i] > max_prime) {\n            max_prime = primes[i];\n\
    \        }\n    }\n    while (max_prime > 0) {\n        ret += max_prime % 10;\n\
    \        max_prime /= 10;\n    }\n    return ret;", "    long max_prime = 0;\n\
    \    for (auto i : lst) {\n        if (i > max_prime && is_prime(i)) {\n     \
    \       max_prime = i;\n        }\n    }\n    long sum = 0;\n    while (max_prime\
    \ > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n    }\n  \
    \  return sum;", "  long max_prime = 0;\n  for (long i = 0; i < lst.size(); i++)\
    \ {\n    if (lst[i] > max_prime) {\n      bool is_prime = true;\n      for (long\
    \ j = 2; j < lst[i]; j++) {\n        if (lst[i] % j == 0) {\n          is_prime\
    \ = false;\n          break;\n        }\n      }\n      if (is_prime) {\n    \
    \    max_prime = lst[i];\n      }\n    }\n  }\n  long sum = 0;\n  while (max_prime\
    \ > 0) {\n    sum += max_prime % 10;\n    max_prime /= 10;\n  }\n  return sum;",
  "    long max_prime = 0;\n    for (auto i : lst) {\n        if (i > max_prime) {\n\
    \            bool is_prime = true;\n            for (long j = 2; j < i; j++) {\n\
    \                if (i % j == 0) {\n                    is_prime = false;\n  \
    \                  break;\n                }\n            }\n            if (is_prime)\
    \ {\n                max_prime = i;\n            }\n        }\n    }\n    long\
    \ sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime % 10;\n    \
    \    max_prime /= 10;\n    }\n    return sum;", "    long max_prime = 0;\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        long num = lst[i];\n      \
    \  bool is_prime = true;\n        for (long j = 2; j <= num / 2; j++) {\n    \
    \        if (num % j == 0) {\n                is_prime = false;\n            \
    \    break;\n            }\n        }\n        if (is_prime && num > max_prime)\
    \ {\n            max_prime = num;\n        }\n    }\n    long sum = 0;\n    while\
    \ (max_prime > 0) {\n        sum += max_prime % 10;\n        max_prime /= 10;\n\
    \    }\n    return sum;", "    long max = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    long sum = 0;\n    while (max > 0) {\n        sum += max % 10;\n \
    \       max /= 10;\n    }\n    return sum;", "    long sum = 0;\n    long max\
    \ = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    for (int i = 2; i <= max;\
    \ i++) {\n        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n\
    \            if (i % j == 0) {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        if (isPrime) {\n            for\
    \ (int k = 0; k < lst.size(); k++) {\n                if (lst[k] == i) {\n   \
    \                 while (i > 0) {\n                        sum += i % 10;\n  \
    \                      i /= 10;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return sum;", "    long max_prime = 0;\n \
    \   for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max_prime) {\n\
    \            bool is_prime = true;\n            for (int j = 2; j < lst[i]; j++)\
    \ {\n                if (lst[i] % j == 0) {\n                    is_prime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (is_prime) {\n                max_prime = lst[i];\n            }\n        }\n\
    \    }\n    long sum = 0;\n    while (max_prime > 0) {\n        sum += max_prime\
    \ % 10;\n        max_prime /= 10;\n    }\n    return sum;"]
stop_tokens:
- "\n}"
