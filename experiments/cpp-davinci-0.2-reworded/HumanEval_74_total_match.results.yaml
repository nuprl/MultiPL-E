language: cpp
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qyojva.cpp: In function 'int main()':\n/tmp/tmpb1qyojva.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1qyojva.cpp:2:\n/tmp/tmpb1qyojva.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpb1qyojva.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpb1qyojva.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpb1qyojva.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb1qyojva.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qyojva.cpp: In function 'int main()':\n/tmp/tmpb1qyojva.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1qyojva.cpp:2:\n/tmp/tmpb1qyojva.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpb1qyojva.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpb1qyojva.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpb1qyojva.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb1qyojva.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (auto i : lst1)\n\t\tl1 += i.size();\n\
    \tfor (auto i : lst2)\n\t\tl2 += i.size();\n\tif (l1 < l2)\n\t\treturn lst1;\n\
    \telse if (l1 > l2)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_cqvqjpx.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp_cqvqjpx.cpp:19:12: error: 'i' does not name a type\n  for (auto\
    \ i : lst1)\n            ^\n/tmp/tmp_cqvqjpx.cpp:21:2: error: expected ';' before\
    \ 'for'\n  for (auto i : lst2)\n  ^\n/tmp/tmp_cqvqjpx.cpp:21:2: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp_cqvqjpx.cpp:21:2: error: expected\
    \ ';' before 'for'\n/tmp/tmp_cqvqjpx.cpp:21:2: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp_cqvqjpx.cpp:21:2: error: expected ')' before 'for'\n\
    /tmp/tmp_cqvqjpx.cpp:21:12: error: 'i' does not name a type\n  for (auto i : lst2)\n\
    \            ^\n/tmp/tmp_cqvqjpx.cpp:23:2: error: expected ';' before 'if'\n \
    \ if (l1 < l2)\n  ^\n/tmp/tmp_cqvqjpx.cpp:23:2: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp_cqvqjpx.cpp:23:2: error: expected ';' before 'if'\n/tmp/tmp_cqvqjpx.cpp:23:2:\
    \ error: expected primary-expression before 'if'\n/tmp/tmp_cqvqjpx.cpp:23:2: error:\
    \ expected ')' before 'if'\n/tmp/tmp_cqvqjpx.cpp: In function 'int main()':\n\
    /tmp/tmp_cqvqjpx.cpp:31:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_cqvqjpx.cpp:2:\n/tmp/tmp_cqvqjpx.cpp:32:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_cqvqjpx.cpp:33:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7mhan_f.cpp: In function 'int main()':\n/tmp/tmpr7mhan_f.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7mhan_f.cpp:2:\n/tmp/tmpr7mhan_f.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpr7mhan_f.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpr7mhan_f.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpr7mhan_f.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr7mhan_f.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvq37gu2.cpp: In function 'int main()':\n/tmp/tmpbvq37gu2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbvq37gu2.cpp:2:\n/tmp/tmpbvq37gu2.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpbvq37gu2.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpbvq37gu2.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpbvq37gu2.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbvq37gu2.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxidik6d.cpp: In function 'int main()':\n/tmp/tmpfxidik6d.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfxidik6d.cpp:2:\n/tmp/tmpfxidik6d.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpfxidik6d.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpfxidik6d.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpfxidik6d.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfxidik6d.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2)\n\t\treturn lst1;\n\
    \telse\n\t\treturn lst2;\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjilva5nn.cpp: In function 'int main()':\n/tmp/tmpjilva5nn.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjilva5nn.cpp:2:\n/tmp/tmpjilva5nn.cpp:33:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpjilva5nn.cpp:34:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpjilva5nn.cpp:34:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpjilva5nn.cpp:34:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjilva5nn.cpp:34:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzc9ah2i.cpp: In function 'int main()':\n/tmp/tmpnzc9ah2i.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnzc9ah2i.cpp:2:\n/tmp/tmpnzc9ah2i.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpnzc9ah2i.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpnzc9ah2i.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpnzc9ah2i.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnzc9ah2i.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvq37gu2.cpp: In function 'int main()':\n/tmp/tmpbvq37gu2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbvq37gu2.cpp:2:\n/tmp/tmpbvq37gu2.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpbvq37gu2.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpbvq37gu2.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpbvq37gu2.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbvq37gu2.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe234kjna.cpp: In function 'int main()':\n/tmp/tmpe234kjna.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe234kjna.cpp:2:\n/tmp/tmpe234kjna.cpp:39:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe234kjna.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe234kjna.cpp:40:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe234kjna.cpp:40:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe234kjna.cpp:40:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else if(l2 < l1) {\n        return lst2;\n    }\n    else {\n    \
    \    return lst1;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvycobsj.cpp: In function 'int main()':\n/tmp/tmpjvycobsj.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjvycobsj.cpp:2:\n/tmp/tmpjvycobsj.cpp:37:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpjvycobsj.cpp:38:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpjvycobsj.cpp:38:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpjvycobsj.cpp:38:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjvycobsj.cpp:38:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(auto i : lst1)\n        l1 += i.size();\n\
    \    for(auto i : lst2)\n        l2 += i.size();\n    if(l1 <= l2)\n        return\
    \ lst1;\n    else\n        return lst2;\n}\nint main() {\n    auto candidate =\
    \ total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rhksi4o.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp5rhksi4o.cpp:19:14: error: 'i' does not name a type\n     for(auto\
    \ i : lst1)\n              ^\n/tmp/tmp5rhksi4o.cpp:21:5: error: expected ';' before\
    \ 'for'\n     for(auto i : lst2)\n     ^\n/tmp/tmp5rhksi4o.cpp:21:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp5rhksi4o.cpp:21:5: error: expected\
    \ ';' before 'for'\n/tmp/tmp5rhksi4o.cpp:21:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmp5rhksi4o.cpp:21:5: error: expected ')' before 'for'\n\
    /tmp/tmp5rhksi4o.cpp:21:14: error: 'i' does not name a type\n     for(auto i :\
    \ lst2)\n              ^\n/tmp/tmp5rhksi4o.cpp:23:5: error: expected ';' before\
    \ 'if'\n     if(l1 <= l2)\n     ^\n/tmp/tmp5rhksi4o.cpp:23:5: error: expected\
    \ primary-expression before 'if'\n/tmp/tmp5rhksi4o.cpp:23:5: error: expected ';'\
    \ before 'if'\n/tmp/tmp5rhksi4o.cpp:23:5: error: expected primary-expression before\
    \ 'if'\n/tmp/tmp5rhksi4o.cpp:23:5: error: expected ')' before 'if'\n/tmp/tmp5rhksi4o.cpp:\
    \ In function 'int main()':\n/tmp/tmp5rhksi4o.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = total_match;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5rhksi4o.cpp:2:\n/tmp/tmp5rhksi4o.cpp:30:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp5rhksi4o.cpp:31:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i: lst1) {\n   \
    \     sum1 += i.size();\n    }\n    for(auto i: lst2) {\n        sum2 += i.size();\n\
    \    }\n    if(sum1 == sum2) {\n        return lst1;\n    }\n    if(sum1 < sum2)\
    \ {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuo4epnn.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpiuo4epnn.cpp:20:14: error: 'i' does not name a type\n     for(auto\
    \ i: lst1) {\n              ^\n/tmp/tmpiuo4epnn.cpp:23:5: error: expected ';'\
    \ before 'for'\n     for(auto i: lst2) {\n     ^\n/tmp/tmpiuo4epnn.cpp:23:5: error:\
    \ expected primary-expression before 'for'\n/tmp/tmpiuo4epnn.cpp:23:5: error:\
    \ expected ';' before 'for'\n/tmp/tmpiuo4epnn.cpp:23:5: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpiuo4epnn.cpp:23:5: error: expected ')' before 'for'\n\
    /tmp/tmpiuo4epnn.cpp:23:14: error: 'i' does not name a type\n     for(auto i:\
    \ lst2) {\n              ^\n/tmp/tmpiuo4epnn.cpp:26:5: error: expected ';' before\
    \ 'if'\n     if(sum1 == sum2) {\n     ^\n/tmp/tmpiuo4epnn.cpp:26:5: error: expected\
    \ primary-expression before 'if'\n/tmp/tmpiuo4epnn.cpp:26:5: error: expected ';'\
    \ before 'if'\n/tmp/tmpiuo4epnn.cpp:26:5: error: expected primary-expression before\
    \ 'if'\n/tmp/tmpiuo4epnn.cpp:26:5: error: expected ')' before 'if'\n/tmp/tmpiuo4epnn.cpp:\
    \ In function 'int main()':\n/tmp/tmpiuo4epnn.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = total_match;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiuo4epnn.cpp:2:\n/tmp/tmpiuo4epnn.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpiuo4epnn.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvq37gu2.cpp: In function 'int main()':\n/tmp/tmpbvq37gu2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbvq37gu2.cpp:2:\n/tmp/tmpbvq37gu2.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpbvq37gu2.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpbvq37gu2.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpbvq37gu2.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbvq37gu2.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7mhan_f.cpp: In function 'int main()':\n/tmp/tmpr7mhan_f.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7mhan_f.cpp:2:\n/tmp/tmpr7mhan_f.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpr7mhan_f.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpr7mhan_f.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpr7mhan_f.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr7mhan_f.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qyojva.cpp: In function 'int main()':\n/tmp/tmpb1qyojva.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1qyojva.cpp:2:\n/tmp/tmpb1qyojva.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpb1qyojva.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpb1qyojva.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpb1qyojva.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb1qyojva.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54y828sl.cpp: In function 'int main()':\n/tmp/tmp54y828sl.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp54y828sl.cpp:2:\n/tmp/tmp54y828sl.cpp:33:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp54y828sl.cpp:34:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp54y828sl.cpp:34:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp54y828sl.cpp:34:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp54y828sl.cpp:34:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    else if(sum1 < sum2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvq37gu2.cpp: In function 'int main()':\n/tmp/tmpbvq37gu2.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbvq37gu2.cpp:2:\n/tmp/tmpbvq37gu2.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpbvq37gu2.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpbvq37gu2.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpbvq37gu2.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbvq37gu2.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint lst1_total = 0;\n\tint lst2_total = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\tlst1_total += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\tlst2_total += lst2[i].size();\n\t}\n\tif (lst1_total\
    \ < lst2_total) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcioki9u_.cpp: In function 'int main()':\n/tmp/tmpcioki9u_.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcioki9u_.cpp:2:\n/tmp/tmpcioki9u_.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpcioki9u_.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpcioki9u_.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpcioki9u_.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpcioki9u_.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzc9ah2i.cpp: In function 'int main()':\n/tmp/tmpnzc9ah2i.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnzc9ah2i.cpp:2:\n/tmp/tmpnzc9ah2i.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpnzc9ah2i.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpnzc9ah2i.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpnzc9ah2i.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnzc9ah2i.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n\
    \        l1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++)\n   \
    \     l2 += lst2[i].size();\n    if(l1 == l2)\n        return lst1;\n    else\
    \ if(l1 < l2)\n        return lst1;\n    else\n        return lst2;\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr5lugr0.cpp: In function 'int main()':\n/tmp/tmplr5lugr0.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplr5lugr0.cpp:2:\n/tmp/tmplr5lugr0.cpp:32:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmplr5lugr0.cpp:33:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmplr5lugr0.cpp:33:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmplr5lugr0.cpp:33:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmplr5lugr0.cpp:33:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qyojva.cpp: In function 'int main()':\n/tmp/tmpb1qyojva.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1qyojva.cpp:2:\n/tmp/tmpb1qyojva.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpb1qyojva.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpb1qyojva.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpb1qyojva.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb1qyojva.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (auto i : lst1) {\n\t\tsum1\
    \ += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\tsum2 += i.size();\n\t}\n\tif\
    \ (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4lbki43.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpp4lbki43.cpp:20:12: error: 'i' does not name a type\n  for (auto\
    \ i : lst1) {\n            ^\n/tmp/tmpp4lbki43.cpp:23:2: error: expected ';' before\
    \ 'for'\n  for (auto i : lst2) {\n  ^\n/tmp/tmpp4lbki43.cpp:23:2: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected\
    \ ';' before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected ')' before 'for'\n\
    /tmp/tmpp4lbki43.cpp:23:12: error: 'i' does not name a type\n  for (auto i : lst2)\
    \ {\n            ^\n/tmp/tmpp4lbki43.cpp:26:2: error: expected ';' before 'if'\n\
    \  if (sum1 < sum2) {\n  ^\n/tmp/tmpp4lbki43.cpp:26:2: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpp4lbki43.cpp:26:2: error: expected ';' before 'if'\n/tmp/tmpp4lbki43.cpp:26:2:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpp4lbki43.cpp:26:2: error:\
    \ expected ')' before 'if'\n/tmp/tmpp4lbki43.cpp: In function 'int main()':\n\
    /tmp/tmpp4lbki43.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp4lbki43.cpp:2:\n/tmp/tmpp4lbki43.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpp4lbki43.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::stri"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1=0,l2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\t\tl1+=lst1[i].size();\n\
    \tfor(int i=0;i<lst2.size();i++)\n\t\tl2+=lst2[i].size();\n\tif(l1<l2)\n\t\treturn\
    \ lst1;\n\telse if(l2<l1)\n\t\treturn lst2;\n\telse\n\t\treturn lst1;\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9piro1ff.cpp: In function 'int main()':\n/tmp/tmp9piro1ff.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9piro1ff.cpp:2:\n/tmp/tmp9piro1ff.cpp:32:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp9piro1ff.cpp:33:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp9piro1ff.cpp:33:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp9piro1ff.cpp:33:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9piro1ff.cpp:33:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) {\n        return lst1;\n\
    \    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxidik6d.cpp: In function 'int main()':\n/tmp/tmpfxidik6d.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfxidik6d.cpp:2:\n/tmp/tmpfxidik6d.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpfxidik6d.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpfxidik6d.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpfxidik6d.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfxidik6d.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++)\n\
    \        l1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++)\n   \
    \     l2 += lst2[i].size();\n    if(l1 < l2)\n        return lst1;\n    else if(l2\
    \ < l1)\n        return lst2;\n    else\n        return lst1;\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q1nwk61.cpp: In function 'int main()':\n/tmp/tmp1q1nwk61.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1q1nwk61.cpp:2:\n/tmp/tmp1q1nwk61.cpp:32:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1q1nwk61.cpp:33:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1q1nwk61.cpp:33:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1q1nwk61.cpp:33:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1q1nwk61.cpp:33:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (auto i : lst1) {\n\t\tsum1\
    \ += i.size();\n\t}\n\tfor (auto i : lst2) {\n\t\tsum2 += i.size();\n\t}\n\tif\
    \ (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\n\
    int main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4lbki43.cpp: In function 'std::vector<std::basic_string<char>\
    \ > total_match(std::vector<std::basic_string<char> >, std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpp4lbki43.cpp:20:12: error: 'i' does not name a type\n  for (auto\
    \ i : lst1) {\n            ^\n/tmp/tmpp4lbki43.cpp:23:2: error: expected ';' before\
    \ 'for'\n  for (auto i : lst2) {\n  ^\n/tmp/tmpp4lbki43.cpp:23:2: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected\
    \ ';' before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected primary-expression\
    \ before 'for'\n/tmp/tmpp4lbki43.cpp:23:2: error: expected ')' before 'for'\n\
    /tmp/tmpp4lbki43.cpp:23:12: error: 'i' does not name a type\n  for (auto i : lst2)\
    \ {\n            ^\n/tmp/tmpp4lbki43.cpp:26:2: error: expected ';' before 'if'\n\
    \  if (sum1 < sum2) {\n  ^\n/tmp/tmpp4lbki43.cpp:26:2: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpp4lbki43.cpp:26:2: error: expected ';' before 'if'\n/tmp/tmpp4lbki43.cpp:26:2:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpp4lbki43.cpp:26:2: error:\
    \ expected ')' before 'if'\n/tmp/tmpp4lbki43.cpp: In function 'int main()':\n\
    /tmp/tmpp4lbki43.cpp:34:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = total_match;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp4lbki43.cpp:2:\n/tmp/tmpp4lbki43.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpp4lbki43.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::stri"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    for (auto i :\
    \ lst1) {\n        total_lst1 += i.size();\n    }\n    for (auto i : lst2) {\n\
    \        total_lst2 += i.size();\n    }\n    if (total_lst1 < total_lst2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp13mwh_19.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (count1 > count2) {\n\t\treturn lst2;\n\t}\n\telse {\n\
    \t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdjhyn1id.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbmhl0egx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++)\n    {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i <\
    \ lst2.size(); i++)\n    {\n        sum2 += lst2[i].size();\n    }\n    if(sum1\
    \ < sum2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe234kjna.cpp: In function 'int main()':\n/tmp/tmpe234kjna.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe234kjna.cpp:2:\n/tmp/tmpe234kjna.cpp:39:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe234kjna.cpp:40:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe234kjna.cpp:40:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe234kjna.cpp:40:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe234kjna.cpp:40:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int total1 = 0;\n    int total2 = 0;\n    for (int i = 0; i < lst1.size();\
    \ i++) {\n        total1 += lst1[i].size();\n    }\n    for (int i = 0; i < lst2.size();\
    \ i++) {\n        total2 += lst2[i].size();\n    }\n    if (total1 < total2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbmhl0egx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total_lst1 = 0;\n\tint total_lst2 = 0;\n\tfor (int i = 0; i <\
    \ lst1.size(); i++) {\n\t\ttotal_lst1 += lst1[i].size();\n\t}\n\tfor (int i =\
    \ 0; i < lst2.size(); i++) {\n\t\ttotal_lst2 += lst2[i].size();\n\t}\n\tif (total_lst1\
    \ < total_lst2) {\n\t\treturn lst1;\n\t}\n\telse if (total_lst1 > total_lst2)\
    \ {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph5flrtvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else if(sum1 > sum2) {\n        return lst2;\n \
    \   }\n    else {\n        return lst1;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qyojva.cpp: In function 'int main()':\n/tmp/tmpb1qyojva.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb1qyojva.cpp:2:\n/tmp/tmpb1qyojva.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpb1qyojva.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpb1qyojva.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpb1qyojva.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpb1qyojva.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7mhan_f.cpp: In function 'int main()':\n/tmp/tmpr7mhan_f.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7mhan_f.cpp:2:\n/tmp/tmpr7mhan_f.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpr7mhan_f.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpr7mhan_f.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpr7mhan_f.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr7mhan_f.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint total1 = 0;\n\tint total2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\ttotal1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\ttotal2 += lst2[i].size();\n\t}\n\tif (total1 < total2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnzc9ah2i.cpp: In function 'int main()':\n/tmp/tmpnzc9ah2i.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnzc9ah2i.cpp:2:\n/tmp/tmpnzc9ah2i.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpnzc9ah2i.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpnzc9ah2i.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpnzc9ah2i.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnzc9ah2i.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i: lst1) {\n   \
    \     sum1 += i.size();\n    }\n    for(auto i: lst2) {\n        sum2 += i.size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5oowm7wa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int l1 = 0, l2 = 0;\n    for(int i = 0; i < lst1.size(); i++) {\n\
    \        l1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size(); i++)\
    \ {\n        l2 += lst2[i].size();\n    }\n    if(l1 < l2) return lst1;\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzf7abk9j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppz_ymtvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 == sum2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\t\
    return lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dt_em_t.cpp: In function 'int main()':\n/tmp/tmp1dt_em_t.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dt_em_t.cpp:2:\n/tmp/tmp1dt_em_t.cpp:38:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp1dt_em_t.cpp:39:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp1dt_em_t.cpp:39:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp1dt_em_t.cpp:39:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp1dt_em_t.cpp:39:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppz_ymtvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i : lst1) {\n  \
    \      sum1 += i.size();\n    }\n    for(auto i : lst2) {\n        sum2 += i.size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdbsl75l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7mhan_f.cpp: In function 'int main()':\n/tmp/tmpr7mhan_f.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7mhan_f.cpp:2:\n/tmp/tmpr7mhan_f.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpr7mhan_f.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpr7mhan_f.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpr7mhan_f.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr7mhan_f.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint l1 = 0, l2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\
    \tl1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\t\
    l2 += lst2[i].size();\n\t}\n\tif (l1 < l2) {\n\t\treturn lst1;\n\t}\n\telse {\n\
    \t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7mhan_f.cpp: In function 'int main()':\n/tmp/tmpr7mhan_f.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr7mhan_f.cpp:2:\n/tmp/tmpr7mhan_f.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpr7mhan_f.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpr7mhan_f.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpr7mhan_f.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr7mhan_f.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 > sum2) {\n\t\treturn lst2;\n\
    \t}\n\telse {\n\t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppz_ymtvg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    } else {\n        return lst2;\n    }\n}\nint main() {\n\
    \    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6c0u23o.cpp: In function 'int main()':\n/tmp/tmpx6c0u23o.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx6c0u23o.cpp:2:\n/tmp/tmpx6c0u23o.cpp:34:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpx6c0u23o.cpp:35:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpx6c0u23o.cpp:35:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpx6c0u23o.cpp:35:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpx6c0u23o.cpp:35:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse if (count1 > count2) {\n\t\treturn lst2;\n\t}\n\telse {\n\
    \t\treturn lst1;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n  \
    \  assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdjhyn1id.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(auto i: lst1) {\n   \
    \     sum1 += i.size();\n    }\n    for(auto i: lst2) {\n        sum2 += i.size();\n\
    \    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n    else {\n     \
    \   return lst2;\n    }\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5oowm7wa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int lst1_total = 0;\n    int lst2_total = 0;\n    for (auto i :\
    \ lst1) {\n        lst1_total += i.size();\n    }\n    for (auto i : lst2) {\n\
    \        lst2_total += i.size();\n    }\n    if (lst1_total < lst2_total) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpksime458.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 == sum2) {\n   \
    \     return lst1;\n    }\n    if(sum1 < sum2) {\n        return lst1;\n    }\n\
    \    else {\n        return lst2;\n    }\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_8lveg8x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748919
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1=0,count2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\t{\n\t\
    \tcount1+=lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\tcount2+=lst2[i].size();\n\
    \t}\n\tif(count1<count2)\n\t{\n\t\treturn lst1;\n\t}\n\telse\n\t{\n\t\treturn\
    \ lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqrwser68.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659748918
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        sum1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        sum2 += lst2[i].size();\n    }\n    if(sum1 < sum2) {\n    \
    \    return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main()\
    \ {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6m4i49r.cpp: In function 'int main()':\n/tmp/tmp_6m4i49r.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6m4i49r.cpp:2:\n/tmp/tmp_6m4i49r.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp_6m4i49r.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp_6m4i49r.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp_6m4i49r.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_6m4i49r.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\
    \t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate = total_match;\n\
    \    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczik27z8.cpp: In function 'int main()':\n/tmp/tmpczik27z8.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczik27z8.cpp:2:\n/tmp/tmpczik27z8.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpczik27z8.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpczik27z8.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpczik27z8.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpczik27z8.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        count1 += lst1[i].size();\n    }\n    for(int i = 0; i < lst2.size();\
    \ i++) {\n        count2 += lst2[i].size();\n    }\n    if(count1 < count2) {\n\
    \        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint\
    \ main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4mxwf14.cpp: In function 'int main()':\n/tmp/tmpe4mxwf14.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4mxwf14.cpp:2:\n/tmp/tmpe4mxwf14.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmpe4mxwf14.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmpe4mxwf14.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmpe4mxwf14.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe4mxwf14.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts two vectors of strings and returns the vector that has \n// total number\
    \ of chars in the all strings of the vector less than the other vector.\n// if\
    \ the two vectors have the same number of chars, return the first vector.\n//\
    \ Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n\
    // (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n\
    // (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n\
    // >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\",\
    \ (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
    4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
    \ lst2) {\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < lst1.size();\
    \ i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size();\
    \ i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn\
    \ lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
    3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
    4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
    hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
    , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
    \ == (std::vector<std::string>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w4kophm.cpp: In function 'int main()':\n/tmp/tmp8w4kophm.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = total_match;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8w4kophm.cpp:2:\n/tmp/tmp8w4kophm.cpp:35:80: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()),\
    \ (std::vector<std::string>())) == (std::vector<std::string>()));\n          \
    \                                                                      ^\n/tmp/tmp8w4kophm.cpp:36:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                               ^\n/tmp/tmp8w4kophm.cpp:36:89:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                                  \
    \                       ^\n/tmp/tmp8w4kophm.cpp:36:89: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8w4kophm.cpp:36:118: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
    , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
    hi\"})));\n                                                     "
  stdout: ''
