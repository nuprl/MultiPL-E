name: HumanEval_40_triples_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes\
  \ a vector of integers as an input.\n// it returns true if there are three distinct\
  \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n\
  // (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
  \ (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)3, (long)5, (long)-100}))) == (false));\n}\n"
completions: ["    // Your code here.\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    // your code here\n    return\
    \ false;", "    // your code here\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int k = l.size()\
    \ - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n\
    \                return true;\n            } else if (l[i] + l[j] + l[k] < 0)\
    \ {\n                j++;\n            } else {\n                k--;\n      \
    \      }\n        }\n    }\n    return false;", "    // Your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // Your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            int sum = l[i] + l[j]\
    \ + l[k];\n            if (sum == 0) {\n                return true;\n       \
    \     } else if (sum < 0) {\n                j++;\n            } else {\n    \
    \            k--;\n            }\n        }\n    }\n    return false;", "    //\
    \ your code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n  \
    \      while (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n         \
    \       return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n     \
    \           j++;\n            } else {\n                k--;\n            }\n\
    \        }\n    }\n    return false;", "    // your code here\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // Your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = i + 1;\n        int k = l.size() - 1;\n        while\
    \ (j < k) {\n            if (l[i] + l[j] + l[k] == 0) {\n                return\
    \ true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n\
    \            } else {\n                k--;\n            }\n        }\n    }\n\
    \    return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    // your code here\n\
    \    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        int j = i + 1;\n        int k = l.size() - 1;\n        while (j < k)\
    \ {\n            if (l[i] + l[j] + l[k] == 0) {\n                return true;\n\
    \            } else if (l[i] + l[j] + l[k] < 0) {\n                j++;\n    \
    \        } else {\n                k--;\n            }\n        }\n    }\n   \
    \ return false;", "    // your code here\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        int\
    \ k = l.size() - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k]\
    \ == 0) {\n                return true;\n            } else if (l[i] + l[j] +\
    \ l[k] < 0) {\n                j++;\n            } else {\n                k--;\n\
    \            }\n        }\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n\
    \        int k = l.size() - 1;\n        while (j < k) {\n            if (l[i]\
    \ + l[j] + l[k] == 0) {\n                return true;\n            } else if (l[i]\
    \ + l[j] + l[k] < 0) {\n                j++;\n            } else {\n         \
    \       k--;\n            }\n        }\n    }\n    return false;"]
stop_tokens:
- "\n}"
